
I2C_TwoBoards_ComPolling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08006f58  08006f58  00016f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000000  080074bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004fc  200001f4  080076b0  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006f0  080076b0  000206f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017eeb  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ae0  00000000  00000000  0003810d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000057a4  00000000  00000000  0003abed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000008e0  00000000  00000000  00040398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000bc8  00000000  00000000  00040c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037781  00000000  00000000  00041840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e486  00000000  00000000  00078fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cd10  00000000  00000000  00087447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001f4157  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d30  00000000  00000000  001f41ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001f6edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001f6fa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001f4 	.word	0x200001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006f3c 	.word	0x08006f3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001f8 	.word	0x200001f8
 80002dc:	08006f3c 	.word	0x08006f3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000a70:	2802      	cmp	r0, #2
{
 8000a72:	b530      	push	{r4, r5, lr}
 8000a74:	b08b      	sub	sp, #44	; 0x2c
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000a76:	d83e      	bhi.n	8000af6 <BSP_LED_Init+0x86>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <BSP_LED_Init+0x8c>)
    {
      LED1_GPIO_CLK_ENABLE();
 8000a7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    if(Led == LED1)
 8000a7e:	bb10      	cbnz	r0, 8000ac6 <BSP_LED_Init+0x56>
      LED1_GPIO_CLK_ENABLE();
 8000a80:	f042 0202 	orr.w	r2, r2, #2
 8000a84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	9b02      	ldr	r3, [sp, #8]
    else
    {
      LED3_GPIO_CLK_ENABLE();
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <BSP_LED_Init+0x90>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a96:	2400      	movs	r4, #0
 8000a98:	2201      	movs	r2, #1
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a9a:	a905      	add	r1, sp, #20
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000a9c:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000aa4:	e9cd 2406 	strd	r2, r4, [sp, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000aa8:	6880      	ldr	r0, [r0, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2203      	movs	r2, #3
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000aac:	9505      	str	r5, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000ab0:	9001      	str	r0, [sp, #4]
 8000ab2:	f000 f97b 	bl	8000dac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ab6:	9801      	ldr	r0, [sp, #4]
 8000ab8:	4622      	mov	r2, r4
 8000aba:	4629      	mov	r1, r5
 8000abc:	f000 fb02 	bl	80010c4 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8000ac0:	4620      	mov	r0, r4
  }

  return ret;
}
 8000ac2:	b00b      	add	sp, #44	; 0x2c
 8000ac4:	bd30      	pop	{r4, r5, pc}
    else if(Led == LED2)
 8000ac6:	2801      	cmp	r0, #1
 8000ac8:	d10a      	bne.n	8000ae0 <BSP_LED_Init+0x70>
      LED2_GPIO_CLK_ENABLE();
 8000aca:	f042 0210 	orr.w	r2, r2, #16
 8000ace:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	9303      	str	r3, [sp, #12]
 8000adc:	9b03      	ldr	r3, [sp, #12]
 8000ade:	e7d9      	b.n	8000a94 <BSP_LED_Init+0x24>
      LED3_GPIO_CLK_ENABLE();
 8000ae0:	f042 0202 	orr.w	r2, r2, #2
 8000ae4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	9304      	str	r3, [sp, #16]
 8000af2:	9b04      	ldr	r3, [sp, #16]
 8000af4:	e7ce      	b.n	8000a94 <BSP_LED_Init+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8000af6:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8000afa:	e7e2      	b.n	8000ac2 <BSP_LED_Init+0x52>
 8000afc:	58024400 	.word	0x58024400
 8000b00:	08006f58 	.word	0x08006f58

08000b04 <BSP_LED_On>:
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b04:	2802      	cmp	r0, #2
{
 8000b06:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b08:	d80a      	bhi.n	8000b20 <BSP_LED_On+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <BSP_LED_On+0x24>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8000b12:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000b16:	68a0      	ldr	r0, [r4, #8]
 8000b18:	f000 fad4 	bl	80010c4 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8000b1c:	2000      	movs	r0, #0
  }

  return ret;
}
 8000b1e:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000b20:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8000b24:	e7fb      	b.n	8000b1e <BSP_LED_On+0x1a>
 8000b26:	bf00      	nop
 8000b28:	08006f58 	.word	0x08006f58

08000b2c <BSP_LED_Off>:
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b2c:	2802      	cmp	r0, #2
{
 8000b2e:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b30:	d80a      	bhi.n	8000b48 <BSP_LED_Off+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <BSP_LED_Off+0x24>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8000b3a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000b3e:	68a0      	ldr	r0, [r4, #8]
 8000b40:	f000 fac0 	bl	80010c4 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8000b44:	2000      	movs	r0, #0
  }

  return ret;
}
 8000b46:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000b48:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8000b4c:	e7fb      	b.n	8000b46 <BSP_LED_Off+0x1a>
 8000b4e:	bf00      	nop
 8000b50:	08006f58 	.word	0x08006f58

08000b54 <BSP_LED_Toggle>:
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b54:	2802      	cmp	r0, #2
{
 8000b56:	b508      	push	{r3, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b58:	d809      	bhi.n	8000b6e <BSP_LED_Toggle+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <BSP_LED_Toggle+0x20>)
 8000b5c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000b60:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000b64:	6890      	ldr	r0, [r2, #8]
 8000b66:	f000 fab2 	bl	80010ce <HAL_GPIO_TogglePin>
  int32_t ret = BSP_ERROR_NONE;
 8000b6a:	2000      	movs	r0, #0
  }

  return ret;
}
 8000b6c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000b6e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8000b72:	e7fb      	b.n	8000b6c <BSP_LED_Toggle+0x18>
 8000b74:	08006f58 	.word	0x08006f58

08000b78 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b78:	491a      	ldr	r1, [pc, #104]	; (8000be4 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b7a:	481b      	ldr	r0, [pc, #108]	; (8000be8 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b7c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000b84:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <SystemInit+0x74>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	f042 0201 	orr.w	r2, r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000b98:	681c      	ldr	r4, [r3, #0]
 8000b9a:	4020      	ands	r0, r4
 8000b9c:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ba0:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ba2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000baa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000bac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000bae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bb2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8000bba:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <SystemInit+0x78>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	041b      	lsls	r3, r3, #16
 8000bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bca:	d202      	bcs.n	8000bd2 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <SystemInit+0x7c>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <SystemInit+0x80>)
 8000bd4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bd8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bde:	608b      	str	r3, [r1, #8]
#endif  


}
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	5c001000 	.word	0x5c001000
 8000bf4:	51008108 	.word	0x51008108
 8000bf8:	52004000 	.word	0x52004000

08000bfc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000bfc:	4770      	bx	lr
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b570      	push	{r4, r5, r6, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c02:	4e0f      	ldr	r6, [pc, #60]	; (8000c40 <HAL_InitTick+0x40>)
{
 8000c04:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000c06:	7830      	ldrb	r0, [r6, #0]
 8000c08:	b908      	cbnz	r0, 8000c0e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000c0a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_InitTick+0x44>)
 8000c14:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c18:	6810      	ldr	r0, [r2, #0]
 8000c1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c1e:	f000 f8af 	bl	8000d80 <HAL_SYSTICK_Config>
 8000c22:	4604      	mov	r4, r0
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d1f0      	bne.n	8000c0a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	2d0f      	cmp	r5, #15
 8000c2a:	d8ee      	bhi.n	8000c0a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f872 	bl	8000d1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4620      	mov	r0, r4
 8000c3a:	6075      	str	r5, [r6, #4]
  return HAL_OK;
 8000c3c:	e7e6      	b.n	8000c0c <HAL_InitTick+0xc>
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000

08000c48 <HAL_Init>:
{
 8000c48:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f000 f854 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c50:	f000 fd0e 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 8000c54:	490f      	ldr	r1, [pc, #60]	; (8000c94 <HAL_Init+0x4c>)
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_Init+0x50>)
 8000c58:	698b      	ldr	r3, [r1, #24]
 8000c5a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	f003 031f 	and.w	r3, r3, #31
 8000c64:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c66:	698b      	ldr	r3, [r1, #24]
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	5cd3      	ldrb	r3, [r2, r3]
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_Init+0x54>)
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	fa20 f303 	lsr.w	r3, r0, r3
 8000c78:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_Init+0x58>)
 8000c7c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f7ff ffbe 	bl	8000c00 <HAL_InitTick>
 8000c84:	4604      	mov	r4, r0
 8000c86:	b918      	cbnz	r0, 8000c90 <HAL_Init+0x48>
  HAL_MspInit();
 8000c88:	f7ff ffb8 	bl	8000bfc <HAL_MspInit>
}
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c90:	2401      	movs	r4, #1
 8000c92:	e7fb      	b.n	8000c8c <HAL_Init+0x44>
 8000c94:	58024400 	.word	0x58024400
 8000c98:	08006f6c 	.word	0x08006f6c
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <HAL_IncTick+0x10>)
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_IncTick+0x14>)
 8000ca8:	6811      	ldr	r1, [r2, #0]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	440b      	add	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000022c 	.word	0x2000022c
 8000cb8:	20000008 	.word	0x20000008

08000cbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <HAL_GetTick+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000022c 	.word	0x2000022c

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff6 	bl	8000cbc <HAL_GetTick>
 8000cd0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	4b04      	ldrne	r3, [pc, #16]	; (8000ce8 <HAL_Delay+0x20>)
 8000cd8:	781b      	ldrbne	r3, [r3, #0]
 8000cda:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	1b43      	subs	r3, r0, r5
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d3fa      	bcc.n	8000cdc <HAL_Delay+0x14>
  {
  }
}
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000cec:	4b01      	ldr	r3, [pc, #4]	; (8000cf4 <HAL_GetREVID+0x8>)
 8000cee:	6818      	ldr	r0, [r3, #0]
}
 8000cf0:	0c00      	lsrs	r0, r0, #16
 8000cf2:	4770      	bx	lr
 8000cf4:	5c001000 	.word	0x5c001000

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d06:	0412      	lsls	r2, r2, #16
 8000d08:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1e:	b530      	push	{r4, r5, lr}
 8000d20:	68dc      	ldr	r4, [r3, #12]
 8000d22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d26:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	2d04      	cmp	r5, #4
 8000d2e:	bf28      	it	cs
 8000d30:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d38:	bf8c      	ite	hi
 8000d3a:	3c03      	subhi	r4, #3
 8000d3c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8000d42:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	fa01 f104 	lsl.w	r1, r1, r4
 8000d54:	ea41 0302 	orr.w	r3, r1, r2
 8000d58:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000d5c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	db06      	blt.n	8000d6e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d68:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d6c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	f000 000f 	and.w	r0, r0, #15
 8000d72:	4a02      	ldr	r2, [pc, #8]	; (8000d7c <HAL_NVIC_SetPriority+0x60>)
 8000d74:	5413      	strb	r3, [r2, r0]
 8000d76:	e7f9      	b.n	8000d6c <HAL_NVIC_SetPriority+0x50>
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	e000ed14 	.word	0xe000ed14

08000d80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	3801      	subs	r0, #1
 8000d82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d86:	d20a      	bcs.n	8000d9e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	21f0      	movs	r1, #240	; 0xf0
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8000db0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000f70 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000db6:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8000f74 <HAL_GPIO_Init+0x1c8>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dba:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dbe:	680a      	ldr	r2, [r1, #0]
 8000dc0:	fa32 f403 	lsrs.w	r4, r2, r3
 8000dc4:	d102      	bne.n	8000dcc <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 8000dc6:	b003      	add	sp, #12
 8000dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dcc:	2701      	movs	r7, #1
 8000dce:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8000dd0:	403a      	ands	r2, r7
 8000dd2:	f000 80b6 	beq.w	8000f42 <HAL_GPIO_Init+0x196>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd6:	684c      	ldr	r4, [r1, #4]
 8000dd8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ddc:	2503      	movs	r5, #3
 8000dde:	f024 0a10 	bic.w	sl, r4, #16
 8000de2:	fa05 f50e 	lsl.w	r5, r5, lr
 8000de6:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000dea:	43ed      	mvns	r5, r5
 8000dec:	2e01      	cmp	r6, #1
 8000dee:	d810      	bhi.n	8000e12 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8000df0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000df2:	ea06 0b05 	and.w	fp, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df6:	68ce      	ldr	r6, [r1, #12]
 8000df8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000dfc:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8000e00:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e02:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e04:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e08:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000e0c:	409e      	lsls	r6, r3
 8000e0e:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000e10:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e12:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e18:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e1a:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e22:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8000e26:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	d114      	bne.n	8000e54 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3U];
 8000e2a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e2e:	f003 0b07 	and.w	fp, r3, #7
 8000e32:	270f      	movs	r7, #15
 8000e34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000e38:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000e3c:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e40:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e44:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e48:	690e      	ldr	r6, [r1, #16]
 8000e4a:	fa06 f60b 	lsl.w	r6, r6, fp
 8000e4e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000e50:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8000e54:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e56:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	f004 0603 	and.w	r6, r4, #3
 8000e5c:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000e60:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8000e64:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e66:	00e5      	lsls	r5, r4, #3
 8000e68:	d56b      	bpl.n	8000f42 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 8000e6e:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e72:	f003 0703 	and.w	r7, r3, #3
 8000e76:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	f045 0502 	orr.w	r5, r5, #2
 8000e7e:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e82:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	f8c8 50f4 	str.w	r5, [r8, #244]	; 0xf4
 8000e88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e8c:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 8000e90:	f005 0502 	and.w	r5, r5, #2
 8000e94:	9501      	str	r5, [sp, #4]
 8000e96:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e98:	fa0e f507 	lsl.w	r5, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9c:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ea0:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ea4:	4d31      	ldr	r5, [pc, #196]	; (8000f6c <HAL_GPIO_Init+0x1c0>)
 8000ea6:	42a8      	cmp	r0, r5
 8000ea8:	d04d      	beq.n	8000f46 <HAL_GPIO_Init+0x19a>
 8000eaa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eae:	42a8      	cmp	r0, r5
 8000eb0:	d04b      	beq.n	8000f4a <HAL_GPIO_Init+0x19e>
 8000eb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eb6:	42a8      	cmp	r0, r5
 8000eb8:	d049      	beq.n	8000f4e <HAL_GPIO_Init+0x1a2>
 8000eba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ebe:	42a8      	cmp	r0, r5
 8000ec0:	d047      	beq.n	8000f52 <HAL_GPIO_Init+0x1a6>
 8000ec2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ec6:	42a8      	cmp	r0, r5
 8000ec8:	d045      	beq.n	8000f56 <HAL_GPIO_Init+0x1aa>
 8000eca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ece:	42a8      	cmp	r0, r5
 8000ed0:	d043      	beq.n	8000f5a <HAL_GPIO_Init+0x1ae>
 8000ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ed6:	42a8      	cmp	r0, r5
 8000ed8:	d041      	beq.n	8000f5e <HAL_GPIO_Init+0x1b2>
 8000eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ede:	42a8      	cmp	r0, r5
 8000ee0:	d03f      	beq.n	8000f62 <HAL_GPIO_Init+0x1b6>
 8000ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ee6:	42a8      	cmp	r0, r5
 8000ee8:	d03d      	beq.n	8000f66 <HAL_GPIO_Init+0x1ba>
 8000eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eee:	42a8      	cmp	r0, r5
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2509      	moveq	r5, #9
 8000ef4:	250a      	movne	r5, #10
 8000ef6:	40bd      	lsls	r5, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef8:	03e7      	lsls	r7, r4, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000efa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efe:	60b5      	str	r5, [r6, #8]
        temp &= ~(iocurrent);
 8000f00:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI_CurrentCPU->IMR1;
 8000f04:	f8dc 5000 	ldr.w	r5, [ip]
        temp &= ~(iocurrent);
 8000f08:	bf54      	ite	pl
 8000f0a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f0c:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0e:	03a7      	lsls	r7, r4, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000f10:	f8cc 5000 	str.w	r5, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000f14:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
 8000f18:	bf54      	ite	pl
 8000f1a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f1c:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	02e7      	lsls	r7, r4, #11
        EXTI->RTSR1 = temp;
 8000f20:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000f24:	f8cc 5004 	str.w	r5, [ip, #4]
        temp = EXTI->RTSR1;
 8000f28:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~(iocurrent);
 8000f2c:	bf54      	ite	pl
 8000f2e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f30:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f32:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR1 = temp;
 8000f34:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 8000f36:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
 8000f38:	bf54      	ite	pl
 8000f3a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f3c:	4315      	orrmi	r5, r2
        EXTI->FTSR1 = temp;
 8000f3e:	f8c9 5004 	str.w	r5, [r9, #4]
    position++;
 8000f42:	3301      	adds	r3, #1
 8000f44:	e73b      	b.n	8000dbe <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f46:	2500      	movs	r5, #0
 8000f48:	e7d5      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f4a:	2501      	movs	r5, #1
 8000f4c:	e7d3      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f4e:	2502      	movs	r5, #2
 8000f50:	e7d1      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f52:	2503      	movs	r5, #3
 8000f54:	e7cf      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f56:	2504      	movs	r5, #4
 8000f58:	e7cd      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f5a:	2505      	movs	r5, #5
 8000f5c:	e7cb      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f5e:	2506      	movs	r5, #6
 8000f60:	e7c9      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f62:	2507      	movs	r5, #7
 8000f64:	e7c7      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f66:	2508      	movs	r5, #8
 8000f68:	e7c5      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f6a:	bf00      	nop
 8000f6c:	58020000 	.word	0x58020000
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58000080 	.word	0x58000080

08000f78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8000f7c:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8000f7e:	4d4c      	ldr	r5, [pc, #304]	; (80010b0 <HAL_GPIO_DeInit+0x138>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000f80:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80010b8 <HAL_GPIO_DeInit+0x140>
 8000f84:	f8df a134 	ldr.w	sl, [pc, #308]	; 80010bc <HAL_GPIO_DeInit+0x144>
 8000f88:	f8df b134 	ldr.w	fp, [pc, #308]	; 80010c0 <HAL_GPIO_DeInit+0x148>
  while ((GPIO_Pin >> position) != 0x00U)
 8000f8c:	fa31 f302 	lsrs.w	r3, r1, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8000f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8000f96:	2301      	movs	r3, #1
 8000f98:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 8000f9c:	ea1e 0701 	ands.w	r7, lr, r1
 8000fa0:	d072      	beq.n	8001088 <HAL_GPIO_DeInit+0x110>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000fa6:	f002 0c03 	and.w	ip, r2, #3
 8000faa:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000fac:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <HAL_GPIO_DeInit+0x13c>)
 8000fae:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000fb2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000fb6:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000fb8:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000fbc:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000fc0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fc4:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000fc8:	d060      	beq.n	800108c <HAL_GPIO_DeInit+0x114>
 8000fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fce:	4298      	cmp	r0, r3
 8000fd0:	d05e      	beq.n	8001090 <HAL_GPIO_DeInit+0x118>
 8000fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	d05c      	beq.n	8001094 <HAL_GPIO_DeInit+0x11c>
 8000fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fde:	4298      	cmp	r0, r3
 8000fe0:	d05a      	beq.n	8001098 <HAL_GPIO_DeInit+0x120>
 8000fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fe6:	4298      	cmp	r0, r3
 8000fe8:	d058      	beq.n	800109c <HAL_GPIO_DeInit+0x124>
 8000fea:	4548      	cmp	r0, r9
 8000fec:	d058      	beq.n	80010a0 <HAL_GPIO_DeInit+0x128>
 8000fee:	4550      	cmp	r0, sl
 8000ff0:	d058      	beq.n	80010a4 <HAL_GPIO_DeInit+0x12c>
 8000ff2:	4558      	cmp	r0, fp
 8000ff4:	d058      	beq.n	80010a8 <HAL_GPIO_DeInit+0x130>
 8000ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d056      	beq.n	80010ac <HAL_GPIO_DeInit+0x134>
 8000ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001002:	4298      	cmp	r0, r3
 8001004:	bf0c      	ite	eq
 8001006:	2309      	moveq	r3, #9
 8001008:	230a      	movne	r3, #10
 800100a:	fa03 f30c 	lsl.w	r3, r3, ip
 800100e:	4543      	cmp	r3, r8
 8001010:	d118      	bne.n	8001044 <HAL_GPIO_DeInit+0xcc>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001012:	682b      	ldr	r3, [r5, #0]
 8001014:	ea23 0307 	bic.w	r3, r3, r7
 8001018:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800101a:	686b      	ldr	r3, [r5, #4]
 800101c:	ea23 0307 	bic.w	r3, r3, r7
 8001020:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	f8d3 c000 	ldr.w	ip, [r3]
 800102a:	ea2c 0c07 	bic.w	ip, ip, r7
 800102e:	f8c3 c000 	str.w	ip, [r3]
        EXTI->FTSR1 &= ~(iocurrent);
 8001032:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8001036:	ea2c 0707 	bic.w	r7, ip, r7
 800103a:	605f      	str	r7, [r3, #4]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800103c:	68a3      	ldr	r3, [r4, #8]
 800103e:	ea23 0606 	bic.w	r6, r3, r6
 8001042:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001044:	2603      	movs	r6, #3
 8001046:	0053      	lsls	r3, r2, #1
 8001048:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800104a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800104e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001052:	270f      	movs	r7, #15
 8001054:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001058:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800105a:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800105e:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001060:	fa22 f406 	lsr.w	r4, r2, r6
 8001064:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001068:	6a26      	ldr	r6, [r4, #32]
 800106a:	ea26 0707 	bic.w	r7, r6, r7
 800106e:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001070:	68c4      	ldr	r4, [r0, #12]
 8001072:	ea24 0403 	bic.w	r4, r4, r3
 8001076:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001078:	6844      	ldr	r4, [r0, #4]
 800107a:	ea24 040e 	bic.w	r4, r4, lr
 800107e:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001080:	6884      	ldr	r4, [r0, #8]
 8001082:	ea24 0303 	bic.w	r3, r4, r3
 8001086:	6083      	str	r3, [r0, #8]
    position++;
 8001088:	3201      	adds	r2, #1
 800108a:	e77f      	b.n	8000f8c <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800108c:	2300      	movs	r3, #0
 800108e:	e7bc      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 8001090:	2301      	movs	r3, #1
 8001092:	e7ba      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 8001094:	2302      	movs	r3, #2
 8001096:	e7b8      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 8001098:	2303      	movs	r3, #3
 800109a:	e7b6      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 800109c:	2304      	movs	r3, #4
 800109e:	e7b4      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 80010a0:	2305      	movs	r3, #5
 80010a2:	e7b2      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 80010a4:	2306      	movs	r3, #6
 80010a6:	e7b0      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 80010a8:	2307      	movs	r3, #7
 80010aa:	e7ae      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 80010ac:	2308      	movs	r3, #8
 80010ae:	e7ac      	b.n	800100a <HAL_GPIO_DeInit+0x92>
 80010b0:	58000080 	.word	0x58000080
 80010b4:	58020000 	.word	0x58020000
 80010b8:	58021400 	.word	0x58021400
 80010bc:	58021800 	.word	0x58021800
 80010c0:	58021c00 	.word	0x58021c00

080010c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	b10a      	cbz	r2, 80010ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010c6:	6181      	str	r1, [r0, #24]
  }
}
 80010c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010ca:	0409      	lsls	r1, r1, #16
 80010cc:	e7fb      	b.n	80010c6 <HAL_GPIO_WritePin+0x2>

080010ce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d0:	ea01 0203 	and.w	r2, r1, r3
 80010d4:	ea21 0103 	bic.w	r1, r1, r3
 80010d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80010dc:	6181      	str	r1, [r0, #24]
}
 80010de:	4770      	bx	lr

080010e0 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80010e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80010e8:	4201      	tst	r1, r0
{
 80010ea:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ee:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f2:	f001 faa9 	bl	8002648 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80010f6:	bd08      	pop	{r3, pc}

080010f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010f8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010fa:	4c10      	ldr	r4, [pc, #64]	; (800113c <HAL_PWREx_ConfigSupply+0x44>)
 80010fc:	68e3      	ldr	r3, [r4, #12]
 80010fe:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001102:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001104:	d105      	bne.n	8001112 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001106:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800110a:	1a18      	subs	r0, r3, r0
 800110c:	bf18      	it	ne
 800110e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001110:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001112:	f023 0307 	bic.w	r3, r3, #7
 8001116:	4318      	orrs	r0, r3
 8001118:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800111a:	f7ff fdcf 	bl	8000cbc <HAL_GetTick>
 800111e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001120:	6863      	ldr	r3, [r4, #4]
 8001122:	049b      	lsls	r3, r3, #18
 8001124:	d501      	bpl.n	800112a <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8001126:	2000      	movs	r0, #0
 8001128:	e7f2      	b.n	8001110 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800112a:	f7ff fdc7 	bl	8000cbc <HAL_GetTick>
 800112e:	1b40      	subs	r0, r0, r5
 8001130:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001134:	d9f4      	bls.n	8001120 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
 8001138:	e7ea      	b.n	8001110 <HAL_PWREx_ConfigSupply+0x18>
 800113a:	bf00      	nop
 800113c:	58024800 	.word	0x58024800

08001140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001142:	4604      	mov	r4, r0
 8001144:	2800      	cmp	r0, #0
 8001146:	d074      	beq.n	8001232 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001148:	6803      	ldr	r3, [r0, #0]
 800114a:	07d8      	lsls	r0, r3, #31
 800114c:	d45e      	bmi.n	800120c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	0799      	lsls	r1, r3, #30
 8001152:	f100 80b0 	bmi.w	80012b6 <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	06da      	lsls	r2, r3, #27
 800115a:	d527      	bpl.n	80011ac <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115c:	4baa      	ldr	r3, [pc, #680]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
 800115e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001160:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001162:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001166:	2a08      	cmp	r2, #8
 8001168:	d007      	beq.n	800117a <HAL_RCC_OscConfig+0x3a>
 800116a:	2a18      	cmp	r2, #24
 800116c:	f040 810e 	bne.w	800138c <HAL_RCC_OscConfig+0x24c>
 8001170:	f001 0203 	and.w	r2, r1, #3
 8001174:	2a01      	cmp	r2, #1
 8001176:	f040 8109 	bne.w	800138c <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	d502      	bpl.n	8001186 <HAL_RCC_OscConfig+0x46>
 8001180:	69e3      	ldr	r3, [r4, #28]
 8001182:	2b80      	cmp	r3, #128	; 0x80
 8001184:	d155      	bne.n	8001232 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001186:	f7ff fdb1 	bl	8000cec <HAL_GetREVID>
 800118a:	f241 0303 	movw	r3, #4099	; 0x1003
 800118e:	6a21      	ldr	r1, [r4, #32]
 8001190:	4298      	cmp	r0, r3
 8001192:	4b9d      	ldr	r3, [pc, #628]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
 8001194:	f200 80f3 	bhi.w	800137e <HAL_RCC_OscConfig+0x23e>
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2920      	cmp	r1, #32
 800119c:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80011a0:	bf0c      	ite	eq
 80011a2:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80011a6:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80011aa:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	0719      	lsls	r1, r3, #28
 80011b0:	f100 812e 	bmi.w	8001410 <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	069a      	lsls	r2, r3, #26
 80011b8:	f100 814f 	bmi.w	800145a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	075d      	lsls	r5, r3, #29
 80011c0:	d51e      	bpl.n	8001200 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80011c2:	4d92      	ldr	r5, [pc, #584]	; (800140c <HAL_RCC_OscConfig+0x2cc>)
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80011cc:	f7ff fd76 	bl	8000cbc <HAL_GetTick>
 80011d0:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	05da      	lsls	r2, r3, #23
 80011d6:	f140 8165 	bpl.w	80014a4 <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011da:	68a3      	ldr	r3, [r4, #8]
 80011dc:	4d8a      	ldr	r5, [pc, #552]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
 80011de:	2b01      	cmp	r3, #1
 80011e0:	f040 8167 	bne.w	80014b2 <HAL_RCC_OscConfig+0x372>
 80011e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011f0:	f7ff fd64 	bl	8000cbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011f4:	4e84      	ldr	r6, [pc, #528]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80011f6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011f8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80011fa:	079b      	lsls	r3, r3, #30
 80011fc:	f140 817f 	bpl.w	80014fe <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001200:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001202:	2900      	cmp	r1, #0
 8001204:	f040 8182 	bne.w	800150c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001208:	2000      	movs	r0, #0
 800120a:	e02a      	b.n	8001262 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120c:	4b7e      	ldr	r3, [pc, #504]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
 800120e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001210:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001212:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001216:	2a10      	cmp	r2, #16
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0xe6>
 800121a:	2a18      	cmp	r2, #24
 800121c:	d10b      	bne.n	8001236 <HAL_RCC_OscConfig+0xf6>
 800121e:	f001 0203 	and.w	r2, r1, #3
 8001222:	2a02      	cmp	r2, #2
 8001224:	d107      	bne.n	8001236 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	039a      	lsls	r2, r3, #14
 800122a:	d590      	bpl.n	800114e <HAL_RCC_OscConfig+0xe>
 800122c:	6863      	ldr	r3, [r4, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d18d      	bne.n	800114e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8001232:	2001      	movs	r0, #1
 8001234:	e015      	b.n	8001262 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001236:	6862      	ldr	r2, [r4, #4]
 8001238:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x124>
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001244:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001246:	f7ff fd39 	bl	8000cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800124a:	4e6f      	ldr	r6, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800124c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800124e:	6833      	ldr	r3, [r6, #0]
 8001250:	039b      	lsls	r3, r3, #14
 8001252:	f53f af7c 	bmi.w	800114e <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fd31 	bl	8000cbc <HAL_GetTick>
 800125a:	1b40      	subs	r0, r0, r5
 800125c:	2864      	cmp	r0, #100	; 0x64
 800125e:	d9f6      	bls.n	800124e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8001260:	2003      	movs	r0, #3
}
 8001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	4d68      	ldr	r5, [pc, #416]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	b99a      	cbnz	r2, 8001292 <HAL_RCC_OscConfig+0x152>
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	602b      	str	r3, [r5, #0]
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001278:	f7ff fd20 	bl	8000cbc <HAL_GetTick>
 800127c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800127e:	682b      	ldr	r3, [r5, #0]
 8001280:	039f      	lsls	r7, r3, #14
 8001282:	f57f af64 	bpl.w	800114e <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001286:	f7ff fd19 	bl	8000cbc <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	2864      	cmp	r0, #100	; 0x64
 800128e:	d9f6      	bls.n	800127e <HAL_RCC_OscConfig+0x13e>
 8001290:	e7e6      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	602b      	str	r3, [r5, #0]
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	602b      	str	r3, [r5, #0]
 80012a6:	e7ce      	b.n	8001246 <HAL_RCC_OscConfig+0x106>
 80012a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ac:	602b      	str	r3, [r5, #0]
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b4:	e7f6      	b.n	80012a4 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
 80012b8:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012bc:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80012c0:	d003      	beq.n	80012ca <HAL_RCC_OscConfig+0x18a>
 80012c2:	2a18      	cmp	r2, #24
 80012c4:	d11f      	bne.n	8001306 <HAL_RCC_OscConfig+0x1c6>
 80012c6:	078e      	lsls	r6, r1, #30
 80012c8:	d11d      	bne.n	8001306 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	d502      	bpl.n	80012d6 <HAL_RCC_OscConfig+0x196>
 80012d0:	68e3      	ldr	r3, [r4, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0ad      	beq.n	8001232 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	f7ff fd09 	bl	8000cec <HAL_GetREVID>
 80012da:	f241 0303 	movw	r3, #4099	; 0x1003
 80012de:	6921      	ldr	r1, [r4, #16]
 80012e0:	4298      	cmp	r0, r3
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	d809      	bhi.n	80012fc <HAL_RCC_OscConfig+0x1bc>
 80012e8:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80012ec:	2940      	cmp	r1, #64	; 0x40
 80012ee:	bf0c      	ite	eq
 80012f0:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 80012f4:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	e72c      	b.n	8001156 <HAL_RCC_OscConfig+0x16>
 80012fc:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001300:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001304:	e7f8      	b.n	80012f8 <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001306:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001308:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800130a:	b339      	cbz	r1, 800135c <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800130c:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001310:	4d3d      	ldr	r5, [pc, #244]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001316:	f7ff fcd1 	bl	8000cbc <HAL_GetTick>
 800131a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	0758      	lsls	r0, r3, #29
 8001320:	d511      	bpl.n	8001346 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	f7ff fce3 	bl	8000cec <HAL_GetREVID>
 8001326:	f241 0303 	movw	r3, #4099	; 0x1003
 800132a:	6922      	ldr	r2, [r4, #16]
 800132c:	4298      	cmp	r0, r3
 800132e:	686b      	ldr	r3, [r5, #4]
 8001330:	d80f      	bhi.n	8001352 <HAL_RCC_OscConfig+0x212>
 8001332:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001336:	2a40      	cmp	r2, #64	; 0x40
 8001338:	bf0c      	ite	eq
 800133a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800133e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8001342:	606b      	str	r3, [r5, #4]
 8001344:	e707      	b.n	8001156 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fcb9 	bl	8000cbc <HAL_GetTick>
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	2802      	cmp	r0, #2
 800134e:	d9e5      	bls.n	800131c <HAL_RCC_OscConfig+0x1dc>
 8001350:	e786      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001356:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800135a:	e7f2      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 800135c:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001360:	4e29      	ldr	r6, [pc, #164]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001362:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001364:	f7ff fcaa 	bl	8000cbc <HAL_GetTick>
 8001368:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800136a:	6833      	ldr	r3, [r6, #0]
 800136c:	0759      	lsls	r1, r3, #29
 800136e:	f57f aef2 	bpl.w	8001156 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fca3 	bl	8000cbc <HAL_GetTick>
 8001376:	1b40      	subs	r0, r0, r5
 8001378:	2802      	cmp	r0, #2
 800137a:	d9f6      	bls.n	800136a <HAL_RCC_OscConfig+0x22a>
 800137c:	e770      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8001384:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	e70f      	b.n	80011ac <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800138c:	69e2      	ldr	r2, [r4, #28]
 800138e:	b34a      	cbz	r2, 80013e4 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_ENABLE();
 8001390:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001392:	4d1d      	ldr	r5, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_ENABLE();
 8001394:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001398:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800139a:	f7ff fc8f 	bl	8000cbc <HAL_GetTick>
 800139e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	05df      	lsls	r7, r3, #23
 80013a4:	d511      	bpl.n	80013ca <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a6:	f7ff fca1 	bl	8000cec <HAL_GetREVID>
 80013aa:	f241 0303 	movw	r3, #4099	; 0x1003
 80013ae:	6a22      	ldr	r2, [r4, #32]
 80013b0:	4298      	cmp	r0, r3
 80013b2:	d810      	bhi.n	80013d6 <HAL_RCC_OscConfig+0x296>
 80013b4:	686b      	ldr	r3, [r5, #4]
 80013b6:	2a20      	cmp	r2, #32
 80013b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013bc:	bf0c      	ite	eq
 80013be:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80013c2:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80013c6:	606b      	str	r3, [r5, #4]
 80013c8:	e6f0      	b.n	80011ac <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc77 	bl	8000cbc <HAL_GetTick>
 80013ce:	1b80      	subs	r0, r0, r6
 80013d0:	2802      	cmp	r0, #2
 80013d2:	d9e5      	bls.n	80013a0 <HAL_RCC_OscConfig+0x260>
 80013d4:	e744      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013d6:	68eb      	ldr	r3, [r5, #12]
 80013d8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80013dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013e0:	60eb      	str	r3, [r5, #12]
 80013e2:	e6e3      	b.n	80011ac <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_CSI_DISABLE();
 80013e4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013e6:	4e08      	ldr	r6, [pc, #32]	; (8001408 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_DISABLE();
 80013e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013ee:	f7ff fc65 	bl	8000cbc <HAL_GetTick>
 80013f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013f4:	6833      	ldr	r3, [r6, #0]
 80013f6:	05d8      	lsls	r0, r3, #23
 80013f8:	f57f aed8 	bpl.w	80011ac <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc5e 	bl	8000cbc <HAL_GetTick>
 8001400:	1b40      	subs	r0, r0, r5
 8001402:	2802      	cmp	r0, #2
 8001404:	d9f6      	bls.n	80013f4 <HAL_RCC_OscConfig+0x2b4>
 8001406:	e72b      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
 8001408:	58024400 	.word	0x58024400
 800140c:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001410:	6963      	ldr	r3, [r4, #20]
 8001412:	4d96      	ldr	r5, [pc, #600]	; (800166c <HAL_RCC_OscConfig+0x52c>)
 8001414:	b183      	cbz	r3, 8001438 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 8001416:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800141e:	f7ff fc4d 	bl	8000cbc <HAL_GetTick>
 8001422:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001424:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001426:	079b      	lsls	r3, r3, #30
 8001428:	f53f aec4 	bmi.w	80011b4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fc46 	bl	8000cbc <HAL_GetTick>
 8001430:	1b80      	subs	r0, r0, r6
 8001432:	2802      	cmp	r0, #2
 8001434:	d9f6      	bls.n	8001424 <HAL_RCC_OscConfig+0x2e4>
 8001436:	e713      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8001438:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001440:	f7ff fc3c 	bl	8000cbc <HAL_GetTick>
 8001444:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001446:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001448:	079f      	lsls	r7, r3, #30
 800144a:	f57f aeb3 	bpl.w	80011b4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fc35 	bl	8000cbc <HAL_GetTick>
 8001452:	1b80      	subs	r0, r0, r6
 8001454:	2802      	cmp	r0, #2
 8001456:	d9f6      	bls.n	8001446 <HAL_RCC_OscConfig+0x306>
 8001458:	e702      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800145a:	69a3      	ldr	r3, [r4, #24]
 800145c:	4d83      	ldr	r5, [pc, #524]	; (800166c <HAL_RCC_OscConfig+0x52c>)
 800145e:	b183      	cbz	r3, 8001482 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001466:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001468:	f7ff fc28 	bl	8000cbc <HAL_GetTick>
 800146c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	0498      	lsls	r0, r3, #18
 8001472:	f53f aea3 	bmi.w	80011bc <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001476:	f7ff fc21 	bl	8000cbc <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f6      	bls.n	800146e <HAL_RCC_OscConfig+0x32e>
 8001480:	e6ee      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001488:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800148a:	f7ff fc17 	bl	8000cbc <HAL_GetTick>
 800148e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	0499      	lsls	r1, r3, #18
 8001494:	f57f ae92 	bpl.w	80011bc <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001498:	f7ff fc10 	bl	8000cbc <HAL_GetTick>
 800149c:	1b80      	subs	r0, r0, r6
 800149e:	2802      	cmp	r0, #2
 80014a0:	d9f6      	bls.n	8001490 <HAL_RCC_OscConfig+0x350>
 80014a2:	e6dd      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014a4:	f7ff fc0a 	bl	8000cbc <HAL_GetTick>
 80014a8:	1b80      	subs	r0, r0, r6
 80014aa:	2864      	cmp	r0, #100	; 0x64
 80014ac:	f67f ae91 	bls.w	80011d2 <HAL_RCC_OscConfig+0x92>
 80014b0:	e6d6      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b2:	b9b3      	cbnz	r3, 80014e2 <HAL_RCC_OscConfig+0x3a2>
 80014b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	672b      	str	r3, [r5, #112]	; 0x70
 80014c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014c2:	f023 0304 	bic.w	r3, r3, #4
 80014c6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014c8:	f7ff fbf8 	bl	8000cbc <HAL_GetTick>
 80014cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014d0:	0798      	lsls	r0, r3, #30
 80014d2:	f57f ae95 	bpl.w	8001200 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fbf1 	bl	8000cbc <HAL_GetTick>
 80014da:	1b80      	subs	r0, r0, r6
 80014dc:	42b8      	cmp	r0, r7
 80014de:	d9f6      	bls.n	80014ce <HAL_RCC_OscConfig+0x38e>
 80014e0:	e6be      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014e6:	d103      	bne.n	80014f0 <HAL_RCC_OscConfig+0x3b0>
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	672b      	str	r3, [r5, #112]	; 0x70
 80014ee:	e679      	b.n	80011e4 <HAL_RCC_OscConfig+0xa4>
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	672b      	str	r3, [r5, #112]	; 0x70
 80014f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	e675      	b.n	80011ea <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fbdd 	bl	8000cbc <HAL_GetTick>
 8001502:	1b40      	subs	r0, r0, r5
 8001504:	42b8      	cmp	r0, r7
 8001506:	f67f ae77 	bls.w	80011f8 <HAL_RCC_OscConfig+0xb8>
 800150a:	e6a9      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800150c:	4d57      	ldr	r5, [pc, #348]	; (800166c <HAL_RCC_OscConfig+0x52c>)
 800150e:	692b      	ldr	r3, [r5, #16]
 8001510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001514:	2b18      	cmp	r3, #24
 8001516:	d07a      	beq.n	800160e <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8001518:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800151c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001520:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001522:	d167      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 8001524:	f7ff fbca 	bl	8000cbc <HAL_GetTick>
 8001528:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	0199      	lsls	r1, r3, #6
 800152e:	d45b      	bmi.n	80015e8 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001530:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001532:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001534:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001538:	f023 0303 	bic.w	r3, r3, #3
 800153c:	4313      	orrs	r3, r2
 800153e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001540:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001544:	62ab      	str	r3, [r5, #40]	; 0x28
 8001546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001548:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800154a:	3b01      	subs	r3, #1
 800154c:	3a01      	subs	r2, #1
 800154e:	025b      	lsls	r3, r3, #9
 8001550:	0412      	lsls	r2, r2, #16
 8001552:	b29b      	uxth	r3, r3
 8001554:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001558:	4313      	orrs	r3, r2
 800155a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800155c:	3a01      	subs	r2, #1
 800155e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001562:	4313      	orrs	r3, r2
 8001564:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001566:	3a01      	subs	r2, #1
 8001568:	0612      	lsls	r2, r2, #24
 800156a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800156e:	4313      	orrs	r3, r2
 8001570:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8001572:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800157a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800157c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800157e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001582:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001586:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800158a:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800158c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800158e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001590:	f023 030c 	bic.w	r3, r3, #12
 8001594:	4313      	orrs	r3, r2
 8001596:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001598:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800159a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800159c:	f023 0302 	bic.w	r3, r3, #2
 80015a0:	4313      	orrs	r3, r2
 80015a2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80015a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80015b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80015b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ba:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80015bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb76 	bl	8000cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015d0:	4d26      	ldr	r5, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 80015d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	019a      	lsls	r2, r3, #6
 80015d8:	f53f ae16 	bmi.w	8001208 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fb6e 	bl	8000cbc <HAL_GetTick>
 80015e0:	1b00      	subs	r0, r0, r4
 80015e2:	2802      	cmp	r0, #2
 80015e4:	d9f6      	bls.n	80015d4 <HAL_RCC_OscConfig+0x494>
 80015e6:	e63b      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fb68 	bl	8000cbc <HAL_GetTick>
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	2802      	cmp	r0, #2
 80015f0:	d99b      	bls.n	800152a <HAL_RCC_OscConfig+0x3ea>
 80015f2:	e635      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb62 	bl	8000cbc <HAL_GetTick>
 80015f8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	f57f ae03 	bpl.w	8001208 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fb5b 	bl	8000cbc <HAL_GetTick>
 8001606:	1b00      	subs	r0, r0, r4
 8001608:	2802      	cmp	r0, #2
 800160a:	d9f6      	bls.n	80015fa <HAL_RCC_OscConfig+0x4ba>
 800160c:	e628      	b.n	8001260 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160e:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001610:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001612:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001614:	f43f ae0d 	beq.w	8001232 <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001618:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800161c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800161e:	4281      	cmp	r1, r0
 8001620:	f47f ae07 	bne.w	8001232 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001624:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001628:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800162a:	428a      	cmp	r2, r1
 800162c:	f47f ae01 	bne.w	8001232 <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001630:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001632:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001636:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001638:	4291      	cmp	r1, r2
 800163a:	f47f adfa 	bne.w	8001232 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800163e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001640:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8001644:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001646:	4291      	cmp	r1, r2
 8001648:	f47f adf3 	bne.w	8001232 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800164c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800164e:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8001652:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001654:	4291      	cmp	r1, r2
 8001656:	f47f adec 	bne.w	8001232 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800165a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800165c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001660:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001662:	4293      	cmp	r3, r2
 8001664:	f43f add0 	beq.w	8001208 <HAL_RCC_OscConfig+0xc8>
 8001668:	e5e3      	b.n	8001232 <HAL_RCC_OscConfig+0xf2>
 800166a:	bf00      	nop
 800166c:	58024400 	.word	0x58024400

08001670 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_RCC_GetSysClockFreq+0x124>)
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001678:	2a10      	cmp	r2, #16
{
 800167a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167c:	f000 8086 	beq.w	800178c <HAL_RCC_GetSysClockFreq+0x11c>
 8001680:	2a18      	cmp	r2, #24
 8001682:	d00c      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x2e>
 8001684:	2a00      	cmp	r2, #0
 8001686:	f040 8083 	bne.w	8001790 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4842      	ldr	r0, [pc, #264]	; (8001798 <HAL_RCC_GetSysClockFreq+0x128>)
 800168e:	f012 0f20 	tst.w	r2, #32
 8001692:	d003      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800169a:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800169c:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800169e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80016a0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80016a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80016a4:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80016a8:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80016ac:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 80016ae:	d0f5      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80016b0:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80016b4:	f002 0201 	and.w	r2, r2, #1
 80016b8:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80016bc:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80016c0:	4362      	muls	r2, r4
 80016c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80016c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ca:	2901      	cmp	r1, #1
 80016cc:	ee07 2a90 	vmov	s15, r2
 80016d0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80016d4:	d04c      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x100>
 80016d6:	2902      	cmp	r1, #2
 80016d8:	d03c      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0xe4>
 80016da:	2900      	cmp	r1, #0
 80016dc:	d148      	bne.n	8001770 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	0692      	lsls	r2, r2, #26
 80016e2:	d527      	bpl.n	8001734 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	4a2c      	ldr	r2, [pc, #176]	; (8001798 <HAL_RCC_GetSysClockFreq+0x128>)
 80016e8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80016ee:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f4:	ee07 2a10 	vmov	s14, r2
 80016f8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80016fc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001700:	ee06 3a90 	vmov	s13, r3
 8001704:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800170c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001712:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800171c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800171e:	ee07 3a10 	vmov	s14, r3
 8001722:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001726:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800172a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800172e:	ee17 0a90 	vmov	r0, s15
 8001732:	e7b3      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173a:	ee07 3a10 	vmov	s14, r3
 800173e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	ee77 7a86 	vadd.f32	s15, s15, s12
 800174a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800179c <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800174e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001752:	e7dd      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175a:	ee07 3a10 	vmov	s14, r3
 800175e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	ee77 7a86 	vadd.f32	s15, s15, s12
 800176a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80017a0 <HAL_RCC_GetSysClockFreq+0x130>
 800176e:	e7ee      	b.n	800174e <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001776:	ee07 3a10 	vmov	s14, r3
 800177a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001786:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80017a4 <HAL_RCC_GetSysClockFreq+0x134>
 800178a:	e7e0      	b.n	800174e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800178e:	e785      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8001792:	e783      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x2c>
 8001794:	58024400 	.word	0x58024400
 8001798:	03d09000 	.word	0x03d09000
 800179c:	4c742400 	.word	0x4c742400
 80017a0:	4af42400 	.word	0x4af42400
 80017a4:	4a742400 	.word	0x4a742400
 80017a8:	007a1200 	.word	0x007a1200
 80017ac:	003d0900 	.word	0x003d0900

080017b0 <HAL_RCC_ClockConfig>:
{
 80017b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80017b6:	4604      	mov	r4, r0
 80017b8:	b910      	cbnz	r0, 80017c0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80017ba:	2001      	movs	r0, #1
}
 80017bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4a88      	ldr	r2, [pc, #544]	; (80019e4 <HAL_RCC_ClockConfig+0x234>)
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	428b      	cmp	r3, r1
 80017ca:	f0c0 8093 	bcc.w	80018f4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	075f      	lsls	r7, r3, #29
 80017d2:	f100 809b 	bmi.w	800190c <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d6:	071e      	lsls	r6, r3, #28
 80017d8:	d50b      	bpl.n	80017f2 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80017da:	4983      	ldr	r1, [pc, #524]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 80017dc:	6966      	ldr	r6, [r4, #20]
 80017de:	69c8      	ldr	r0, [r1, #28]
 80017e0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80017e4:	4286      	cmp	r6, r0
 80017e6:	d904      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80017e8:	69ca      	ldr	r2, [r1, #28]
 80017ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017ee:	4332      	orrs	r2, r6
 80017f0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f2:	06d8      	lsls	r0, r3, #27
 80017f4:	d50b      	bpl.n	800180e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80017f6:	497c      	ldr	r1, [pc, #496]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 80017f8:	69a6      	ldr	r6, [r4, #24]
 80017fa:	69c8      	ldr	r0, [r1, #28]
 80017fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001800:	4286      	cmp	r6, r0
 8001802:	d904      	bls.n	800180e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001804:	69ca      	ldr	r2, [r1, #28]
 8001806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800180a:	4332      	orrs	r2, r6
 800180c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800180e:	0699      	lsls	r1, r3, #26
 8001810:	d50b      	bpl.n	800182a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001812:	4975      	ldr	r1, [pc, #468]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 8001814:	69e6      	ldr	r6, [r4, #28]
 8001816:	6a08      	ldr	r0, [r1, #32]
 8001818:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800181c:	4286      	cmp	r6, r0
 800181e:	d904      	bls.n	800182a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001820:	6a0a      	ldr	r2, [r1, #32]
 8001822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001826:	4332      	orrs	r2, r6
 8001828:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182a:	079a      	lsls	r2, r3, #30
 800182c:	d50b      	bpl.n	8001846 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800182e:	496e      	ldr	r1, [pc, #440]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 8001830:	68e6      	ldr	r6, [r4, #12]
 8001832:	6988      	ldr	r0, [r1, #24]
 8001834:	f000 000f 	and.w	r0, r0, #15
 8001838:	4286      	cmp	r6, r0
 800183a:	d904      	bls.n	8001846 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	698a      	ldr	r2, [r1, #24]
 800183e:	f022 020f 	bic.w	r2, r2, #15
 8001842:	4332      	orrs	r2, r6
 8001844:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	07df      	lsls	r7, r3, #31
 8001848:	d46e      	bmi.n	8001928 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	079e      	lsls	r6, r3, #30
 800184e:	f100 80a1 	bmi.w	8001994 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001852:	4964      	ldr	r1, [pc, #400]	; (80019e4 <HAL_RCC_ClockConfig+0x234>)
 8001854:	680a      	ldr	r2, [r1, #0]
 8001856:	f002 020f 	and.w	r2, r2, #15
 800185a:	42aa      	cmp	r2, r5
 800185c:	f200 80a8 	bhi.w	80019b0 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001860:	0758      	lsls	r0, r3, #29
 8001862:	f100 80b1 	bmi.w	80019c8 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001866:	0719      	lsls	r1, r3, #28
 8001868:	d50b      	bpl.n	8001882 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800186a:	495f      	ldr	r1, [pc, #380]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 800186c:	6965      	ldr	r5, [r4, #20]
 800186e:	69c8      	ldr	r0, [r1, #28]
 8001870:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001874:	4285      	cmp	r5, r0
 8001876:	d204      	bcs.n	8001882 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001878:	69ca      	ldr	r2, [r1, #28]
 800187a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800187e:	432a      	orrs	r2, r5
 8001880:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	06da      	lsls	r2, r3, #27
 8001884:	d50b      	bpl.n	800189e <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001886:	4958      	ldr	r1, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 8001888:	69a5      	ldr	r5, [r4, #24]
 800188a:	69c8      	ldr	r0, [r1, #28]
 800188c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001890:	4285      	cmp	r5, r0
 8001892:	d204      	bcs.n	800189e <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001894:	69ca      	ldr	r2, [r1, #28]
 8001896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800189a:	432a      	orrs	r2, r5
 800189c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800189e:	069b      	lsls	r3, r3, #26
 80018a0:	d50b      	bpl.n	80018ba <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80018a2:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 80018a4:	69e0      	ldr	r0, [r4, #28]
 80018a6:	6a11      	ldr	r1, [r2, #32]
 80018a8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80018ac:	4288      	cmp	r0, r1
 80018ae:	d204      	bcs.n	80018ba <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80018b0:	6a13      	ldr	r3, [r2, #32]
 80018b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b6:	4303      	orrs	r3, r0
 80018b8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018ba:	f7ff fed9 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 80018be:	494a      	ldr	r1, [pc, #296]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 80018c0:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_RCC_ClockConfig+0x23c>)
 80018c2:	698b      	ldr	r3, [r1, #24]
 80018c4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018d0:	698b      	ldr	r3, [r1, #24]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	4a45      	ldr	r2, [pc, #276]	; (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	fa20 f303 	lsr.w	r3, r0, r3
 80018e2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80018e4:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80018e6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80018e8:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_ClockConfig+0x248>)
}
 80018ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	f7ff b986 	b.w	8000c00 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f4:	6813      	ldr	r3, [r2, #0]
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	430b      	orrs	r3, r1
 80018fc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	6813      	ldr	r3, [r2, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	428b      	cmp	r3, r1
 8001906:	f47f af58 	bne.w	80017ba <HAL_RCC_ClockConfig+0xa>
 800190a:	e760      	b.n	80017ce <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800190c:	4936      	ldr	r1, [pc, #216]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 800190e:	6926      	ldr	r6, [r4, #16]
 8001910:	6988      	ldr	r0, [r1, #24]
 8001912:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001916:	4286      	cmp	r6, r0
 8001918:	f67f af5d 	bls.w	80017d6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800191c:	698a      	ldr	r2, [r1, #24]
 800191e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001922:	4332      	orrs	r2, r6
 8001924:	618a      	str	r2, [r1, #24]
 8001926:	e756      	b.n	80017d6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 800192a:	68a1      	ldr	r1, [r4, #8]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001932:	430a      	orrs	r2, r1
 8001934:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001938:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	2a02      	cmp	r2, #2
 800193c:	d11d      	bne.n	800197a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001942:	f43f af3a 	beq.w	80017ba <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4e28      	ldr	r6, [pc, #160]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800194c:	6933      	ldr	r3, [r6, #16]
 800194e:	f023 0307 	bic.w	r3, r3, #7
 8001952:	4313      	orrs	r3, r2
 8001954:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8001956:	f7ff f9b1 	bl	8000cbc <HAL_GetTick>
 800195a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195c:	6933      	ldr	r3, [r6, #16]
 800195e:	6862      	ldr	r2, [r4, #4]
 8001960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001964:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001968:	f43f af6f 	beq.w	800184a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff f9a6 	bl	8000cbc <HAL_GetTick>
 8001970:	1bc0      	subs	r0, r0, r7
 8001972:	4540      	cmp	r0, r8
 8001974:	d9f2      	bls.n	800195c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001976:	2003      	movs	r0, #3
 8001978:	e720      	b.n	80017bc <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	2a03      	cmp	r2, #3
 800197c:	d102      	bne.n	8001984 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001982:	e7de      	b.n	8001942 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001984:	2a01      	cmp	r2, #1
 8001986:	d102      	bne.n	800198e <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001988:	f413 7f80 	tst.w	r3, #256	; 0x100
 800198c:	e7d9      	b.n	8001942 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800198e:	f013 0f04 	tst.w	r3, #4
 8001992:	e7d6      	b.n	8001942 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001994:	4914      	ldr	r1, [pc, #80]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 8001996:	68e6      	ldr	r6, [r4, #12]
 8001998:	6988      	ldr	r0, [r1, #24]
 800199a:	f000 000f 	and.w	r0, r0, #15
 800199e:	4286      	cmp	r6, r0
 80019a0:	f4bf af57 	bcs.w	8001852 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	698a      	ldr	r2, [r1, #24]
 80019a6:	f022 020f 	bic.w	r2, r2, #15
 80019aa:	4332      	orrs	r2, r6
 80019ac:	618a      	str	r2, [r1, #24]
 80019ae:	e750      	b.n	8001852 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	f022 020f 	bic.w	r2, r2, #15
 80019b6:	432a      	orrs	r2, r5
 80019b8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	680a      	ldr	r2, [r1, #0]
 80019bc:	f002 020f 	and.w	r2, r2, #15
 80019c0:	42aa      	cmp	r2, r5
 80019c2:	f47f aefa 	bne.w	80017ba <HAL_RCC_ClockConfig+0xa>
 80019c6:	e74b      	b.n	8001860 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <HAL_RCC_ClockConfig+0x238>)
 80019ca:	6925      	ldr	r5, [r4, #16]
 80019cc:	6988      	ldr	r0, [r1, #24]
 80019ce:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80019d2:	4285      	cmp	r5, r0
 80019d4:	f4bf af47 	bcs.w	8001866 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019d8:	698a      	ldr	r2, [r1, #24]
 80019da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019de:	432a      	orrs	r2, r5
 80019e0:	618a      	str	r2, [r1, #24]
 80019e2:	e740      	b.n	8001866 <HAL_RCC_ClockConfig+0xb6>
 80019e4:	52002000 	.word	0x52002000
 80019e8:	58024400 	.word	0x58024400
 80019ec:	08006f6c 	.word	0x08006f6c
 80019f0:	20000004 	.word	0x20000004
 80019f4:	20000000 	.word	0x20000000
 80019f8:	2000000c 	.word	0x2000000c

080019fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019fc:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80019fe:	4c0c      	ldr	r4, [pc, #48]	; (8001a30 <HAL_RCC_GetHCLKFreq+0x34>)
 8001a00:	f7ff fe36 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 8001a04:	490b      	ldr	r1, [pc, #44]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x38>)
 8001a06:	69a3      	ldr	r3, [r4, #24]
 8001a08:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001a0c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a0e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001a10:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a14:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001a18:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a1c:	5ccb      	ldrb	r3, [r1, r3]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	fa22 f003 	lsr.w	r0, r2, r3
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_GetHCLKFreq+0x3c>)
 8001a28:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x40>)
 8001a2c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001a2e:	bd10      	pop	{r4, pc}
 8001a30:	58024400 	.word	0x58024400
 8001a34:	08006f6c 	.word	0x08006f6c
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001a42:	f7ff ffdb 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001a56:	40d8      	lsrs	r0, r3
 8001a58:	bd08      	pop	{r3, pc}
 8001a5a:	bf00      	nop
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	08006f6c 	.word	0x08006f6c

08001a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001a66:	f7ff ffc9 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001a7a:	40d8      	lsrs	r0, r3
 8001a7c:	bd08      	pop	{r3, pc}
 8001a7e:	bf00      	nop
 8001a80:	58024400 	.word	0x58024400
 8001a84:	08006f6c 	.word	0x08006f6c

08001a88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8001a88:	b508      	push	{r3, lr}
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8001a8a:	f7ff ffb7 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8001a9e:	40d8      	lsrs	r0, r3
 8001aa0:	bd08      	pop	{r3, pc}
 8001aa2:	bf00      	nop
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	08006f6c 	.word	0x08006f6c

08001aac <HAL_RCCEx_GetPLL2ClockFreq>:
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8001aae:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ab0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8001ab2:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8001ab4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));

  if (pll2m != 0U)
 8001ab6:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8001aba:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001abe:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8001ac0:	f000 808d 	beq.w	8001bde <HAL_RCCEx_GetPLL2ClockFreq+0x132>
  {
    switch (pllsource)
 8001ac4:	ee07 1a90 	vmov	s15, r1
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8001ac8:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001acc:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ad0:	f004 0403 	and.w	r4, r4, #3
 8001ad4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001ad8:	434b      	muls	r3, r1
    switch (pllsource)
 8001ada:	2c01      	cmp	r4, #1
 8001adc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8001ae8:	d06b      	beq.n	8001bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 8001aea:	2c02      	cmp	r4, #2
 8001aec:	d05b      	beq.n	8001ba6 <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	d167      	bne.n	8001bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	069b      	lsls	r3, r3, #26
 8001af6:	d546      	bpl.n	8001b86 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001af8:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001afa:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001afc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001b00:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b06:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001b08:	ee07 2a10 	vmov	s14, r2
 8001b0c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001b10:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001b14:	ee06 3a90 	vmov	s13, r3
 8001b18:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b20:	ee77 7a86 	vadd.f32	s15, s15, s12

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      break;
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001b26:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8001b2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001b2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001b30:	ee07 3a10 	vmov	s14, r3
 8001b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001b3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b40:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001b44:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8001b48:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001b4a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001b4e:	ee07 3a10 	vmov	s14, r3
 8001b52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b56:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001b5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b5e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001b62:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8001b66:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001b68:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001b6c:	ee07 3a10 	vmov	s14, r3
 8001b70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b74:	ee37 6a06 	vadd.f32	s12, s14, s12
 8001b78:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001b7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001b80:	ed80 7a02 	vstr	s14, [r0, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001b86:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001b88:	eddf 5a19 	vldr	s11, [pc, #100]	; 8001bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8001b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b90:	ee07 3a10 	vmov	s14, r3
 8001b94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001ba0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001ba4:	e7be      	b.n	8001b24 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001ba6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001ba8:	eddf 5a12 	vldr	s11, [pc, #72]	; 8001bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8001bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb0:	ee07 3a10 	vmov	s14, r3
 8001bb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001bc0:	e7ee      	b.n	8001ba0 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001bc2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001bc4:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8001bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8001bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bcc:	ee07 3a10 	vmov	s14, r3
 8001bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001bdc:	e7e0      	b.n	8001ba0 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8001bde:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8001be2:	6081      	str	r1, [r0, #8]
}
 8001be4:	e7ce      	b.n	8001b84 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8001be6:	bf00      	nop
 8001be8:	58024400 	.word	0x58024400
 8001bec:	03d09000 	.word	0x03d09000
 8001bf0:	4c742400 	.word	0x4c742400
 8001bf4:	4af42400 	.word	0x4af42400
 8001bf8:	4a742400 	.word	0x4a742400

08001bfc <HAL_RCCEx_GetPLL3ClockFreq>:
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8001bfe:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c00:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001c02:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8001c04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));

  if (pll3m != 0U)
 8001c06:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001c0a:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001c0e:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8001c10:	f000 808d 	beq.w	8001d2e <HAL_RCCEx_GetPLL3ClockFreq+0x132>
  {
    switch (pllsource)
 8001c14:	ee07 1a90 	vmov	s15, r1
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8001c18:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001c1c:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c20:	f004 0403 	and.w	r4, r4, #3
 8001c24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001c28:	434b      	muls	r3, r1
    switch (pllsource)
 8001c2a:	2c01      	cmp	r4, #1
 8001c2c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8001c38:	d06b      	beq.n	8001d12 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8001c3a:	2c02      	cmp	r4, #2
 8001c3c:	d05b      	beq.n	8001cf6 <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8001c3e:	2c00      	cmp	r4, #0
 8001c40:	d167      	bne.n	8001d12 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c42:	6813      	ldr	r3, [r2, #0]
 8001c44:	069b      	lsls	r3, r3, #26
 8001c46:	d546      	bpl.n	8001cd6 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c48:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001c4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c4c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001c50:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c56:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001c58:	ee07 2a10 	vmov	s14, r2
 8001c5c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001c60:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001c64:	ee06 3a90 	vmov	s13, r3
 8001c68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c70:	ee77 7a86 	vadd.f32	s15, s15, s12

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      break;
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8001c74:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001c76:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8001c7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001c80:	ee07 3a10 	vmov	s14, r3
 8001c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c88:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001c8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c90:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001c94:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8001c98:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c9a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001c9e:	ee07 3a10 	vmov	s14, r3
 8001ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ca6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001caa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cae:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001cb2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8001cb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cb8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001cbc:	ee07 3a10 	vmov	s14, r3
 8001cc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001cc4:	ee37 6a06 	vadd.f32	s12, s14, s12
 8001cc8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001ccc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001cd0:	ed80 7a02 	vstr	s14, [r0, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8001cd4:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001cd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cd8:	eddf 5a19 	vldr	s11, [pc, #100]	; 8001d40 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8001cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce0:	ee07 3a10 	vmov	s14, r3
 8001ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001cf0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001cf4:	e7be      	b.n	8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001cf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cf8:	eddf 5a12 	vldr	s11, [pc, #72]	; 8001d44 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8001cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d00:	ee07 3a10 	vmov	s14, r3
 8001d04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001d10:	e7ee      	b.n	8001cf0 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001d12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d14:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8001d48 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8001d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1c:	ee07 3a10 	vmov	s14, r3
 8001d20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d28:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001d2c:	e7e0      	b.n	8001cf0 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8001d2e:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8001d32:	6081      	str	r1, [r0, #8]
}
 8001d34:	e7ce      	b.n	8001cd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8001d36:	bf00      	nop
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	03d09000 	.word	0x03d09000
 8001d40:	4c742400 	.word	0x4c742400
 8001d44:	4af42400 	.word	0x4af42400
 8001d48:	4a742400 	.word	0x4a742400

08001d4c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001d4c:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d4e:	4605      	mov	r5, r0
 8001d50:	b1c0      	cbz	r0, 8001d84 <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8001d52:	2324      	movs	r3, #36	; 0x24

  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8001d54:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8001d56:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8001d5a:	6803      	ldr	r3, [r0, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8001d64:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8001d66:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8001d68:	609c      	str	r4, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001d6a:	f000 fcb7 	bl	80026dc <HAL_UART_MspDeInit>
  huart->RxState = HAL_UART_STATE_RESET;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8001d6e:	4620      	mov	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
  __HAL_UNLOCK(huart);
 8001d74:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8001d78:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8001d7c:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d80:	66ec      	str	r4, [r5, #108]	; 0x6c
}
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	e7fc      	b.n	8001d82 <HAL_UART_DeInit+0x36>

08001d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d8c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d8e:	69c0      	ldr	r0, [r0, #28]
{
 8001d90:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d92:	6921      	ldr	r1, [r4, #16]
 8001d94:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d96:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	6961      	ldr	r1, [r4, #20]
 8001d9c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d9e:	49a8      	ldr	r1, [pc, #672]	; (8002040 <UART_SetConfig+0x2b8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001da0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da2:	4029      	ands	r1, r5
 8001da4:	430a      	orrs	r2, r1

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001da6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001db0:	430a      	orrs	r2, r1
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001db2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001db4:	605a      	str	r2, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001db6:	4aa3      	ldr	r2, [pc, #652]	; (8002044 <UART_SetConfig+0x2bc>)
 8001db8:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001dba:	bf1c      	itt	ne
 8001dbc:	6a22      	ldrne	r2, [r4, #32]
 8001dbe:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8001dc6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001dca:	430a      	orrs	r2, r1

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001dcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dce:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	f022 020f 	bic.w	r2, r2, #15
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dda:	4a9b      	ldr	r2, [pc, #620]	; (8002048 <UART_SetConfig+0x2c0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <UART_SetConfig+0x6a>
 8001de0:	4b9a      	ldr	r3, [pc, #616]	; (800204c <UART_SetConfig+0x2c4>)
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001de8:	2b28      	cmp	r3, #40	; 0x28
 8001dea:	d86f      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001dec:	4a98      	ldr	r2, [pc, #608]	; (8002050 <UART_SetConfig+0x2c8>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	e00c      	b.n	8001e0c <UART_SetConfig+0x84>
 8001df2:	4a98      	ldr	r2, [pc, #608]	; (8002054 <UART_SetConfig+0x2cc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d11d      	bne.n	8001e34 <UART_SetConfig+0xac>
 8001df8:	4b94      	ldr	r3, [pc, #592]	; (800204c <UART_SetConfig+0x2c4>)
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d863      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001e04:	4a92      	ldr	r2, [pc, #584]	; (8002050 <UART_SetConfig+0x2c8>)
 8001e06:	4413      	add	r3, r2
 8001e08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001e10:	f040 80fb 	bne.w	800200a <UART_SetConfig+0x282>
  {
    switch (clocksource)
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	f200 80b6 	bhi.w	8001f86 <UART_SetConfig+0x1fe>
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d856      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001e1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001e22:	00e0      	.short	0x00e0
 8001e24:	005500e5 	.word	0x005500e5
 8001e28:	00e80055 	.word	0x00e80055
 8001e2c:	00550055 	.word	0x00550055
 8001e30:	00ed0055 	.word	0x00ed0055
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e34:	4a88      	ldr	r2, [pc, #544]	; (8002058 <UART_SetConfig+0x2d0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d107      	bne.n	8001e4a <UART_SetConfig+0xc2>
 8001e3a:	4b84      	ldr	r3, [pc, #528]	; (800204c <UART_SetConfig+0x2c4>)
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d842      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001e46:	4a85      	ldr	r2, [pc, #532]	; (800205c <UART_SetConfig+0x2d4>)
 8001e48:	e7d1      	b.n	8001dee <UART_SetConfig+0x66>
 8001e4a:	4a85      	ldr	r2, [pc, #532]	; (8002060 <UART_SetConfig+0x2d8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d107      	bne.n	8001e60 <UART_SetConfig+0xd8>
 8001e50:	4b7e      	ldr	r3, [pc, #504]	; (800204c <UART_SetConfig+0x2c4>)
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d837      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001e5c:	4a81      	ldr	r2, [pc, #516]	; (8002064 <UART_SetConfig+0x2dc>)
 8001e5e:	e7c6      	b.n	8001dee <UART_SetConfig+0x66>
 8001e60:	4a81      	ldr	r2, [pc, #516]	; (8002068 <UART_SetConfig+0x2e0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d107      	bne.n	8001e76 <UART_SetConfig+0xee>
 8001e66:	4b79      	ldr	r3, [pc, #484]	; (800204c <UART_SetConfig+0x2c4>)
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d82c      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001e72:	4a7e      	ldr	r2, [pc, #504]	; (800206c <UART_SetConfig+0x2e4>)
 8001e74:	e7bb      	b.n	8001dee <UART_SetConfig+0x66>
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <UART_SetConfig+0x2e8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d107      	bne.n	8001e8c <UART_SetConfig+0x104>
 8001e7c:	4b73      	ldr	r3, [pc, #460]	; (800204c <UART_SetConfig+0x2c4>)
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e84:	2b28      	cmp	r3, #40	; 0x28
 8001e86:	d821      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001e88:	4a7a      	ldr	r2, [pc, #488]	; (8002074 <UART_SetConfig+0x2ec>)
 8001e8a:	e7b0      	b.n	8001dee <UART_SetConfig+0x66>
 8001e8c:	4a7a      	ldr	r2, [pc, #488]	; (8002078 <UART_SetConfig+0x2f0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d107      	bne.n	8001ea2 <UART_SetConfig+0x11a>
 8001e92:	4b6e      	ldr	r3, [pc, #440]	; (800204c <UART_SetConfig+0x2c4>)
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d816      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001e9e:	4a77      	ldr	r2, [pc, #476]	; (800207c <UART_SetConfig+0x2f4>)
 8001ea0:	e7a5      	b.n	8001dee <UART_SetConfig+0x66>
 8001ea2:	4a77      	ldr	r2, [pc, #476]	; (8002080 <UART_SetConfig+0x2f8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d107      	bne.n	8001eb8 <UART_SetConfig+0x130>
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <UART_SetConfig+0x2c4>)
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d80b      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001eb4:	4a73      	ldr	r2, [pc, #460]	; (8002084 <UART_SetConfig+0x2fc>)
 8001eb6:	e79a      	b.n	8001dee <UART_SetConfig+0x66>
 8001eb8:	4a62      	ldr	r2, [pc, #392]	; (8002044 <UART_SetConfig+0x2bc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d106      	bne.n	8001ecc <UART_SetConfig+0x144>
 8001ebe:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8001ec2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d901      	bls.n	8001ed0 <UART_SetConfig+0x148>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ecc:	2001      	movs	r0, #1
 8001ece:	e010      	b.n	8001ef2 <UART_SetConfig+0x16a>
 8001ed0:	4d5f      	ldr	r5, [pc, #380]	; (8002050 <UART_SetConfig+0x2c8>)
 8001ed2:	442b      	add	r3, r5
 8001ed4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    switch (clocksource)
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d023      	beq.n	8001f24 <UART_SetConfig+0x19c>
 8001edc:	d811      	bhi.n	8001f02 <UART_SetConfig+0x17a>
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d016      	beq.n	8001f10 <UART_SetConfig+0x188>
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d019      	beq.n	8001f1a <UART_SetConfig+0x192>
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d1f0      	bne.n	8001ecc <UART_SetConfig+0x144>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8001eea:	f7ff fdcd 	bl	8001a88 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8001eee:	bb10      	cbnz	r0, 8001f36 <UART_SetConfig+0x1ae>
 8001ef0:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8001ef2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ef6:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ef8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001efa:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8001efe:	b007      	add	sp, #28
 8001f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (clocksource)
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d03d      	beq.n	8001f82 <UART_SetConfig+0x1fa>
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d1e0      	bne.n	8001ecc <UART_SetConfig+0x144>
 8001f0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f0e:	e012      	b.n	8001f36 <UART_SetConfig+0x1ae>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8001f10:	4668      	mov	r0, sp
 8001f12:	f7ff fdcb 	bl	8001aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8001f16:	9801      	ldr	r0, [sp, #4]
        break;
 8001f18:	e7e9      	b.n	8001eee <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8001f1a:	a803      	add	r0, sp, #12
 8001f1c:	f7ff fe6e 	bl	8001bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8001f20:	9804      	ldr	r0, [sp, #16]
        break;
 8001f22:	e7e4      	b.n	8001eee <UART_SetConfig+0x166>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	4858      	ldr	r0, [pc, #352]	; (8002088 <UART_SetConfig+0x300>)
 8001f28:	f013 0f20 	tst.w	r3, #32
 8001f2c:	d003      	beq.n	8001f36 <UART_SetConfig+0x1ae>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001f34:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f38:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8001f3c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f3e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001f40:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f44:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8001f48:	4299      	cmp	r1, r3
 8001f4a:	d8bf      	bhi.n	8001ecc <UART_SetConfig+0x144>
 8001f4c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8001f50:	d8bc      	bhi.n	8001ecc <UART_SetConfig+0x144>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f52:	2300      	movs	r3, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	f7fe fbd7 	bl	8000708 <__aeabi_uldivmod>
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	020f      	lsls	r7, r1, #8
 8001f5e:	2300      	movs	r3, #0
 8001f60:	0206      	lsls	r6, r0, #8
 8001f62:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8001f66:	0868      	lsrs	r0, r5, #1
 8001f68:	1830      	adds	r0, r6, r0
 8001f6a:	f147 0100 	adc.w	r1, r7, #0
 8001f6e:	f7fe fbcb 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <UART_SetConfig+0x304>)
 8001f74:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8a7      	bhi.n	8001ecc <UART_SetConfig+0x144>
          huart->Instance->BRR = usartdiv;
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	60d8      	str	r0, [r3, #12]
 8001f80:	e7b6      	b.n	8001ef0 <UART_SetConfig+0x168>
        pclk = (uint32_t) CSI_VALUE;
 8001f82:	4843      	ldr	r0, [pc, #268]	; (8002090 <UART_SetConfig+0x308>)
 8001f84:	e7d7      	b.n	8001f36 <UART_SetConfig+0x1ae>
    switch (clocksource)
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d03d      	beq.n	8002006 <UART_SetConfig+0x27e>
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	d00b      	beq.n	8001fa6 <UART_SetConfig+0x21e>
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d19c      	bne.n	8001ecc <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <UART_SetConfig+0x2c4>)
 8001f94:	483c      	ldr	r0, [pc, #240]	; (8002088 <UART_SetConfig+0x300>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	f012 0f20 	tst.w	r2, #32
 8001f9c:	d003      	beq.n	8001fa6 <UART_SetConfig+0x21e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001fa4:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001fa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <UART_SetConfig+0x2c8>)
 8001faa:	6862      	ldr	r2, [r4, #4]
 8001fac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	0850      	lsrs	r0, r2, #1
 8001fb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001fbc:	fbb0 f0f2 	udiv	r0, r0, r2
 8001fc0:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fc2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001fc6:	f1a3 0110 	sub.w	r1, r3, #16
 8001fca:	4291      	cmp	r1, r2
 8001fcc:	f63f af7e 	bhi.w	8001ecc <UART_SetConfig+0x144>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fd0:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fd4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8001fd8:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fda:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8001fdc:	4318      	orrs	r0, r3
 8001fde:	60d0      	str	r0, [r2, #12]
 8001fe0:	e786      	b.n	8001ef0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fe2:	f7ff fd2d 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d082      	beq.n	8001ef0 <UART_SetConfig+0x168>
 8001fea:	e7dc      	b.n	8001fa6 <UART_SetConfig+0x21e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001fec:	f7ff fd3a 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
        break;
 8001ff0:	e7f9      	b.n	8001fe6 <UART_SetConfig+0x25e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8001ff2:	4668      	mov	r0, sp
 8001ff4:	f7ff fd5a 	bl	8001aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8001ff8:	9801      	ldr	r0, [sp, #4]
        break;
 8001ffa:	e7f4      	b.n	8001fe6 <UART_SetConfig+0x25e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8001ffc:	a803      	add	r0, sp, #12
 8001ffe:	f7ff fdfd 	bl	8001bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002002:	9804      	ldr	r0, [sp, #16]
        break;
 8002004:	e7ef      	b.n	8001fe6 <UART_SetConfig+0x25e>
        pclk = (uint32_t) CSI_VALUE;
 8002006:	4822      	ldr	r0, [pc, #136]	; (8002090 <UART_SetConfig+0x308>)
 8002008:	e7cd      	b.n	8001fa6 <UART_SetConfig+0x21e>
    switch (clocksource)
 800200a:	2b08      	cmp	r3, #8
 800200c:	d842      	bhi.n	8002094 <UART_SetConfig+0x30c>
 800200e:	2b08      	cmp	r3, #8
 8002010:	f63f af5c 	bhi.w	8001ecc <UART_SetConfig+0x144>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <UART_SetConfig+0x294>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	080020e7 	.word	0x080020e7
 8002020:	080020f3 	.word	0x080020f3
 8002024:	08001ecd 	.word	0x08001ecd
 8002028:	08001ecd 	.word	0x08001ecd
 800202c:	080020f9 	.word	0x080020f9
 8002030:	08001ecd 	.word	0x08001ecd
 8002034:	08001ecd 	.word	0x08001ecd
 8002038:	08001ecd 	.word	0x08001ecd
 800203c:	08002103 	.word	0x08002103
 8002040:	cfff69f3 	.word	0xcfff69f3
 8002044:	58000c00 	.word	0x58000c00
 8002048:	40011000 	.word	0x40011000
 800204c:	58024400 	.word	0x58024400
 8002050:	08006f7c 	.word	0x08006f7c
 8002054:	40004400 	.word	0x40004400
 8002058:	40004800 	.word	0x40004800
 800205c:	08006fa5 	.word	0x08006fa5
 8002060:	40004c00 	.word	0x40004c00
 8002064:	08006fa5 	.word	0x08006fa5
 8002068:	40005000 	.word	0x40005000
 800206c:	08006fa5 	.word	0x08006fa5
 8002070:	40011400 	.word	0x40011400
 8002074:	08006f7c 	.word	0x08006f7c
 8002078:	40007800 	.word	0x40007800
 800207c:	08006fa5 	.word	0x08006fa5
 8002080:	40007c00 	.word	0x40007c00
 8002084:	08006fa5 	.word	0x08006fa5
 8002088:	03d09000 	.word	0x03d09000
 800208c:	000ffcff 	.word	0x000ffcff
 8002090:	003d0900 	.word	0x003d0900
 8002094:	2b20      	cmp	r3, #32
 8002096:	d039      	beq.n	800210c <UART_SetConfig+0x384>
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d039      	beq.n	8002110 <UART_SetConfig+0x388>
 800209c:	2b10      	cmp	r3, #16
 800209e:	f47f af15 	bne.w	8001ecc <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <UART_SetConfig+0x394>)
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f013 0f20 	tst.w	r3, #32
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <UART_SetConfig+0x398>)
 80020ac:	d033      	beq.n	8002116 <UART_SetConfig+0x38e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80020ae:	6810      	ldr	r0, [r2, #0]
 80020b0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80020b4:	fa23 f000 	lsr.w	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <UART_SetConfig+0x39c>)
 80020bc:	6861      	ldr	r1, [r4, #4]
 80020be:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80020c2:	8ed3      	ldrh	r3, [r2, #54]	; 0x36
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020c4:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020cc:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80020d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d4:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020d6:	f1a3 0110 	sub.w	r1, r3, #16
 80020da:	4291      	cmp	r1, r2
 80020dc:	f63f aef6 	bhi.w	8001ecc <UART_SetConfig+0x144>
        huart->Instance->BRR = usartdiv;
 80020e0:	6822      	ldr	r2, [r4, #0]
 80020e2:	60d3      	str	r3, [r2, #12]
 80020e4:	e704      	b.n	8001ef0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80020e6:	f7ff fcab 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80020ea:	2800      	cmp	r0, #0
 80020ec:	f43f af00 	beq.w	8001ef0 <UART_SetConfig+0x168>
 80020f0:	e7e2      	b.n	80020b8 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 80020f2:	f7ff fcb7 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
        break;
 80020f6:	e7f8      	b.n	80020ea <UART_SetConfig+0x362>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80020f8:	4668      	mov	r0, sp
 80020fa:	f7ff fcd7 	bl	8001aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80020fe:	9801      	ldr	r0, [sp, #4]
        break;
 8002100:	e7f3      	b.n	80020ea <UART_SetConfig+0x362>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002102:	a803      	add	r0, sp, #12
 8002104:	f7ff fd7a 	bl	8001bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002108:	9804      	ldr	r0, [sp, #16]
        break;
 800210a:	e7ee      	b.n	80020ea <UART_SetConfig+0x362>
        pclk = (uint32_t) CSI_VALUE;
 800210c:	4806      	ldr	r0, [pc, #24]	; (8002128 <UART_SetConfig+0x3a0>)
 800210e:	e7d3      	b.n	80020b8 <UART_SetConfig+0x330>
    switch (clocksource)
 8002110:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002114:	e7d0      	b.n	80020b8 <UART_SetConfig+0x330>
          pclk = (uint32_t) HSI_VALUE;
 8002116:	4618      	mov	r0, r3
 8002118:	e7ce      	b.n	80020b8 <UART_SetConfig+0x330>
 800211a:	bf00      	nop
 800211c:	58024400 	.word	0x58024400
 8002120:	03d09000 	.word	0x03d09000
 8002124:	08006f7c 	.word	0x08006f7c
 8002128:	003d0900 	.word	0x003d0900

0800212c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800212c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800212e:	07da      	lsls	r2, r3, #31
{
 8002130:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002132:	d506      	bpl.n	8002142 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002134:	6801      	ldr	r1, [r0, #0]
 8002136:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002138:	684a      	ldr	r2, [r1, #4]
 800213a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800213e:	4322      	orrs	r2, r4
 8002140:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002142:	079c      	lsls	r4, r3, #30
 8002144:	d506      	bpl.n	8002154 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002146:	6801      	ldr	r1, [r0, #0]
 8002148:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800214a:	684a      	ldr	r2, [r1, #4]
 800214c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002150:	4322      	orrs	r2, r4
 8002152:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002154:	0759      	lsls	r1, r3, #29
 8002156:	d506      	bpl.n	8002166 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002158:	6801      	ldr	r1, [r0, #0]
 800215a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800215c:	684a      	ldr	r2, [r1, #4]
 800215e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002162:	4322      	orrs	r2, r4
 8002164:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002166:	071a      	lsls	r2, r3, #28
 8002168:	d506      	bpl.n	8002178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800216a:	6801      	ldr	r1, [r0, #0]
 800216c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800216e:	684a      	ldr	r2, [r1, #4]
 8002170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002174:	4322      	orrs	r2, r4
 8002176:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002178:	06dc      	lsls	r4, r3, #27
 800217a:	d506      	bpl.n	800218a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800217c:	6801      	ldr	r1, [r0, #0]
 800217e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002180:	688a      	ldr	r2, [r1, #8]
 8002182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002186:	4322      	orrs	r2, r4
 8002188:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800218a:	0699      	lsls	r1, r3, #26
 800218c:	d506      	bpl.n	800219c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800218e:	6801      	ldr	r1, [r0, #0]
 8002190:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002192:	688a      	ldr	r2, [r1, #8]
 8002194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002198:	4322      	orrs	r2, r4
 800219a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800219c:	065a      	lsls	r2, r3, #25
 800219e:	d510      	bpl.n	80021c2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021a0:	6801      	ldr	r1, [r0, #0]
 80021a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80021a4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021a6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80021ae:	ea42 0204 	orr.w	r2, r2, r4
 80021b2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021b4:	d105      	bne.n	80021c2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021b6:	684a      	ldr	r2, [r1, #4]
 80021b8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80021ba:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021be:	4322      	orrs	r2, r4
 80021c0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	d506      	bpl.n	80021d4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021c6:	6802      	ldr	r2, [r0, #0]
 80021c8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80021ca:	6853      	ldr	r3, [r2, #4]
 80021cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6053      	str	r3, [r2, #4]
  }
}
 80021d4:	bd10      	pop	{r4, pc}

080021d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021da:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80021de:	4604      	mov	r4, r0
 80021e0:	460e      	mov	r6, r1
 80021e2:	4615      	mov	r5, r2
 80021e4:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	69d3      	ldr	r3, [r2, #28]
 80021ea:	ea36 0303 	bics.w	r3, r6, r3
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	d001      	beq.n	80021fc <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80021f8:	2000      	movs	r0, #0
 80021fa:	e01c      	b.n	8002236 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80021fc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002200:	d0f2      	beq.n	80021e8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7fe fd5b 	bl	8000cbc <HAL_GetTick>
 8002206:	1bc0      	subs	r0, r0, r7
 8002208:	4540      	cmp	r0, r8
 800220a:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800220c:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	d802      	bhi.n	8002216 <UART_WaitOnFlagUntilTimeout+0x40>
 8002210:	f1b8 0f00 	cmp.w	r8, #0
 8002214:	d111      	bne.n	800223a <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800221a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800221c:	6883      	ldr	r3, [r0, #8]
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002224:	2320      	movs	r3, #32
 8002226:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800222a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 800222e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002230:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002232:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8002236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800223a:	075a      	lsls	r2, r3, #29
 800223c:	d5d3      	bpl.n	80021e6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800223e:	69c3      	ldr	r3, [r0, #28]
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	d5d0      	bpl.n	80021e6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002248:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800224a:	6803      	ldr	r3, [r0, #0]
 800224c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002250:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002252:	6883      	ldr	r3, [r0, #8]
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800225a:	2320      	movs	r3, #32
 800225c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002260:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002264:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002268:	e7e1      	b.n	800222e <UART_WaitOnFlagUntilTimeout+0x58>

0800226a <HAL_UART_Transmit>:
{
 800226a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800226e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002270:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8002274:	4604      	mov	r4, r0
 8002276:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002278:	2b20      	cmp	r3, #32
{
 800227a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800227c:	d150      	bne.n	8002320 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800227e:	2900      	cmp	r1, #0
 8002280:	d04c      	beq.n	800231c <HAL_UART_Transmit+0xb2>
 8002282:	2a00      	cmp	r2, #0
 8002284:	d04a      	beq.n	800231c <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002286:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800228a:	2b01      	cmp	r3, #1
 800228c:	d048      	beq.n	8002320 <HAL_UART_Transmit+0xb6>
 800228e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002290:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002292:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002296:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 80022a0:	f7fe fd0c 	bl	8000cbc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80022a6:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80022a8:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80022b0:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b4:	d103      	bne.n	80022be <HAL_UART_Transmit+0x54>
 80022b6:	6922      	ldr	r2, [r4, #16]
 80022b8:	b90a      	cbnz	r2, 80022be <HAL_UART_Transmit+0x54>
 80022ba:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80022bc:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80022be:	2200      	movs	r2, #0
 80022c0:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80022c4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022c8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80022cc:	b292      	uxth	r2, r2
 80022ce:	b942      	cbnz	r2, 80022e2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d0:	2140      	movs	r1, #64	; 0x40
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ff7f 	bl	80021d6 <UART_WaitOnFlagUntilTimeout>
 80022d8:	b958      	cbnz	r0, 80022f2 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80022da:	2320      	movs	r3, #32
 80022dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80022e0:	e008      	b.n	80022f4 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e2:	2200      	movs	r2, #0
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	4620      	mov	r0, r4
 80022e8:	9303      	str	r3, [sp, #12]
 80022ea:	f7ff ff74 	bl	80021d6 <UART_WaitOnFlagUntilTimeout>
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	b118      	cbz	r0, 80022fa <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 80022f2:	2003      	movs	r0, #3
}
 80022f4:	b004      	add	sp, #16
 80022f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 80022fa:	6821      	ldr	r1, [r4, #0]
 80022fc:	b95e      	cbnz	r6, 8002316 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022fe:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002302:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002306:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002308:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800230c:	3a01      	subs	r2, #1
 800230e:	b292      	uxth	r2, r2
 8002310:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8002314:	e7d6      	b.n	80022c4 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002316:	f816 2b01 	ldrb.w	r2, [r6], #1
 800231a:	e7f4      	b.n	8002306 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 800231c:	2001      	movs	r0, #1
 800231e:	e7e9      	b.n	80022f4 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8002320:	2002      	movs	r0, #2
 8002322:	e7e7      	b.n	80022f4 <HAL_UART_Transmit+0x8a>

08002324 <UART_CheckIdleState>:
{
 8002324:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002326:	2500      	movs	r5, #0
{
 8002328:	4604      	mov	r4, r0
 800232a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232c:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8002330:	f7fe fcc4 	bl	8000cbc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002334:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002336:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	0711      	lsls	r1, r2, #28
 800233c:	d417      	bmi.n	800236e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	0752      	lsls	r2, r2, #29
 8002344:	d509      	bpl.n	800235a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002346:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800234a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800234e:	4620      	mov	r0, r4
 8002350:	9200      	str	r2, [sp, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	f7ff ff3f 	bl	80021d6 <UART_WaitOnFlagUntilTimeout>
 8002358:	b9b0      	cbnz	r0, 8002388 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800235a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800235c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800235e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002362:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002366:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236a:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 800236c:	e00d      	b.n	800238a <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800236e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002372:	9003      	str	r0, [sp, #12]
 8002374:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002378:	4620      	mov	r0, r4
 800237a:	9200      	str	r2, [sp, #0]
 800237c:	462a      	mov	r2, r5
 800237e:	f7ff ff2a 	bl	80021d6 <UART_WaitOnFlagUntilTimeout>
 8002382:	9b03      	ldr	r3, [sp, #12]
 8002384:	2800      	cmp	r0, #0
 8002386:	d0da      	beq.n	800233e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002388:	2003      	movs	r0, #3
}
 800238a:	b005      	add	sp, #20
 800238c:	bd30      	pop	{r4, r5, pc}

0800238e <HAL_UART_Init>:
{
 800238e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002390:	4604      	mov	r4, r0
 8002392:	b350      	cbz	r0, 80023ea <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002394:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002398:	b91b      	cbnz	r3, 80023a2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800239a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800239e:	f000 f95b 	bl	8002658 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023a4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023a6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023b4:	f7ff fce8 	bl	8001d88 <UART_SetConfig>
 80023b8:	2801      	cmp	r0, #1
 80023ba:	d016      	beq.n	80023ea <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023be:	b113      	cbz	r3, 80023c6 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff feb3 	bl	800212c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80023c8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
}
 80023e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80023e4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80023e6:	f7ff bf9d 	b.w	8002324 <UART_CheckIdleState>
}
 80023ea:	2001      	movs	r0, #1
 80023ec:	bd10      	pop	{r4, pc}
	...

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023f6:	e003      	b.n	8002400 <LoopCopyDataInit>

080023f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023fe:	3104      	adds	r1, #4

08002400 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002404:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002406:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002408:	d3f6      	bcc.n	80023f8 <CopyDataInit>
  ldr  r2, =_sbss
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800240c:	e002      	b.n	8002414 <LoopFillZerobss>

0800240e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800240e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002410:	f842 3b04 	str.w	r3, [r2], #4

08002414 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002416:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002418:	d3f9      	bcc.n	800240e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800241a:	f7fe fbad 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f000 f99f 	bl	8002760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f000 f817 	bl	8002454 <main>
  bx  lr    
 8002426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002428:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800242c:	080074bc 	.word	0x080074bc
  ldr  r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002434:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002438:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 800243c:	200006f0 	.word	0x200006f0

08002440 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC3_IRQHandler>

08002442 <Error_Handler>:
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED1 off */
  BSP_LED_Off(LED1);
 8002442:	2000      	movs	r0, #0
{
 8002444:	b508      	push	{r3, lr}
  BSP_LED_Off(LED1);
 8002446:	f7fe fb71 	bl	8000b2c <BSP_LED_Off>
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 800244a:	2002      	movs	r0, #2
 800244c:	f7fe fb5a 	bl	8000b04 <BSP_LED_On>
  while(1)
 8002450:	e7fe      	b.n	8002450 <Error_Handler+0xe>
	...

08002454 <main>:
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002454:	4b71      	ldr	r3, [pc, #452]	; (800261c <main+0x1c8>)
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b09c      	sub	sp, #112	; 0x70
 8002460:	d111      	bne.n	8002486 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002462:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002466:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800246a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800246e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002472:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800247c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800247e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002482:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002486:	4a65      	ldr	r2, [pc, #404]	; (800261c <main+0x1c8>)
 8002488:	6953      	ldr	r3, [r2, #20]
 800248a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800248e:	d123      	bne.n	80024d8 <main+0x84>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002490:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002494:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002498:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800249c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80024a0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80024a4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80024a8:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80024aa:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80024ae:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80024b0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80024b4:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80024b6:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80024ba:	d2f9      	bcs.n	80024b0 <main+0x5c>
    } while(sets-- != 0U);
 80024bc:	3b20      	subs	r3, #32
 80024be:	f113 0f20 	cmn.w	r3, #32
 80024c2:	d1f2      	bne.n	80024aa <main+0x56>
 80024c4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80024c8:	6953      	ldr	r3, [r2, #20]
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ce:	6153      	str	r3, [r2, #20]
 80024d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024d4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80024d8:	f7fe fbb6 	bl	8000c48 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80024dc:	2002      	movs	r0, #2
 80024de:	f7fe fe0b 	bl	80010f8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e2:	2300      	movs	r3, #0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4b4e      	ldr	r3, [pc, #312]	; (8002620 <main+0x1cc>)
 80024e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <main+0x1d0>)
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	0494      	lsls	r4, r2, #18
 8002510:	d5fc      	bpl.n	800250c <main+0xb8>
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002512:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002516:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002518:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 800251a:	2404      	movs	r4, #4
 800251c:	f44f 72c8 	mov.w	r2, #400	; 0x190
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002520:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002522:	9616      	str	r6, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002524:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8002528:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800252a:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800252e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8002530:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002532:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002534:	e9cd 4214 	strd	r4, r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002538:	e9cd 4617 	strd	r4, r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800253c:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002540:	f7fe fdfe 	bl	8001140 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8002544:	b108      	cbz	r0, 800254a <main+0xf6>
    Error_Handler();
 8002546:	f7ff ff7c 	bl	8002442 <Error_Handler>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254a:	213f      	movs	r1, #63	; 0x3f
 800254c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800254e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8002550:	2008      	movs	r0, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8002552:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002556:	e9cd 1301 	strd	r1, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800255a:	2340      	movs	r3, #64	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800255c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800255e:	e9cd 0304 	strd	r0, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8002562:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 8002564:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 8002566:	e9cd 2307 	strd	r2, r3, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800256a:	f7ff f921 	bl	80017b0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800256e:	4605      	mov	r5, r0
 8002570:	2800      	cmp	r0, #0
 8002572:	d1e8      	bne.n	8002546 <main+0xf2>
  m_sysclk = HAL_RCC_GetSysClockFreq();
 8002574:	4c2c      	ldr	r4, [pc, #176]	; (8002628 <main+0x1d4>)
 8002576:	f7ff f87b 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 800257a:	6020      	str	r0, [r4, #0]
  m_hclk = HAL_RCC_GetHCLKFreq();
 800257c:	f7ff fa3e 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8002580:	6060      	str	r0, [r4, #4]
  m_pclk1 = HAL_RCC_GetPCLK1Freq();
 8002582:	f7ff fa5d 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
  printf("sysclk = %lu\r\n", (unsigned long)m_sysclk);
 8002586:	6821      	ldr	r1, [r4, #0]
  m_pclk1 = HAL_RCC_GetPCLK1Freq();
 8002588:	60a0      	str	r0, [r4, #8]
  printf("sysclk = %lu\r\n", (unsigned long)m_sysclk);
 800258a:	4828      	ldr	r0, [pc, #160]	; (800262c <main+0x1d8>)
 800258c:	f000 ff5a 	bl	8003444 <iprintf>
  printf("hclk = %lu\r\n", (unsigned long)m_hclk);
 8002590:	6861      	ldr	r1, [r4, #4]
 8002592:	4827      	ldr	r0, [pc, #156]	; (8002630 <main+0x1dc>)
 8002594:	f000 ff56 	bl	8003444 <iprintf>
  printf("pclk = %lu\r\n", (unsigned long)m_pclk1);
 8002598:	68a1      	ldr	r1, [r4, #8]
 800259a:	4826      	ldr	r0, [pc, #152]	; (8002634 <main+0x1e0>)
 800259c:	f000 ff52 	bl	8003444 <iprintf>
  BSP_LED_Init(LED1);
 80025a0:	4628      	mov	r0, r5
 80025a2:	f7fe fa65 	bl	8000a70 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80025a6:	4638      	mov	r0, r7
 80025a8:	f7fe fa62 	bl	8000a70 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80025ac:	4630      	mov	r0, r6
 80025ae:	f7fe fa5f 	bl	8000a70 <BSP_LED_Init>
    UartHandle.Instance        = USARTx;
 80025b2:	4c21      	ldr	r4, [pc, #132]	; (8002638 <main+0x1e4>)
    UartHandle.Init.BaudRate     = 9600;
 80025b4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80025b8:	4a20      	ldr	r2, [pc, #128]	; (800263c <main+0x1e8>)
    if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80025ba:	4620      	mov	r0, r4
    UartHandle.Init.Parity       = UART_PARITY_NONE;
 80025bc:	6125      	str	r5, [r4, #16]
    UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80025be:	61a5      	str	r5, [r4, #24]
    UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	61e5      	str	r5, [r4, #28]
    UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c2:	62a5      	str	r5, [r4, #40]	; 0x28
    UartHandle.Init.BaudRate     = 9600;
 80025c4:	e9c4 2300 	strd	r2, r3, [r4]
    UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80025c8:	230c      	movs	r3, #12
    UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80025ca:	e9c4 5502 	strd	r5, r5, [r4, #8]
    UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80025ce:	6163      	str	r3, [r4, #20]
    if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80025d0:	f7ff fbbc 	bl	8001d4c <HAL_UART_DeInit>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1b6      	bne.n	8002546 <main+0xf2>
    if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff fed8 	bl	800238e <HAL_UART_Init>
 80025de:	2800      	cmp	r0, #0
 80025e0:	d1b1      	bne.n	8002546 <main+0xf2>
    BSP_LED_On(LED1);
 80025e2:	f7fe fa8f 	bl	8000b04 <BSP_LED_On>
    if(HAL_UART_Transmit(&UartHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE, 5000)!= HAL_OK)
 80025e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80025ea:	220b      	movs	r2, #11
 80025ec:	4914      	ldr	r1, [pc, #80]	; (8002640 <main+0x1ec>)
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7ff fe3b 	bl	800226a <HAL_UART_Transmit>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d1a6      	bne.n	8002546 <main+0xf2>
	    if(HAL_UART_Transmit(&UartHandle, (uint8_t*)UART_TxBuffer, UART_TXBUFFER_SIZE, 5000)!= HAL_OK)
 80025f8:	4d11      	ldr	r5, [pc, #68]	; (8002640 <main+0x1ec>)
    BSP_LED_Off(LED1);
 80025fa:	f7fe fa97 	bl	8000b2c <BSP_LED_Off>
	    if(HAL_UART_Transmit(&UartHandle, (uint8_t*)UART_TxBuffer, UART_TXBUFFER_SIZE, 5000)!= HAL_OK)
 80025fe:	4e11      	ldr	r6, [pc, #68]	; (8002644 <main+0x1f0>)
 8002600:	f241 3388 	movw	r3, #5000	; 0x1388
 8002604:	7b2a      	ldrb	r2, [r5, #12]
 8002606:	4631      	mov	r1, r6
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff fe2e 	bl	800226a <HAL_UART_Transmit>
 800260e:	2800      	cmp	r0, #0
 8002610:	d199      	bne.n	8002546 <main+0xf2>
	    HAL_Delay(1000);//1000ms delay
 8002612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002616:	f7fe fb57 	bl	8000cc8 <HAL_Delay>
	    if(HAL_UART_Transmit(&UartHandle, (uint8_t*)UART_TxBuffer, UART_TXBUFFER_SIZE, 5000)!= HAL_OK)
 800261a:	e7f1      	b.n	8002600 <main+0x1ac>
 800261c:	e000ed00 	.word	0xe000ed00
 8002620:	58000400 	.word	0x58000400
 8002624:	58024800 	.word	0x58024800
 8002628:	20000210 	.word	0x20000210
 800262c:	08006fca 	.word	0x08006fca
 8002630:	08006fd9 	.word	0x08006fd9
 8002634:	08006fe6 	.word	0x08006fe6
 8002638:	20000230 	.word	0x20000230
 800263c:	40011400 	.word	0x40011400
 8002640:	20000010 	.word	0x20000010
 8002644:	200002c0 	.word	0x200002c0

08002648 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == MAX31856_FAULT_PIN)
 8002648:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800264c:	d102      	bne.n	8002654 <HAL_GPIO_EXTI_Callback+0xc>
  {
    /* Toggle LED1 */
    BSP_LED_Toggle(LED1);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe ba80 	b.w	8000b54 <BSP_LED_Toggle>
  }
}
 8002654:	4770      	bx	lr
	...

08002658 <HAL_UART_MspInit>:
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_UART_MspInit+0x7c>)
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2101      	movs	r1, #1
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800265c:	481e      	ldr	r0, [pc, #120]	; (80026d8 <HAL_UART_MspInit+0x80>)
  USARTx_TX_GPIO_CLK_ENABLE();
 800265e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002662:	f042 0204 	orr.w	r2, r2, #4
{
 8002666:	b510      	push	{r4, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 8002668:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800266c:	b088      	sub	sp, #32
  USARTx_TX_GPIO_CLK_ENABLE();
 800266e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002672:	2407      	movs	r4, #7
  USARTx_TX_GPIO_CLK_ENABLE();
 8002674:	f002 0204 	and.w	r2, r2, #4
 8002678:	9200      	str	r2, [sp, #0]
 800267a:	9a00      	ldr	r2, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 800267c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002680:	f042 0204 	orr.w	r2, r2, #4
 8002684:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800268c:	f002 0204 	and.w	r2, r2, #4
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	9a01      	ldr	r2, [sp, #4]
  USARTx_CLK_ENABLE();
 8002694:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002698:	f042 0220 	orr.w	r2, r2, #32
 800269c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80026a0:	2240      	movs	r2, #64	; 0x40
  USARTx_CLK_ENABLE();
 80026a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80026a6:	9407      	str	r4, [sp, #28]
  USARTx_CLK_ENABLE();
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80026bc:	a903      	add	r1, sp, #12
 80026be:	f7fe fb75 	bl	8000dac <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80026c2:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80026c4:	a903      	add	r1, sp, #12
 80026c6:	4804      	ldr	r0, [pc, #16]	; (80026d8 <HAL_UART_MspInit+0x80>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80026c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80026ca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80026cc:	f7fe fb6e 	bl	8000dac <HAL_GPIO_Init>
}
 80026d0:	b008      	add	sp, #32
 80026d2:	bd10      	pop	{r4, pc}
 80026d4:	58024400 	.word	0x58024400
 80026d8:	58020800 	.word	0x58020800

080026dc <HAL_UART_MspDeInit>:
  *          - Revert GPIO configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80026dc:	b508      	push	{r3, lr}
  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_UART_MspDeInit+0x30>)
  USARTx_RELEASE_RESET();

  /*##-2- Disable peripherals and GPIO Clocks #################################*/
  /* Configure USART6 Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 80026e0:	2140      	movs	r1, #64	; 0x40
 80026e2:	480b      	ldr	r0, [pc, #44]	; (8002710 <HAL_UART_MspDeInit+0x34>)
  USARTx_FORCE_RESET();
 80026e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80026e8:	f042 0220 	orr.w	r2, r2, #32
 80026ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  USARTx_RELEASE_RESET();
 80026f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80026f4:	f022 0220 	bic.w	r2, r2, #32
 80026f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 80026fc:	f7fe fc3c 	bl	8000f78 <HAL_GPIO_DeInit>
  /* Configure USART6 Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	4803      	ldr	r0, [pc, #12]	; (8002710 <HAL_UART_MspDeInit+0x34>)
}
 8002704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 8002708:	f7fe bc36 	b.w	8000f78 <HAL_GPIO_DeInit>
 800270c:	58024400 	.word	0x58024400
 8002710:	58020800 	.word	0x58020800

08002714 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002714:	4770      	bx	lr

08002716 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002716:	e7fe      	b.n	8002716 <HardFault_Handler>

08002718 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002718:	e7fe      	b.n	8002718 <MemManage_Handler>

0800271a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler>

0800271c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800271c:	e7fe      	b.n	800271c <UsageFault_Handler>

0800271e <SVC_Handler>:
 800271e:	4770      	bx	lr

08002720 <DebugMon_Handler>:
 8002720:	4770      	bx	lr

08002722 <PendSV_Handler>:
 8002722:	4770      	bx	lr

08002724 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8002724:	f7fe babe 	b.w	8000ca4 <HAL_IncTick>

08002728 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002728:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800272c:	f7fe bcd8 	b.w	80010e0 <HAL_GPIO_EXTI_IRQHandler>

08002730 <USART6_IRQHandler>:
 volatile int rx_tail;

volatile int index_1 = 0;
void USART6_IRQHandler(void)  {
    /* USER CODE BEGIN USART3_IRQn 0 */
	if(rx_head>1023){
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <USART6_IRQHandler+0x24>)
 8002732:	4909      	ldr	r1, [pc, #36]	; (8002758 <USART6_IRQHandler+0x28>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <USART6_IRQHandler+0x2c>)
 800273c:	db01      	blt.n	8002742 <USART6_IRQHandler+0x12>
		rx_head = 0;
 800273e:	2000      	movs	r0, #0
 8002740:	6018      	str	r0, [r3, #0]
		uart6_rx_data_buf[rx_head] = USART6->RDR;
	}
	else{
		uart6_rx_data_buf[rx_head] = USART6->RDR;
 8002742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	540a      	strb	r2, [r1, r0]
	}
	rx_head++;
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	3201      	adds	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	200006dc 	.word	0x200006dc
 8002758:	200002dc 	.word	0x200002dc
 800275c:	40011400 	.word	0x40011400

08002760 <__libc_init_array>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	4d0d      	ldr	r5, [pc, #52]	; (8002798 <__libc_init_array+0x38>)
 8002764:	4c0d      	ldr	r4, [pc, #52]	; (800279c <__libc_init_array+0x3c>)
 8002766:	1b64      	subs	r4, r4, r5
 8002768:	10a4      	asrs	r4, r4, #2
 800276a:	2600      	movs	r6, #0
 800276c:	42a6      	cmp	r6, r4
 800276e:	d109      	bne.n	8002784 <__libc_init_array+0x24>
 8002770:	4d0b      	ldr	r5, [pc, #44]	; (80027a0 <__libc_init_array+0x40>)
 8002772:	4c0c      	ldr	r4, [pc, #48]	; (80027a4 <__libc_init_array+0x44>)
 8002774:	f004 fbe2 	bl	8006f3c <_init>
 8002778:	1b64      	subs	r4, r4, r5
 800277a:	10a4      	asrs	r4, r4, #2
 800277c:	2600      	movs	r6, #0
 800277e:	42a6      	cmp	r6, r4
 8002780:	d105      	bne.n	800278e <__libc_init_array+0x2e>
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f855 3b04 	ldr.w	r3, [r5], #4
 8002788:	4798      	blx	r3
 800278a:	3601      	adds	r6, #1
 800278c:	e7ee      	b.n	800276c <__libc_init_array+0xc>
 800278e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002792:	4798      	blx	r3
 8002794:	3601      	adds	r6, #1
 8002796:	e7f2      	b.n	800277e <__libc_init_array+0x1e>
 8002798:	080074b4 	.word	0x080074b4
 800279c:	080074b4 	.word	0x080074b4
 80027a0:	080074b4 	.word	0x080074b4
 80027a4:	080074b8 	.word	0x080074b8

080027a8 <memset>:
 80027a8:	4402      	add	r2, r0
 80027aa:	4603      	mov	r3, r0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d100      	bne.n	80027b2 <memset+0xa>
 80027b0:	4770      	bx	lr
 80027b2:	f803 1b01 	strb.w	r1, [r3], #1
 80027b6:	e7f9      	b.n	80027ac <memset+0x4>

080027b8 <__cvt>:
 80027b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ba:	ed2d 8b02 	vpush	{d8}
 80027be:	eeb0 8b40 	vmov.f64	d8, d0
 80027c2:	b085      	sub	sp, #20
 80027c4:	4617      	mov	r7, r2
 80027c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80027c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80027ca:	ee18 2a90 	vmov	r2, s17
 80027ce:	f025 0520 	bic.w	r5, r5, #32
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	bfb6      	itet	lt
 80027d6:	222d      	movlt	r2, #45	; 0x2d
 80027d8:	2200      	movge	r2, #0
 80027da:	eeb1 8b40 	vneglt.f64	d8, d0
 80027de:	2d46      	cmp	r5, #70	; 0x46
 80027e0:	460c      	mov	r4, r1
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	d004      	beq.n	80027f0 <__cvt+0x38>
 80027e6:	2d45      	cmp	r5, #69	; 0x45
 80027e8:	d100      	bne.n	80027ec <__cvt+0x34>
 80027ea:	3401      	adds	r4, #1
 80027ec:	2102      	movs	r1, #2
 80027ee:	e000      	b.n	80027f2 <__cvt+0x3a>
 80027f0:	2103      	movs	r1, #3
 80027f2:	ab03      	add	r3, sp, #12
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	ab02      	add	r3, sp, #8
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4622      	mov	r2, r4
 80027fc:	4633      	mov	r3, r6
 80027fe:	eeb0 0b48 	vmov.f64	d0, d8
 8002802:	f001 fd69 	bl	80042d8 <_dtoa_r>
 8002806:	2d47      	cmp	r5, #71	; 0x47
 8002808:	d109      	bne.n	800281e <__cvt+0x66>
 800280a:	07fb      	lsls	r3, r7, #31
 800280c:	d407      	bmi.n	800281e <__cvt+0x66>
 800280e:	9b03      	ldr	r3, [sp, #12]
 8002810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002812:	1a1b      	subs	r3, r3, r0
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	b005      	add	sp, #20
 8002818:	ecbd 8b02 	vpop	{d8}
 800281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281e:	2d46      	cmp	r5, #70	; 0x46
 8002820:	eb00 0204 	add.w	r2, r0, r4
 8002824:	d10c      	bne.n	8002840 <__cvt+0x88>
 8002826:	7803      	ldrb	r3, [r0, #0]
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d107      	bne.n	800283c <__cvt+0x84>
 800282c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	bf1c      	itt	ne
 8002836:	f1c4 0401 	rsbne	r4, r4, #1
 800283a:	6034      	strne	r4, [r6, #0]
 800283c:	6833      	ldr	r3, [r6, #0]
 800283e:	441a      	add	r2, r3
 8002840:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	bf08      	it	eq
 800284a:	9203      	streq	r2, [sp, #12]
 800284c:	2130      	movs	r1, #48	; 0x30
 800284e:	9b03      	ldr	r3, [sp, #12]
 8002850:	4293      	cmp	r3, r2
 8002852:	d2dc      	bcs.n	800280e <__cvt+0x56>
 8002854:	1c5c      	adds	r4, r3, #1
 8002856:	9403      	str	r4, [sp, #12]
 8002858:	7019      	strb	r1, [r3, #0]
 800285a:	e7f8      	b.n	800284e <__cvt+0x96>

0800285c <__exponent>:
 800285c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800285e:	4603      	mov	r3, r0
 8002860:	2900      	cmp	r1, #0
 8002862:	bfb8      	it	lt
 8002864:	4249      	neglt	r1, r1
 8002866:	f803 2b02 	strb.w	r2, [r3], #2
 800286a:	bfb4      	ite	lt
 800286c:	222d      	movlt	r2, #45	; 0x2d
 800286e:	222b      	movge	r2, #43	; 0x2b
 8002870:	2909      	cmp	r1, #9
 8002872:	7042      	strb	r2, [r0, #1]
 8002874:	dd2a      	ble.n	80028cc <__exponent+0x70>
 8002876:	f10d 0407 	add.w	r4, sp, #7
 800287a:	46a4      	mov	ip, r4
 800287c:	270a      	movs	r7, #10
 800287e:	46a6      	mov	lr, r4
 8002880:	460a      	mov	r2, r1
 8002882:	fb91 f6f7 	sdiv	r6, r1, r7
 8002886:	fb07 1516 	mls	r5, r7, r6, r1
 800288a:	3530      	adds	r5, #48	; 0x30
 800288c:	2a63      	cmp	r2, #99	; 0x63
 800288e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002892:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002896:	4631      	mov	r1, r6
 8002898:	dcf1      	bgt.n	800287e <__exponent+0x22>
 800289a:	3130      	adds	r1, #48	; 0x30
 800289c:	f1ae 0502 	sub.w	r5, lr, #2
 80028a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80028a4:	1c44      	adds	r4, r0, #1
 80028a6:	4629      	mov	r1, r5
 80028a8:	4561      	cmp	r1, ip
 80028aa:	d30a      	bcc.n	80028c2 <__exponent+0x66>
 80028ac:	f10d 0209 	add.w	r2, sp, #9
 80028b0:	eba2 020e 	sub.w	r2, r2, lr
 80028b4:	4565      	cmp	r5, ip
 80028b6:	bf88      	it	hi
 80028b8:	2200      	movhi	r2, #0
 80028ba:	4413      	add	r3, r2
 80028bc:	1a18      	subs	r0, r3, r0
 80028be:	b003      	add	sp, #12
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80028ca:	e7ed      	b.n	80028a8 <__exponent+0x4c>
 80028cc:	2330      	movs	r3, #48	; 0x30
 80028ce:	3130      	adds	r1, #48	; 0x30
 80028d0:	7083      	strb	r3, [r0, #2]
 80028d2:	70c1      	strb	r1, [r0, #3]
 80028d4:	1d03      	adds	r3, r0, #4
 80028d6:	e7f1      	b.n	80028bc <__exponent+0x60>

080028d8 <_printf_float>:
 80028d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028dc:	b08b      	sub	sp, #44	; 0x2c
 80028de:	460c      	mov	r4, r1
 80028e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80028e4:	4616      	mov	r6, r2
 80028e6:	461f      	mov	r7, r3
 80028e8:	4605      	mov	r5, r0
 80028ea:	f002 fee1 	bl	80056b0 <_localeconv_r>
 80028ee:	f8d0 b000 	ldr.w	fp, [r0]
 80028f2:	4658      	mov	r0, fp
 80028f4:	f7fd fcf4 	bl	80002e0 <strlen>
 80028f8:	2300      	movs	r3, #0
 80028fa:	9308      	str	r3, [sp, #32]
 80028fc:	f8d8 3000 	ldr.w	r3, [r8]
 8002900:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002904:	6822      	ldr	r2, [r4, #0]
 8002906:	3307      	adds	r3, #7
 8002908:	f023 0307 	bic.w	r3, r3, #7
 800290c:	f103 0108 	add.w	r1, r3, #8
 8002910:	f8c8 1000 	str.w	r1, [r8]
 8002914:	4682      	mov	sl, r0
 8002916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800291a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800291e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8002b80 <_printf_float+0x2a8>
 8002922:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8002926:	eeb0 6bc0 	vabs.f64	d6, d0
 800292a:	eeb4 6b47 	vcmp.f64	d6, d7
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	dd24      	ble.n	800297e <_printf_float+0xa6>
 8002934:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d502      	bpl.n	8002944 <_printf_float+0x6c>
 800293e:	232d      	movs	r3, #45	; 0x2d
 8002940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002944:	4b90      	ldr	r3, [pc, #576]	; (8002b88 <_printf_float+0x2b0>)
 8002946:	4891      	ldr	r0, [pc, #580]	; (8002b8c <_printf_float+0x2b4>)
 8002948:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800294c:	bf94      	ite	ls
 800294e:	4698      	movls	r8, r3
 8002950:	4680      	movhi	r8, r0
 8002952:	2303      	movs	r3, #3
 8002954:	6123      	str	r3, [r4, #16]
 8002956:	f022 0204 	bic.w	r2, r2, #4
 800295a:	2300      	movs	r3, #0
 800295c:	6022      	str	r2, [r4, #0]
 800295e:	9304      	str	r3, [sp, #16]
 8002960:	9700      	str	r7, [sp, #0]
 8002962:	4633      	mov	r3, r6
 8002964:	aa09      	add	r2, sp, #36	; 0x24
 8002966:	4621      	mov	r1, r4
 8002968:	4628      	mov	r0, r5
 800296a:	f000 f9d3 	bl	8002d14 <_printf_common>
 800296e:	3001      	adds	r0, #1
 8002970:	f040 808a 	bne.w	8002a88 <_printf_float+0x1b0>
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	b00b      	add	sp, #44	; 0x2c
 800297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800297e:	eeb4 0b40 	vcmp.f64	d0, d0
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	d709      	bvc.n	800299c <_printf_float+0xc4>
 8002988:	ee10 3a90 	vmov	r3, s1
 800298c:	2b00      	cmp	r3, #0
 800298e:	bfbc      	itt	lt
 8002990:	232d      	movlt	r3, #45	; 0x2d
 8002992:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002996:	487e      	ldr	r0, [pc, #504]	; (8002b90 <_printf_float+0x2b8>)
 8002998:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <_printf_float+0x2bc>)
 800299a:	e7d5      	b.n	8002948 <_printf_float+0x70>
 800299c:	6863      	ldr	r3, [r4, #4]
 800299e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80029a2:	9104      	str	r1, [sp, #16]
 80029a4:	1c59      	adds	r1, r3, #1
 80029a6:	d13c      	bne.n	8002a22 <_printf_float+0x14a>
 80029a8:	2306      	movs	r3, #6
 80029aa:	6063      	str	r3, [r4, #4]
 80029ac:	2300      	movs	r3, #0
 80029ae:	9303      	str	r3, [sp, #12]
 80029b0:	ab08      	add	r3, sp, #32
 80029b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80029b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ba:	ab07      	add	r3, sp, #28
 80029bc:	6861      	ldr	r1, [r4, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	6022      	str	r2, [r4, #0]
 80029c2:	f10d 031b 	add.w	r3, sp, #27
 80029c6:	4628      	mov	r0, r5
 80029c8:	f7ff fef6 	bl	80027b8 <__cvt>
 80029cc:	9b04      	ldr	r3, [sp, #16]
 80029ce:	9907      	ldr	r1, [sp, #28]
 80029d0:	2b47      	cmp	r3, #71	; 0x47
 80029d2:	4680      	mov	r8, r0
 80029d4:	d108      	bne.n	80029e8 <_printf_float+0x110>
 80029d6:	1cc8      	adds	r0, r1, #3
 80029d8:	db02      	blt.n	80029e0 <_printf_float+0x108>
 80029da:	6863      	ldr	r3, [r4, #4]
 80029dc:	4299      	cmp	r1, r3
 80029de:	dd41      	ble.n	8002a64 <_printf_float+0x18c>
 80029e0:	f1a9 0902 	sub.w	r9, r9, #2
 80029e4:	fa5f f989 	uxtb.w	r9, r9
 80029e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80029ec:	d820      	bhi.n	8002a30 <_printf_float+0x158>
 80029ee:	3901      	subs	r1, #1
 80029f0:	464a      	mov	r2, r9
 80029f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80029f6:	9107      	str	r1, [sp, #28]
 80029f8:	f7ff ff30 	bl	800285c <__exponent>
 80029fc:	9a08      	ldr	r2, [sp, #32]
 80029fe:	9004      	str	r0, [sp, #16]
 8002a00:	1813      	adds	r3, r2, r0
 8002a02:	2a01      	cmp	r2, #1
 8002a04:	6123      	str	r3, [r4, #16]
 8002a06:	dc02      	bgt.n	8002a0e <_printf_float+0x136>
 8002a08:	6822      	ldr	r2, [r4, #0]
 8002a0a:	07d2      	lsls	r2, r2, #31
 8002a0c:	d501      	bpl.n	8002a12 <_printf_float+0x13a>
 8002a0e:	3301      	adds	r3, #1
 8002a10:	6123      	str	r3, [r4, #16]
 8002a12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0a2      	beq.n	8002960 <_printf_float+0x88>
 8002a1a:	232d      	movs	r3, #45	; 0x2d
 8002a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a20:	e79e      	b.n	8002960 <_printf_float+0x88>
 8002a22:	9904      	ldr	r1, [sp, #16]
 8002a24:	2947      	cmp	r1, #71	; 0x47
 8002a26:	d1c1      	bne.n	80029ac <_printf_float+0xd4>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1bf      	bne.n	80029ac <_printf_float+0xd4>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e7bc      	b.n	80029aa <_printf_float+0xd2>
 8002a30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002a34:	d118      	bne.n	8002a68 <_printf_float+0x190>
 8002a36:	2900      	cmp	r1, #0
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	dd0b      	ble.n	8002a54 <_printf_float+0x17c>
 8002a3c:	6121      	str	r1, [r4, #16]
 8002a3e:	b913      	cbnz	r3, 8002a46 <_printf_float+0x16e>
 8002a40:	6822      	ldr	r2, [r4, #0]
 8002a42:	07d0      	lsls	r0, r2, #31
 8002a44:	d502      	bpl.n	8002a4c <_printf_float+0x174>
 8002a46:	3301      	adds	r3, #1
 8002a48:	440b      	add	r3, r1
 8002a4a:	6123      	str	r3, [r4, #16]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002a50:	9304      	str	r3, [sp, #16]
 8002a52:	e7de      	b.n	8002a12 <_printf_float+0x13a>
 8002a54:	b913      	cbnz	r3, 8002a5c <_printf_float+0x184>
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	07d2      	lsls	r2, r2, #31
 8002a5a:	d501      	bpl.n	8002a60 <_printf_float+0x188>
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	e7f4      	b.n	8002a4a <_printf_float+0x172>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e7f2      	b.n	8002a4a <_printf_float+0x172>
 8002a64:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002a68:	9b08      	ldr	r3, [sp, #32]
 8002a6a:	4299      	cmp	r1, r3
 8002a6c:	db05      	blt.n	8002a7a <_printf_float+0x1a2>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	6121      	str	r1, [r4, #16]
 8002a72:	07d8      	lsls	r0, r3, #31
 8002a74:	d5ea      	bpl.n	8002a4c <_printf_float+0x174>
 8002a76:	1c4b      	adds	r3, r1, #1
 8002a78:	e7e7      	b.n	8002a4a <_printf_float+0x172>
 8002a7a:	2900      	cmp	r1, #0
 8002a7c:	bfd4      	ite	le
 8002a7e:	f1c1 0202 	rsble	r2, r1, #2
 8002a82:	2201      	movgt	r2, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	e7e0      	b.n	8002a4a <_printf_float+0x172>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	055a      	lsls	r2, r3, #21
 8002a8c:	d407      	bmi.n	8002a9e <_printf_float+0x1c6>
 8002a8e:	6923      	ldr	r3, [r4, #16]
 8002a90:	4642      	mov	r2, r8
 8002a92:	4631      	mov	r1, r6
 8002a94:	4628      	mov	r0, r5
 8002a96:	47b8      	blx	r7
 8002a98:	3001      	adds	r0, #1
 8002a9a:	d12a      	bne.n	8002af2 <_printf_float+0x21a>
 8002a9c:	e76a      	b.n	8002974 <_printf_float+0x9c>
 8002a9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002aa2:	f240 80e2 	bls.w	8002c6a <_printf_float+0x392>
 8002aa6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002aaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d133      	bne.n	8002b1c <_printf_float+0x244>
 8002ab4:	4a38      	ldr	r2, [pc, #224]	; (8002b98 <_printf_float+0x2c0>)
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	4631      	mov	r1, r6
 8002aba:	4628      	mov	r0, r5
 8002abc:	47b8      	blx	r7
 8002abe:	3001      	adds	r0, #1
 8002ac0:	f43f af58 	beq.w	8002974 <_printf_float+0x9c>
 8002ac4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	db02      	blt.n	8002ad2 <_printf_float+0x1fa>
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	07d8      	lsls	r0, r3, #31
 8002ad0:	d50f      	bpl.n	8002af2 <_printf_float+0x21a>
 8002ad2:	4653      	mov	r3, sl
 8002ad4:	465a      	mov	r2, fp
 8002ad6:	4631      	mov	r1, r6
 8002ad8:	4628      	mov	r0, r5
 8002ada:	47b8      	blx	r7
 8002adc:	3001      	adds	r0, #1
 8002ade:	f43f af49 	beq.w	8002974 <_printf_float+0x9c>
 8002ae2:	f04f 0800 	mov.w	r8, #0
 8002ae6:	f104 091a 	add.w	r9, r4, #26
 8002aea:	9b08      	ldr	r3, [sp, #32]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	4543      	cmp	r3, r8
 8002af0:	dc09      	bgt.n	8002b06 <_printf_float+0x22e>
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	079b      	lsls	r3, r3, #30
 8002af6:	f100 8108 	bmi.w	8002d0a <_printf_float+0x432>
 8002afa:	68e0      	ldr	r0, [r4, #12]
 8002afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002afe:	4298      	cmp	r0, r3
 8002b00:	bfb8      	it	lt
 8002b02:	4618      	movlt	r0, r3
 8002b04:	e738      	b.n	8002978 <_printf_float+0xa0>
 8002b06:	2301      	movs	r3, #1
 8002b08:	464a      	mov	r2, r9
 8002b0a:	4631      	mov	r1, r6
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	47b8      	blx	r7
 8002b10:	3001      	adds	r0, #1
 8002b12:	f43f af2f 	beq.w	8002974 <_printf_float+0x9c>
 8002b16:	f108 0801 	add.w	r8, r8, #1
 8002b1a:	e7e6      	b.n	8002aea <_printf_float+0x212>
 8002b1c:	9b07      	ldr	r3, [sp, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	dc3c      	bgt.n	8002b9c <_printf_float+0x2c4>
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <_printf_float+0x2c0>)
 8002b24:	2301      	movs	r3, #1
 8002b26:	4631      	mov	r1, r6
 8002b28:	4628      	mov	r0, r5
 8002b2a:	47b8      	blx	r7
 8002b2c:	3001      	adds	r0, #1
 8002b2e:	f43f af21 	beq.w	8002974 <_printf_float+0x9c>
 8002b32:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	d102      	bne.n	8002b40 <_printf_float+0x268>
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	07d9      	lsls	r1, r3, #31
 8002b3e:	d5d8      	bpl.n	8002af2 <_printf_float+0x21a>
 8002b40:	4653      	mov	r3, sl
 8002b42:	465a      	mov	r2, fp
 8002b44:	4631      	mov	r1, r6
 8002b46:	4628      	mov	r0, r5
 8002b48:	47b8      	blx	r7
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	f43f af12 	beq.w	8002974 <_printf_float+0x9c>
 8002b50:	f04f 0900 	mov.w	r9, #0
 8002b54:	f104 0a1a 	add.w	sl, r4, #26
 8002b58:	9b07      	ldr	r3, [sp, #28]
 8002b5a:	425b      	negs	r3, r3
 8002b5c:	454b      	cmp	r3, r9
 8002b5e:	dc01      	bgt.n	8002b64 <_printf_float+0x28c>
 8002b60:	9b08      	ldr	r3, [sp, #32]
 8002b62:	e795      	b.n	8002a90 <_printf_float+0x1b8>
 8002b64:	2301      	movs	r3, #1
 8002b66:	4652      	mov	r2, sl
 8002b68:	4631      	mov	r1, r6
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	47b8      	blx	r7
 8002b6e:	3001      	adds	r0, #1
 8002b70:	f43f af00 	beq.w	8002974 <_printf_float+0x9c>
 8002b74:	f109 0901 	add.w	r9, r9, #1
 8002b78:	e7ee      	b.n	8002b58 <_printf_float+0x280>
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	ffffffff 	.word	0xffffffff
 8002b84:	7fefffff 	.word	0x7fefffff
 8002b88:	08006ff8 	.word	0x08006ff8
 8002b8c:	08006ffc 	.word	0x08006ffc
 8002b90:	08007004 	.word	0x08007004
 8002b94:	08007000 	.word	0x08007000
 8002b98:	08007008 	.word	0x08007008
 8002b9c:	9a08      	ldr	r2, [sp, #32]
 8002b9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	bfa8      	it	ge
 8002ba4:	461a      	movge	r2, r3
 8002ba6:	2a00      	cmp	r2, #0
 8002ba8:	4691      	mov	r9, r2
 8002baa:	dc38      	bgt.n	8002c1e <_printf_float+0x346>
 8002bac:	2300      	movs	r3, #0
 8002bae:	9305      	str	r3, [sp, #20]
 8002bb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002bb4:	f104 021a 	add.w	r2, r4, #26
 8002bb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bba:	9905      	ldr	r1, [sp, #20]
 8002bbc:	9304      	str	r3, [sp, #16]
 8002bbe:	eba3 0309 	sub.w	r3, r3, r9
 8002bc2:	428b      	cmp	r3, r1
 8002bc4:	dc33      	bgt.n	8002c2e <_printf_float+0x356>
 8002bc6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	db3c      	blt.n	8002c48 <_printf_float+0x370>
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	07da      	lsls	r2, r3, #31
 8002bd2:	d439      	bmi.n	8002c48 <_printf_float+0x370>
 8002bd4:	9a08      	ldr	r2, [sp, #32]
 8002bd6:	9b04      	ldr	r3, [sp, #16]
 8002bd8:	9907      	ldr	r1, [sp, #28]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	eba2 0901 	sub.w	r9, r2, r1
 8002be0:	4599      	cmp	r9, r3
 8002be2:	bfa8      	it	ge
 8002be4:	4699      	movge	r9, r3
 8002be6:	f1b9 0f00 	cmp.w	r9, #0
 8002bea:	dc35      	bgt.n	8002c58 <_printf_float+0x380>
 8002bec:	f04f 0800 	mov.w	r8, #0
 8002bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002bf4:	f104 0a1a 	add.w	sl, r4, #26
 8002bf8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	eba3 0309 	sub.w	r3, r3, r9
 8002c02:	4543      	cmp	r3, r8
 8002c04:	f77f af75 	ble.w	8002af2 <_printf_float+0x21a>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	4652      	mov	r2, sl
 8002c0c:	4631      	mov	r1, r6
 8002c0e:	4628      	mov	r0, r5
 8002c10:	47b8      	blx	r7
 8002c12:	3001      	adds	r0, #1
 8002c14:	f43f aeae 	beq.w	8002974 <_printf_float+0x9c>
 8002c18:	f108 0801 	add.w	r8, r8, #1
 8002c1c:	e7ec      	b.n	8002bf8 <_printf_float+0x320>
 8002c1e:	4613      	mov	r3, r2
 8002c20:	4631      	mov	r1, r6
 8002c22:	4642      	mov	r2, r8
 8002c24:	4628      	mov	r0, r5
 8002c26:	47b8      	blx	r7
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d1bf      	bne.n	8002bac <_printf_float+0x2d4>
 8002c2c:	e6a2      	b.n	8002974 <_printf_float+0x9c>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4631      	mov	r1, r6
 8002c32:	4628      	mov	r0, r5
 8002c34:	9204      	str	r2, [sp, #16]
 8002c36:	47b8      	blx	r7
 8002c38:	3001      	adds	r0, #1
 8002c3a:	f43f ae9b 	beq.w	8002974 <_printf_float+0x9c>
 8002c3e:	9b05      	ldr	r3, [sp, #20]
 8002c40:	9a04      	ldr	r2, [sp, #16]
 8002c42:	3301      	adds	r3, #1
 8002c44:	9305      	str	r3, [sp, #20]
 8002c46:	e7b7      	b.n	8002bb8 <_printf_float+0x2e0>
 8002c48:	4653      	mov	r3, sl
 8002c4a:	465a      	mov	r2, fp
 8002c4c:	4631      	mov	r1, r6
 8002c4e:	4628      	mov	r0, r5
 8002c50:	47b8      	blx	r7
 8002c52:	3001      	adds	r0, #1
 8002c54:	d1be      	bne.n	8002bd4 <_printf_float+0x2fc>
 8002c56:	e68d      	b.n	8002974 <_printf_float+0x9c>
 8002c58:	9a04      	ldr	r2, [sp, #16]
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	4442      	add	r2, r8
 8002c5e:	4631      	mov	r1, r6
 8002c60:	4628      	mov	r0, r5
 8002c62:	47b8      	blx	r7
 8002c64:	3001      	adds	r0, #1
 8002c66:	d1c1      	bne.n	8002bec <_printf_float+0x314>
 8002c68:	e684      	b.n	8002974 <_printf_float+0x9c>
 8002c6a:	9a08      	ldr	r2, [sp, #32]
 8002c6c:	2a01      	cmp	r2, #1
 8002c6e:	dc01      	bgt.n	8002c74 <_printf_float+0x39c>
 8002c70:	07db      	lsls	r3, r3, #31
 8002c72:	d537      	bpl.n	8002ce4 <_printf_float+0x40c>
 8002c74:	2301      	movs	r3, #1
 8002c76:	4642      	mov	r2, r8
 8002c78:	4631      	mov	r1, r6
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	47b8      	blx	r7
 8002c7e:	3001      	adds	r0, #1
 8002c80:	f43f ae78 	beq.w	8002974 <_printf_float+0x9c>
 8002c84:	4653      	mov	r3, sl
 8002c86:	465a      	mov	r2, fp
 8002c88:	4631      	mov	r1, r6
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	47b8      	blx	r7
 8002c8e:	3001      	adds	r0, #1
 8002c90:	f43f ae70 	beq.w	8002974 <_printf_float+0x9c>
 8002c94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002c98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	d01b      	beq.n	8002cda <_printf_float+0x402>
 8002ca2:	9b08      	ldr	r3, [sp, #32]
 8002ca4:	f108 0201 	add.w	r2, r8, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	4631      	mov	r1, r6
 8002cac:	4628      	mov	r0, r5
 8002cae:	47b8      	blx	r7
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	d10e      	bne.n	8002cd2 <_printf_float+0x3fa>
 8002cb4:	e65e      	b.n	8002974 <_printf_float+0x9c>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	464a      	mov	r2, r9
 8002cba:	4631      	mov	r1, r6
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	47b8      	blx	r7
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	f43f ae57 	beq.w	8002974 <_printf_float+0x9c>
 8002cc6:	f108 0801 	add.w	r8, r8, #1
 8002cca:	9b08      	ldr	r3, [sp, #32]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	4543      	cmp	r3, r8
 8002cd0:	dcf1      	bgt.n	8002cb6 <_printf_float+0x3de>
 8002cd2:	9b04      	ldr	r3, [sp, #16]
 8002cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002cd8:	e6db      	b.n	8002a92 <_printf_float+0x1ba>
 8002cda:	f04f 0800 	mov.w	r8, #0
 8002cde:	f104 091a 	add.w	r9, r4, #26
 8002ce2:	e7f2      	b.n	8002cca <_printf_float+0x3f2>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4642      	mov	r2, r8
 8002ce8:	e7df      	b.n	8002caa <_printf_float+0x3d2>
 8002cea:	2301      	movs	r3, #1
 8002cec:	464a      	mov	r2, r9
 8002cee:	4631      	mov	r1, r6
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	47b8      	blx	r7
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	f43f ae3d 	beq.w	8002974 <_printf_float+0x9c>
 8002cfa:	f108 0801 	add.w	r8, r8, #1
 8002cfe:	68e3      	ldr	r3, [r4, #12]
 8002d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d02:	1a5b      	subs	r3, r3, r1
 8002d04:	4543      	cmp	r3, r8
 8002d06:	dcf0      	bgt.n	8002cea <_printf_float+0x412>
 8002d08:	e6f7      	b.n	8002afa <_printf_float+0x222>
 8002d0a:	f04f 0800 	mov.w	r8, #0
 8002d0e:	f104 0919 	add.w	r9, r4, #25
 8002d12:	e7f4      	b.n	8002cfe <_printf_float+0x426>

08002d14 <_printf_common>:
 8002d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d18:	4616      	mov	r6, r2
 8002d1a:	4699      	mov	r9, r3
 8002d1c:	688a      	ldr	r2, [r1, #8]
 8002d1e:	690b      	ldr	r3, [r1, #16]
 8002d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bfb8      	it	lt
 8002d28:	4613      	movlt	r3, r2
 8002d2a:	6033      	str	r3, [r6, #0]
 8002d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d30:	4607      	mov	r7, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	b10a      	cbz	r2, 8002d3a <_printf_common+0x26>
 8002d36:	3301      	adds	r3, #1
 8002d38:	6033      	str	r3, [r6, #0]
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	0699      	lsls	r1, r3, #26
 8002d3e:	bf42      	ittt	mi
 8002d40:	6833      	ldrmi	r3, [r6, #0]
 8002d42:	3302      	addmi	r3, #2
 8002d44:	6033      	strmi	r3, [r6, #0]
 8002d46:	6825      	ldr	r5, [r4, #0]
 8002d48:	f015 0506 	ands.w	r5, r5, #6
 8002d4c:	d106      	bne.n	8002d5c <_printf_common+0x48>
 8002d4e:	f104 0a19 	add.w	sl, r4, #25
 8002d52:	68e3      	ldr	r3, [r4, #12]
 8002d54:	6832      	ldr	r2, [r6, #0]
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	42ab      	cmp	r3, r5
 8002d5a:	dc26      	bgt.n	8002daa <_printf_common+0x96>
 8002d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d60:	1e13      	subs	r3, r2, #0
 8002d62:	6822      	ldr	r2, [r4, #0]
 8002d64:	bf18      	it	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	0692      	lsls	r2, r2, #26
 8002d6a:	d42b      	bmi.n	8002dc4 <_printf_common+0xb0>
 8002d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d70:	4649      	mov	r1, r9
 8002d72:	4638      	mov	r0, r7
 8002d74:	47c0      	blx	r8
 8002d76:	3001      	adds	r0, #1
 8002d78:	d01e      	beq.n	8002db8 <_printf_common+0xa4>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	68e5      	ldr	r5, [r4, #12]
 8002d7e:	6832      	ldr	r2, [r6, #0]
 8002d80:	f003 0306 	and.w	r3, r3, #6
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	bf08      	it	eq
 8002d88:	1aad      	subeq	r5, r5, r2
 8002d8a:	68a3      	ldr	r3, [r4, #8]
 8002d8c:	6922      	ldr	r2, [r4, #16]
 8002d8e:	bf0c      	ite	eq
 8002d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d94:	2500      	movne	r5, #0
 8002d96:	4293      	cmp	r3, r2
 8002d98:	bfc4      	itt	gt
 8002d9a:	1a9b      	subgt	r3, r3, r2
 8002d9c:	18ed      	addgt	r5, r5, r3
 8002d9e:	2600      	movs	r6, #0
 8002da0:	341a      	adds	r4, #26
 8002da2:	42b5      	cmp	r5, r6
 8002da4:	d11a      	bne.n	8002ddc <_printf_common+0xc8>
 8002da6:	2000      	movs	r0, #0
 8002da8:	e008      	b.n	8002dbc <_printf_common+0xa8>
 8002daa:	2301      	movs	r3, #1
 8002dac:	4652      	mov	r2, sl
 8002dae:	4649      	mov	r1, r9
 8002db0:	4638      	mov	r0, r7
 8002db2:	47c0      	blx	r8
 8002db4:	3001      	adds	r0, #1
 8002db6:	d103      	bne.n	8002dc0 <_printf_common+0xac>
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	e7c6      	b.n	8002d52 <_printf_common+0x3e>
 8002dc4:	18e1      	adds	r1, r4, r3
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	2030      	movs	r0, #48	; 0x30
 8002dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dce:	4422      	add	r2, r4
 8002dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dd8:	3302      	adds	r3, #2
 8002dda:	e7c7      	b.n	8002d6c <_printf_common+0x58>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	4622      	mov	r2, r4
 8002de0:	4649      	mov	r1, r9
 8002de2:	4638      	mov	r0, r7
 8002de4:	47c0      	blx	r8
 8002de6:	3001      	adds	r0, #1
 8002de8:	d0e6      	beq.n	8002db8 <_printf_common+0xa4>
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7d9      	b.n	8002da2 <_printf_common+0x8e>
	...

08002df0 <_printf_i>:
 8002df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002df4:	460c      	mov	r4, r1
 8002df6:	4691      	mov	r9, r2
 8002df8:	7e27      	ldrb	r7, [r4, #24]
 8002dfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002dfc:	2f78      	cmp	r7, #120	; 0x78
 8002dfe:	4680      	mov	r8, r0
 8002e00:	469a      	mov	sl, r3
 8002e02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e06:	d807      	bhi.n	8002e18 <_printf_i+0x28>
 8002e08:	2f62      	cmp	r7, #98	; 0x62
 8002e0a:	d80a      	bhi.n	8002e22 <_printf_i+0x32>
 8002e0c:	2f00      	cmp	r7, #0
 8002e0e:	f000 80d8 	beq.w	8002fc2 <_printf_i+0x1d2>
 8002e12:	2f58      	cmp	r7, #88	; 0x58
 8002e14:	f000 80a3 	beq.w	8002f5e <_printf_i+0x16e>
 8002e18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e20:	e03a      	b.n	8002e98 <_printf_i+0xa8>
 8002e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e26:	2b15      	cmp	r3, #21
 8002e28:	d8f6      	bhi.n	8002e18 <_printf_i+0x28>
 8002e2a:	a001      	add	r0, pc, #4	; (adr r0, 8002e30 <_printf_i+0x40>)
 8002e2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e30:	08002e89 	.word	0x08002e89
 8002e34:	08002e9d 	.word	0x08002e9d
 8002e38:	08002e19 	.word	0x08002e19
 8002e3c:	08002e19 	.word	0x08002e19
 8002e40:	08002e19 	.word	0x08002e19
 8002e44:	08002e19 	.word	0x08002e19
 8002e48:	08002e9d 	.word	0x08002e9d
 8002e4c:	08002e19 	.word	0x08002e19
 8002e50:	08002e19 	.word	0x08002e19
 8002e54:	08002e19 	.word	0x08002e19
 8002e58:	08002e19 	.word	0x08002e19
 8002e5c:	08002fa9 	.word	0x08002fa9
 8002e60:	08002ecd 	.word	0x08002ecd
 8002e64:	08002f8b 	.word	0x08002f8b
 8002e68:	08002e19 	.word	0x08002e19
 8002e6c:	08002e19 	.word	0x08002e19
 8002e70:	08002fcb 	.word	0x08002fcb
 8002e74:	08002e19 	.word	0x08002e19
 8002e78:	08002ecd 	.word	0x08002ecd
 8002e7c:	08002e19 	.word	0x08002e19
 8002e80:	08002e19 	.word	0x08002e19
 8002e84:	08002f93 	.word	0x08002f93
 8002e88:	680b      	ldr	r3, [r1, #0]
 8002e8a:	1d1a      	adds	r2, r3, #4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	600a      	str	r2, [r1, #0]
 8002e90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0a3      	b.n	8002fe4 <_printf_i+0x1f4>
 8002e9c:	6825      	ldr	r5, [r4, #0]
 8002e9e:	6808      	ldr	r0, [r1, #0]
 8002ea0:	062e      	lsls	r6, r5, #24
 8002ea2:	f100 0304 	add.w	r3, r0, #4
 8002ea6:	d50a      	bpl.n	8002ebe <_printf_i+0xce>
 8002ea8:	6805      	ldr	r5, [r0, #0]
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	2d00      	cmp	r5, #0
 8002eae:	da03      	bge.n	8002eb8 <_printf_i+0xc8>
 8002eb0:	232d      	movs	r3, #45	; 0x2d
 8002eb2:	426d      	negs	r5, r5
 8002eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eb8:	485e      	ldr	r0, [pc, #376]	; (8003034 <_printf_i+0x244>)
 8002eba:	230a      	movs	r3, #10
 8002ebc:	e019      	b.n	8002ef2 <_printf_i+0x102>
 8002ebe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ec2:	6805      	ldr	r5, [r0, #0]
 8002ec4:	600b      	str	r3, [r1, #0]
 8002ec6:	bf18      	it	ne
 8002ec8:	b22d      	sxthne	r5, r5
 8002eca:	e7ef      	b.n	8002eac <_printf_i+0xbc>
 8002ecc:	680b      	ldr	r3, [r1, #0]
 8002ece:	6825      	ldr	r5, [r4, #0]
 8002ed0:	1d18      	adds	r0, r3, #4
 8002ed2:	6008      	str	r0, [r1, #0]
 8002ed4:	0628      	lsls	r0, r5, #24
 8002ed6:	d501      	bpl.n	8002edc <_printf_i+0xec>
 8002ed8:	681d      	ldr	r5, [r3, #0]
 8002eda:	e002      	b.n	8002ee2 <_printf_i+0xf2>
 8002edc:	0669      	lsls	r1, r5, #25
 8002ede:	d5fb      	bpl.n	8002ed8 <_printf_i+0xe8>
 8002ee0:	881d      	ldrh	r5, [r3, #0]
 8002ee2:	4854      	ldr	r0, [pc, #336]	; (8003034 <_printf_i+0x244>)
 8002ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2308      	moveq	r3, #8
 8002eea:	230a      	movne	r3, #10
 8002eec:	2100      	movs	r1, #0
 8002eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ef2:	6866      	ldr	r6, [r4, #4]
 8002ef4:	60a6      	str	r6, [r4, #8]
 8002ef6:	2e00      	cmp	r6, #0
 8002ef8:	bfa2      	ittt	ge
 8002efa:	6821      	ldrge	r1, [r4, #0]
 8002efc:	f021 0104 	bicge.w	r1, r1, #4
 8002f00:	6021      	strge	r1, [r4, #0]
 8002f02:	b90d      	cbnz	r5, 8002f08 <_printf_i+0x118>
 8002f04:	2e00      	cmp	r6, #0
 8002f06:	d04d      	beq.n	8002fa4 <_printf_i+0x1b4>
 8002f08:	4616      	mov	r6, r2
 8002f0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f0e:	fb03 5711 	mls	r7, r3, r1, r5
 8002f12:	5dc7      	ldrb	r7, [r0, r7]
 8002f14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f18:	462f      	mov	r7, r5
 8002f1a:	42bb      	cmp	r3, r7
 8002f1c:	460d      	mov	r5, r1
 8002f1e:	d9f4      	bls.n	8002f0a <_printf_i+0x11a>
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d10b      	bne.n	8002f3c <_printf_i+0x14c>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	07df      	lsls	r7, r3, #31
 8002f28:	d508      	bpl.n	8002f3c <_printf_i+0x14c>
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	6861      	ldr	r1, [r4, #4]
 8002f2e:	4299      	cmp	r1, r3
 8002f30:	bfde      	ittt	le
 8002f32:	2330      	movle	r3, #48	; 0x30
 8002f34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f3c:	1b92      	subs	r2, r2, r6
 8002f3e:	6122      	str	r2, [r4, #16]
 8002f40:	f8cd a000 	str.w	sl, [sp]
 8002f44:	464b      	mov	r3, r9
 8002f46:	aa03      	add	r2, sp, #12
 8002f48:	4621      	mov	r1, r4
 8002f4a:	4640      	mov	r0, r8
 8002f4c:	f7ff fee2 	bl	8002d14 <_printf_common>
 8002f50:	3001      	adds	r0, #1
 8002f52:	d14c      	bne.n	8002fee <_printf_i+0x1fe>
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	b004      	add	sp, #16
 8002f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f5e:	4835      	ldr	r0, [pc, #212]	; (8003034 <_printf_i+0x244>)
 8002f60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	680e      	ldr	r6, [r1, #0]
 8002f68:	061f      	lsls	r7, r3, #24
 8002f6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f6e:	600e      	str	r6, [r1, #0]
 8002f70:	d514      	bpl.n	8002f9c <_printf_i+0x1ac>
 8002f72:	07d9      	lsls	r1, r3, #31
 8002f74:	bf44      	itt	mi
 8002f76:	f043 0320 	orrmi.w	r3, r3, #32
 8002f7a:	6023      	strmi	r3, [r4, #0]
 8002f7c:	b91d      	cbnz	r5, 8002f86 <_printf_i+0x196>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	f023 0320 	bic.w	r3, r3, #32
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	2310      	movs	r3, #16
 8002f88:	e7b0      	b.n	8002eec <_printf_i+0xfc>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	f043 0320 	orr.w	r3, r3, #32
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	2378      	movs	r3, #120	; 0x78
 8002f94:	4828      	ldr	r0, [pc, #160]	; (8003038 <_printf_i+0x248>)
 8002f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f9a:	e7e3      	b.n	8002f64 <_printf_i+0x174>
 8002f9c:	065e      	lsls	r6, r3, #25
 8002f9e:	bf48      	it	mi
 8002fa0:	b2ad      	uxthmi	r5, r5
 8002fa2:	e7e6      	b.n	8002f72 <_printf_i+0x182>
 8002fa4:	4616      	mov	r6, r2
 8002fa6:	e7bb      	b.n	8002f20 <_printf_i+0x130>
 8002fa8:	680b      	ldr	r3, [r1, #0]
 8002faa:	6826      	ldr	r6, [r4, #0]
 8002fac:	6960      	ldr	r0, [r4, #20]
 8002fae:	1d1d      	adds	r5, r3, #4
 8002fb0:	600d      	str	r5, [r1, #0]
 8002fb2:	0635      	lsls	r5, r6, #24
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	d501      	bpl.n	8002fbc <_printf_i+0x1cc>
 8002fb8:	6018      	str	r0, [r3, #0]
 8002fba:	e002      	b.n	8002fc2 <_printf_i+0x1d2>
 8002fbc:	0671      	lsls	r1, r6, #25
 8002fbe:	d5fb      	bpl.n	8002fb8 <_printf_i+0x1c8>
 8002fc0:	8018      	strh	r0, [r3, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	6123      	str	r3, [r4, #16]
 8002fc6:	4616      	mov	r6, r2
 8002fc8:	e7ba      	b.n	8002f40 <_printf_i+0x150>
 8002fca:	680b      	ldr	r3, [r1, #0]
 8002fcc:	1d1a      	adds	r2, r3, #4
 8002fce:	600a      	str	r2, [r1, #0]
 8002fd0:	681e      	ldr	r6, [r3, #0]
 8002fd2:	6862      	ldr	r2, [r4, #4]
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f7fd f98a 	bl	80002f0 <memchr>
 8002fdc:	b108      	cbz	r0, 8002fe2 <_printf_i+0x1f2>
 8002fde:	1b80      	subs	r0, r0, r6
 8002fe0:	6060      	str	r0, [r4, #4]
 8002fe2:	6863      	ldr	r3, [r4, #4]
 8002fe4:	6123      	str	r3, [r4, #16]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fec:	e7a8      	b.n	8002f40 <_printf_i+0x150>
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	4632      	mov	r2, r6
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	47d0      	blx	sl
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	d0ab      	beq.n	8002f54 <_printf_i+0x164>
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	079b      	lsls	r3, r3, #30
 8003000:	d413      	bmi.n	800302a <_printf_i+0x23a>
 8003002:	68e0      	ldr	r0, [r4, #12]
 8003004:	9b03      	ldr	r3, [sp, #12]
 8003006:	4298      	cmp	r0, r3
 8003008:	bfb8      	it	lt
 800300a:	4618      	movlt	r0, r3
 800300c:	e7a4      	b.n	8002f58 <_printf_i+0x168>
 800300e:	2301      	movs	r3, #1
 8003010:	4632      	mov	r2, r6
 8003012:	4649      	mov	r1, r9
 8003014:	4640      	mov	r0, r8
 8003016:	47d0      	blx	sl
 8003018:	3001      	adds	r0, #1
 800301a:	d09b      	beq.n	8002f54 <_printf_i+0x164>
 800301c:	3501      	adds	r5, #1
 800301e:	68e3      	ldr	r3, [r4, #12]
 8003020:	9903      	ldr	r1, [sp, #12]
 8003022:	1a5b      	subs	r3, r3, r1
 8003024:	42ab      	cmp	r3, r5
 8003026:	dcf2      	bgt.n	800300e <_printf_i+0x21e>
 8003028:	e7eb      	b.n	8003002 <_printf_i+0x212>
 800302a:	2500      	movs	r5, #0
 800302c:	f104 0619 	add.w	r6, r4, #25
 8003030:	e7f5      	b.n	800301e <_printf_i+0x22e>
 8003032:	bf00      	nop
 8003034:	0800700a 	.word	0x0800700a
 8003038:	0800701b 	.word	0x0800701b

0800303c <_scanf_float>:
 800303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003040:	b087      	sub	sp, #28
 8003042:	4617      	mov	r7, r2
 8003044:	9303      	str	r3, [sp, #12]
 8003046:	688b      	ldr	r3, [r1, #8]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800304e:	bf83      	ittte	hi
 8003050:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003054:	195b      	addhi	r3, r3, r5
 8003056:	9302      	strhi	r3, [sp, #8]
 8003058:	2300      	movls	r3, #0
 800305a:	bf86      	itte	hi
 800305c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003060:	608b      	strhi	r3, [r1, #8]
 8003062:	9302      	strls	r3, [sp, #8]
 8003064:	680b      	ldr	r3, [r1, #0]
 8003066:	468b      	mov	fp, r1
 8003068:	2500      	movs	r5, #0
 800306a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800306e:	f84b 3b1c 	str.w	r3, [fp], #28
 8003072:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003076:	4680      	mov	r8, r0
 8003078:	460c      	mov	r4, r1
 800307a:	465e      	mov	r6, fp
 800307c:	46aa      	mov	sl, r5
 800307e:	46a9      	mov	r9, r5
 8003080:	9501      	str	r5, [sp, #4]
 8003082:	68a2      	ldr	r2, [r4, #8]
 8003084:	b152      	cbz	r2, 800309c <_scanf_float+0x60>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b4e      	cmp	r3, #78	; 0x4e
 800308c:	d864      	bhi.n	8003158 <_scanf_float+0x11c>
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d83c      	bhi.n	800310c <_scanf_float+0xd0>
 8003092:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003096:	b2c8      	uxtb	r0, r1
 8003098:	280e      	cmp	r0, #14
 800309a:	d93a      	bls.n	8003112 <_scanf_float+0xd6>
 800309c:	f1b9 0f00 	cmp.w	r9, #0
 80030a0:	d003      	beq.n	80030aa <_scanf_float+0x6e>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80030ae:	f1ba 0f01 	cmp.w	sl, #1
 80030b2:	f200 8113 	bhi.w	80032dc <_scanf_float+0x2a0>
 80030b6:	455e      	cmp	r6, fp
 80030b8:	f200 8105 	bhi.w	80032c6 <_scanf_float+0x28a>
 80030bc:	2501      	movs	r5, #1
 80030be:	4628      	mov	r0, r5
 80030c0:	b007      	add	sp, #28
 80030c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80030ca:	2a0d      	cmp	r2, #13
 80030cc:	d8e6      	bhi.n	800309c <_scanf_float+0x60>
 80030ce:	a101      	add	r1, pc, #4	; (adr r1, 80030d4 <_scanf_float+0x98>)
 80030d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80030d4:	08003213 	.word	0x08003213
 80030d8:	0800309d 	.word	0x0800309d
 80030dc:	0800309d 	.word	0x0800309d
 80030e0:	0800309d 	.word	0x0800309d
 80030e4:	08003273 	.word	0x08003273
 80030e8:	0800324b 	.word	0x0800324b
 80030ec:	0800309d 	.word	0x0800309d
 80030f0:	0800309d 	.word	0x0800309d
 80030f4:	08003221 	.word	0x08003221
 80030f8:	0800309d 	.word	0x0800309d
 80030fc:	0800309d 	.word	0x0800309d
 8003100:	0800309d 	.word	0x0800309d
 8003104:	0800309d 	.word	0x0800309d
 8003108:	080031d9 	.word	0x080031d9
 800310c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003110:	e7db      	b.n	80030ca <_scanf_float+0x8e>
 8003112:	290e      	cmp	r1, #14
 8003114:	d8c2      	bhi.n	800309c <_scanf_float+0x60>
 8003116:	a001      	add	r0, pc, #4	; (adr r0, 800311c <_scanf_float+0xe0>)
 8003118:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800311c:	080031cb 	.word	0x080031cb
 8003120:	0800309d 	.word	0x0800309d
 8003124:	080031cb 	.word	0x080031cb
 8003128:	0800325f 	.word	0x0800325f
 800312c:	0800309d 	.word	0x0800309d
 8003130:	08003179 	.word	0x08003179
 8003134:	080031b5 	.word	0x080031b5
 8003138:	080031b5 	.word	0x080031b5
 800313c:	080031b5 	.word	0x080031b5
 8003140:	080031b5 	.word	0x080031b5
 8003144:	080031b5 	.word	0x080031b5
 8003148:	080031b5 	.word	0x080031b5
 800314c:	080031b5 	.word	0x080031b5
 8003150:	080031b5 	.word	0x080031b5
 8003154:	080031b5 	.word	0x080031b5
 8003158:	2b6e      	cmp	r3, #110	; 0x6e
 800315a:	d809      	bhi.n	8003170 <_scanf_float+0x134>
 800315c:	2b60      	cmp	r3, #96	; 0x60
 800315e:	d8b2      	bhi.n	80030c6 <_scanf_float+0x8a>
 8003160:	2b54      	cmp	r3, #84	; 0x54
 8003162:	d077      	beq.n	8003254 <_scanf_float+0x218>
 8003164:	2b59      	cmp	r3, #89	; 0x59
 8003166:	d199      	bne.n	800309c <_scanf_float+0x60>
 8003168:	2d07      	cmp	r5, #7
 800316a:	d197      	bne.n	800309c <_scanf_float+0x60>
 800316c:	2508      	movs	r5, #8
 800316e:	e029      	b.n	80031c4 <_scanf_float+0x188>
 8003170:	2b74      	cmp	r3, #116	; 0x74
 8003172:	d06f      	beq.n	8003254 <_scanf_float+0x218>
 8003174:	2b79      	cmp	r3, #121	; 0x79
 8003176:	e7f6      	b.n	8003166 <_scanf_float+0x12a>
 8003178:	6821      	ldr	r1, [r4, #0]
 800317a:	05c8      	lsls	r0, r1, #23
 800317c:	d51a      	bpl.n	80031b4 <_scanf_float+0x178>
 800317e:	9b02      	ldr	r3, [sp, #8]
 8003180:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003184:	6021      	str	r1, [r4, #0]
 8003186:	f109 0901 	add.w	r9, r9, #1
 800318a:	b11b      	cbz	r3, 8003194 <_scanf_float+0x158>
 800318c:	3b01      	subs	r3, #1
 800318e:	3201      	adds	r2, #1
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	60a2      	str	r2, [r4, #8]
 8003194:	68a3      	ldr	r3, [r4, #8]
 8003196:	3b01      	subs	r3, #1
 8003198:	60a3      	str	r3, [r4, #8]
 800319a:	6923      	ldr	r3, [r4, #16]
 800319c:	3301      	adds	r3, #1
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	f340 8084 	ble.w	80032b4 <_scanf_float+0x278>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	e766      	b.n	8003082 <_scanf_float+0x46>
 80031b4:	eb1a 0f05 	cmn.w	sl, r5
 80031b8:	f47f af70 	bne.w	800309c <_scanf_float+0x60>
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	f806 3b01 	strb.w	r3, [r6], #1
 80031c8:	e7e4      	b.n	8003194 <_scanf_float+0x158>
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	0610      	lsls	r0, r2, #24
 80031ce:	f57f af65 	bpl.w	800309c <_scanf_float+0x60>
 80031d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d6:	e7f4      	b.n	80031c2 <_scanf_float+0x186>
 80031d8:	f1ba 0f00 	cmp.w	sl, #0
 80031dc:	d10e      	bne.n	80031fc <_scanf_float+0x1c0>
 80031de:	f1b9 0f00 	cmp.w	r9, #0
 80031e2:	d10e      	bne.n	8003202 <_scanf_float+0x1c6>
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80031ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80031ee:	d108      	bne.n	8003202 <_scanf_float+0x1c6>
 80031f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80031f4:	6022      	str	r2, [r4, #0]
 80031f6:	f04f 0a01 	mov.w	sl, #1
 80031fa:	e7e3      	b.n	80031c4 <_scanf_float+0x188>
 80031fc:	f1ba 0f02 	cmp.w	sl, #2
 8003200:	d055      	beq.n	80032ae <_scanf_float+0x272>
 8003202:	2d01      	cmp	r5, #1
 8003204:	d002      	beq.n	800320c <_scanf_float+0x1d0>
 8003206:	2d04      	cmp	r5, #4
 8003208:	f47f af48 	bne.w	800309c <_scanf_float+0x60>
 800320c:	3501      	adds	r5, #1
 800320e:	b2ed      	uxtb	r5, r5
 8003210:	e7d8      	b.n	80031c4 <_scanf_float+0x188>
 8003212:	f1ba 0f01 	cmp.w	sl, #1
 8003216:	f47f af41 	bne.w	800309c <_scanf_float+0x60>
 800321a:	f04f 0a02 	mov.w	sl, #2
 800321e:	e7d1      	b.n	80031c4 <_scanf_float+0x188>
 8003220:	b97d      	cbnz	r5, 8003242 <_scanf_float+0x206>
 8003222:	f1b9 0f00 	cmp.w	r9, #0
 8003226:	f47f af3c 	bne.w	80030a2 <_scanf_float+0x66>
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003230:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003234:	f47f af39 	bne.w	80030aa <_scanf_float+0x6e>
 8003238:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800323c:	6022      	str	r2, [r4, #0]
 800323e:	2501      	movs	r5, #1
 8003240:	e7c0      	b.n	80031c4 <_scanf_float+0x188>
 8003242:	2d03      	cmp	r5, #3
 8003244:	d0e2      	beq.n	800320c <_scanf_float+0x1d0>
 8003246:	2d05      	cmp	r5, #5
 8003248:	e7de      	b.n	8003208 <_scanf_float+0x1cc>
 800324a:	2d02      	cmp	r5, #2
 800324c:	f47f af26 	bne.w	800309c <_scanf_float+0x60>
 8003250:	2503      	movs	r5, #3
 8003252:	e7b7      	b.n	80031c4 <_scanf_float+0x188>
 8003254:	2d06      	cmp	r5, #6
 8003256:	f47f af21 	bne.w	800309c <_scanf_float+0x60>
 800325a:	2507      	movs	r5, #7
 800325c:	e7b2      	b.n	80031c4 <_scanf_float+0x188>
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	0591      	lsls	r1, r2, #22
 8003262:	f57f af1b 	bpl.w	800309c <_scanf_float+0x60>
 8003266:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800326a:	6022      	str	r2, [r4, #0]
 800326c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003270:	e7a8      	b.n	80031c4 <_scanf_float+0x188>
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003278:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800327c:	d006      	beq.n	800328c <_scanf_float+0x250>
 800327e:	0550      	lsls	r0, r2, #21
 8003280:	f57f af0c 	bpl.w	800309c <_scanf_float+0x60>
 8003284:	f1b9 0f00 	cmp.w	r9, #0
 8003288:	f43f af0f 	beq.w	80030aa <_scanf_float+0x6e>
 800328c:	0591      	lsls	r1, r2, #22
 800328e:	bf58      	it	pl
 8003290:	9901      	ldrpl	r1, [sp, #4]
 8003292:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003296:	bf58      	it	pl
 8003298:	eba9 0101 	subpl.w	r1, r9, r1
 800329c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80032a0:	bf58      	it	pl
 80032a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80032a6:	6022      	str	r2, [r4, #0]
 80032a8:	f04f 0900 	mov.w	r9, #0
 80032ac:	e78a      	b.n	80031c4 <_scanf_float+0x188>
 80032ae:	f04f 0a03 	mov.w	sl, #3
 80032b2:	e787      	b.n	80031c4 <_scanf_float+0x188>
 80032b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80032b8:	4639      	mov	r1, r7
 80032ba:	4640      	mov	r0, r8
 80032bc:	4798      	blx	r3
 80032be:	2800      	cmp	r0, #0
 80032c0:	f43f aedf 	beq.w	8003082 <_scanf_float+0x46>
 80032c4:	e6ea      	b.n	800309c <_scanf_float+0x60>
 80032c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80032ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80032ce:	463a      	mov	r2, r7
 80032d0:	4640      	mov	r0, r8
 80032d2:	4798      	blx	r3
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	e6ec      	b.n	80030b6 <_scanf_float+0x7a>
 80032dc:	1e6b      	subs	r3, r5, #1
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d825      	bhi.n	800332e <_scanf_float+0x2f2>
 80032e2:	2d02      	cmp	r5, #2
 80032e4:	d836      	bhi.n	8003354 <_scanf_float+0x318>
 80032e6:	455e      	cmp	r6, fp
 80032e8:	f67f aee8 	bls.w	80030bc <_scanf_float+0x80>
 80032ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80032f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80032f4:	463a      	mov	r2, r7
 80032f6:	4640      	mov	r0, r8
 80032f8:	4798      	blx	r3
 80032fa:	6923      	ldr	r3, [r4, #16]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	6123      	str	r3, [r4, #16]
 8003300:	e7f1      	b.n	80032e6 <_scanf_float+0x2aa>
 8003302:	9802      	ldr	r0, [sp, #8]
 8003304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003308:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800330c:	9002      	str	r0, [sp, #8]
 800330e:	463a      	mov	r2, r7
 8003310:	4640      	mov	r0, r8
 8003312:	4798      	blx	r3
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	3b01      	subs	r3, #1
 8003318:	6123      	str	r3, [r4, #16]
 800331a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800331e:	fa5f fa8a 	uxtb.w	sl, sl
 8003322:	f1ba 0f02 	cmp.w	sl, #2
 8003326:	d1ec      	bne.n	8003302 <_scanf_float+0x2c6>
 8003328:	3d03      	subs	r5, #3
 800332a:	b2ed      	uxtb	r5, r5
 800332c:	1b76      	subs	r6, r6, r5
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	05da      	lsls	r2, r3, #23
 8003332:	d52f      	bpl.n	8003394 <_scanf_float+0x358>
 8003334:	055b      	lsls	r3, r3, #21
 8003336:	d510      	bpl.n	800335a <_scanf_float+0x31e>
 8003338:	455e      	cmp	r6, fp
 800333a:	f67f aebf 	bls.w	80030bc <_scanf_float+0x80>
 800333e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003346:	463a      	mov	r2, r7
 8003348:	4640      	mov	r0, r8
 800334a:	4798      	blx	r3
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	3b01      	subs	r3, #1
 8003350:	6123      	str	r3, [r4, #16]
 8003352:	e7f1      	b.n	8003338 <_scanf_float+0x2fc>
 8003354:	46aa      	mov	sl, r5
 8003356:	9602      	str	r6, [sp, #8]
 8003358:	e7df      	b.n	800331a <_scanf_float+0x2de>
 800335a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800335e:	6923      	ldr	r3, [r4, #16]
 8003360:	2965      	cmp	r1, #101	; 0x65
 8003362:	f103 33ff 	add.w	r3, r3, #4294967295
 8003366:	f106 35ff 	add.w	r5, r6, #4294967295
 800336a:	6123      	str	r3, [r4, #16]
 800336c:	d00c      	beq.n	8003388 <_scanf_float+0x34c>
 800336e:	2945      	cmp	r1, #69	; 0x45
 8003370:	d00a      	beq.n	8003388 <_scanf_float+0x34c>
 8003372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003376:	463a      	mov	r2, r7
 8003378:	4640      	mov	r0, r8
 800337a:	4798      	blx	r3
 800337c:	6923      	ldr	r3, [r4, #16]
 800337e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003382:	3b01      	subs	r3, #1
 8003384:	1eb5      	subs	r5, r6, #2
 8003386:	6123      	str	r3, [r4, #16]
 8003388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800338c:	463a      	mov	r2, r7
 800338e:	4640      	mov	r0, r8
 8003390:	4798      	blx	r3
 8003392:	462e      	mov	r6, r5
 8003394:	6825      	ldr	r5, [r4, #0]
 8003396:	f015 0510 	ands.w	r5, r5, #16
 800339a:	d14d      	bne.n	8003438 <_scanf_float+0x3fc>
 800339c:	7035      	strb	r5, [r6, #0]
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d11a      	bne.n	80033e0 <_scanf_float+0x3a4>
 80033aa:	9b01      	ldr	r3, [sp, #4]
 80033ac:	454b      	cmp	r3, r9
 80033ae:	eba3 0209 	sub.w	r2, r3, r9
 80033b2:	d122      	bne.n	80033fa <_scanf_float+0x3be>
 80033b4:	2200      	movs	r2, #0
 80033b6:	4659      	mov	r1, fp
 80033b8:	4640      	mov	r0, r8
 80033ba:	f000 fe73 	bl	80040a4 <_strtod_r>
 80033be:	9b03      	ldr	r3, [sp, #12]
 80033c0:	6821      	ldr	r1, [r4, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f011 0f02 	tst.w	r1, #2
 80033c8:	f103 0204 	add.w	r2, r3, #4
 80033cc:	d020      	beq.n	8003410 <_scanf_float+0x3d4>
 80033ce:	9903      	ldr	r1, [sp, #12]
 80033d0:	600a      	str	r2, [r1, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	ed83 0b00 	vstr	d0, [r3]
 80033d8:	68e3      	ldr	r3, [r4, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60e3      	str	r3, [r4, #12]
 80033de:	e66e      	b.n	80030be <_scanf_float+0x82>
 80033e0:	9b04      	ldr	r3, [sp, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0e6      	beq.n	80033b4 <_scanf_float+0x378>
 80033e6:	9905      	ldr	r1, [sp, #20]
 80033e8:	230a      	movs	r3, #10
 80033ea:	462a      	mov	r2, r5
 80033ec:	3101      	adds	r1, #1
 80033ee:	4640      	mov	r0, r8
 80033f0:	f000 fee2 	bl	80041b8 <_strtol_r>
 80033f4:	9b04      	ldr	r3, [sp, #16]
 80033f6:	9e05      	ldr	r6, [sp, #20]
 80033f8:	1ac2      	subs	r2, r0, r3
 80033fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80033fe:	429e      	cmp	r6, r3
 8003400:	bf28      	it	cs
 8003402:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003406:	490d      	ldr	r1, [pc, #52]	; (800343c <_scanf_float+0x400>)
 8003408:	4630      	mov	r0, r6
 800340a:	f000 f839 	bl	8003480 <siprintf>
 800340e:	e7d1      	b.n	80033b4 <_scanf_float+0x378>
 8003410:	f011 0f04 	tst.w	r1, #4
 8003414:	9903      	ldr	r1, [sp, #12]
 8003416:	600a      	str	r2, [r1, #0]
 8003418:	d1db      	bne.n	80033d2 <_scanf_float+0x396>
 800341a:	eeb4 0b40 	vcmp.f64	d0, d0
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	681e      	ldr	r6, [r3, #0]
 8003424:	d705      	bvc.n	8003432 <_scanf_float+0x3f6>
 8003426:	4806      	ldr	r0, [pc, #24]	; (8003440 <_scanf_float+0x404>)
 8003428:	f000 f824 	bl	8003474 <nanf>
 800342c:	ed86 0a00 	vstr	s0, [r6]
 8003430:	e7d2      	b.n	80033d8 <_scanf_float+0x39c>
 8003432:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003436:	e7f9      	b.n	800342c <_scanf_float+0x3f0>
 8003438:	2500      	movs	r5, #0
 800343a:	e640      	b.n	80030be <_scanf_float+0x82>
 800343c:	0800702c 	.word	0x0800702c
 8003440:	08006fe5 	.word	0x08006fe5

08003444 <iprintf>:
 8003444:	b40f      	push	{r0, r1, r2, r3}
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <iprintf+0x2c>)
 8003448:	b513      	push	{r0, r1, r4, lr}
 800344a:	681c      	ldr	r4, [r3, #0]
 800344c:	b124      	cbz	r4, 8003458 <iprintf+0x14>
 800344e:	69a3      	ldr	r3, [r4, #24]
 8003450:	b913      	cbnz	r3, 8003458 <iprintf+0x14>
 8003452:	4620      	mov	r0, r4
 8003454:	f001 fd20 	bl	8004e98 <__sinit>
 8003458:	ab05      	add	r3, sp, #20
 800345a:	9a04      	ldr	r2, [sp, #16]
 800345c:	68a1      	ldr	r1, [r4, #8]
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	4620      	mov	r0, r4
 8003462:	f003 f851 	bl	8006508 <_vfiprintf_r>
 8003466:	b002      	add	sp, #8
 8003468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800346c:	b004      	add	sp, #16
 800346e:	4770      	bx	lr
 8003470:	20000020 	.word	0x20000020

08003474 <nanf>:
 8003474:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800347c <nanf+0x8>
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	7fc00000 	.word	0x7fc00000

08003480 <siprintf>:
 8003480:	b40e      	push	{r1, r2, r3}
 8003482:	b500      	push	{lr}
 8003484:	b09c      	sub	sp, #112	; 0x70
 8003486:	ab1d      	add	r3, sp, #116	; 0x74
 8003488:	9002      	str	r0, [sp, #8]
 800348a:	9006      	str	r0, [sp, #24]
 800348c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003490:	4809      	ldr	r0, [pc, #36]	; (80034b8 <siprintf+0x38>)
 8003492:	9107      	str	r1, [sp, #28]
 8003494:	9104      	str	r1, [sp, #16]
 8003496:	4909      	ldr	r1, [pc, #36]	; (80034bc <siprintf+0x3c>)
 8003498:	f853 2b04 	ldr.w	r2, [r3], #4
 800349c:	9105      	str	r1, [sp, #20]
 800349e:	6800      	ldr	r0, [r0, #0]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	a902      	add	r1, sp, #8
 80034a4:	f002 ff06 	bl	80062b4 <_svfiprintf_r>
 80034a8:	9b02      	ldr	r3, [sp, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	b01c      	add	sp, #112	; 0x70
 80034b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034b4:	b003      	add	sp, #12
 80034b6:	4770      	bx	lr
 80034b8:	20000020 	.word	0x20000020
 80034bc:	ffff0208 	.word	0xffff0208

080034c0 <sulp>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4604      	mov	r4, r0
 80034c4:	460d      	mov	r5, r1
 80034c6:	4616      	mov	r6, r2
 80034c8:	ec45 4b10 	vmov	d0, r4, r5
 80034cc:	f002 fc8c 	bl	8005de8 <__ulp>
 80034d0:	b17e      	cbz	r6, 80034f2 <sulp+0x32>
 80034d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80034d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80034da:	2b00      	cmp	r3, #0
 80034dc:	dd09      	ble.n	80034f2 <sulp+0x32>
 80034de:	051b      	lsls	r3, r3, #20
 80034e0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80034e4:	2000      	movs	r0, #0
 80034e6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80034ea:	ec41 0b17 	vmov	d7, r0, r1
 80034ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	0000      	movs	r0, r0
	...

080034f8 <_strtod_l>:
 80034f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fc:	ed2d 8b0c 	vpush	{d8-d13}
 8003500:	b09d      	sub	sp, #116	; 0x74
 8003502:	461f      	mov	r7, r3
 8003504:	2300      	movs	r3, #0
 8003506:	9318      	str	r3, [sp, #96]	; 0x60
 8003508:	4ba6      	ldr	r3, [pc, #664]	; (80037a4 <_strtod_l+0x2ac>)
 800350a:	9213      	str	r2, [sp, #76]	; 0x4c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	9308      	str	r3, [sp, #32]
 8003510:	4604      	mov	r4, r0
 8003512:	4618      	mov	r0, r3
 8003514:	468a      	mov	sl, r1
 8003516:	f7fc fee3 	bl	80002e0 <strlen>
 800351a:	f04f 0800 	mov.w	r8, #0
 800351e:	4605      	mov	r5, r0
 8003520:	f04f 0900 	mov.w	r9, #0
 8003524:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8003528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	2a2b      	cmp	r2, #43	; 0x2b
 800352e:	d04d      	beq.n	80035cc <_strtod_l+0xd4>
 8003530:	d83a      	bhi.n	80035a8 <_strtod_l+0xb0>
 8003532:	2a0d      	cmp	r2, #13
 8003534:	d833      	bhi.n	800359e <_strtod_l+0xa6>
 8003536:	2a08      	cmp	r2, #8
 8003538:	d833      	bhi.n	80035a2 <_strtod_l+0xaa>
 800353a:	2a00      	cmp	r2, #0
 800353c:	d03d      	beq.n	80035ba <_strtod_l+0xc2>
 800353e:	2300      	movs	r3, #0
 8003540:	930b      	str	r3, [sp, #44]	; 0x2c
 8003542:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003544:	7833      	ldrb	r3, [r6, #0]
 8003546:	2b30      	cmp	r3, #48	; 0x30
 8003548:	f040 80b6 	bne.w	80036b8 <_strtod_l+0x1c0>
 800354c:	7873      	ldrb	r3, [r6, #1]
 800354e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003552:	2b58      	cmp	r3, #88	; 0x58
 8003554:	d16d      	bne.n	8003632 <_strtod_l+0x13a>
 8003556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	ab18      	add	r3, sp, #96	; 0x60
 800355c:	9702      	str	r7, [sp, #8]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4a91      	ldr	r2, [pc, #580]	; (80037a8 <_strtod_l+0x2b0>)
 8003562:	ab19      	add	r3, sp, #100	; 0x64
 8003564:	a917      	add	r1, sp, #92	; 0x5c
 8003566:	4620      	mov	r0, r4
 8003568:	f001 fd9a 	bl	80050a0 <__gethex>
 800356c:	f010 0507 	ands.w	r5, r0, #7
 8003570:	4607      	mov	r7, r0
 8003572:	d005      	beq.n	8003580 <_strtod_l+0x88>
 8003574:	2d06      	cmp	r5, #6
 8003576:	d12b      	bne.n	80035d0 <_strtod_l+0xd8>
 8003578:	3601      	adds	r6, #1
 800357a:	2300      	movs	r3, #0
 800357c:	9617      	str	r6, [sp, #92]	; 0x5c
 800357e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 856e 	bne.w	8004064 <_strtod_l+0xb6c>
 8003588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800358a:	b1e3      	cbz	r3, 80035c6 <_strtod_l+0xce>
 800358c:	ec49 8b17 	vmov	d7, r8, r9
 8003590:	eeb1 0b47 	vneg.f64	d0, d7
 8003594:	b01d      	add	sp, #116	; 0x74
 8003596:	ecbd 8b0c 	vpop	{d8-d13}
 800359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359e:	2a20      	cmp	r2, #32
 80035a0:	d1cd      	bne.n	800353e <_strtod_l+0x46>
 80035a2:	3301      	adds	r3, #1
 80035a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80035a6:	e7bf      	b.n	8003528 <_strtod_l+0x30>
 80035a8:	2a2d      	cmp	r2, #45	; 0x2d
 80035aa:	d1c8      	bne.n	800353e <_strtod_l+0x46>
 80035ac:	2201      	movs	r2, #1
 80035ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	9217      	str	r2, [sp, #92]	; 0x5c
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1c3      	bne.n	8003542 <_strtod_l+0x4a>
 80035ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035bc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 854d 	bne.w	8004060 <_strtod_l+0xb68>
 80035c6:	ec49 8b10 	vmov	d0, r8, r9
 80035ca:	e7e3      	b.n	8003594 <_strtod_l+0x9c>
 80035cc:	2200      	movs	r2, #0
 80035ce:	e7ee      	b.n	80035ae <_strtod_l+0xb6>
 80035d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80035d2:	b13a      	cbz	r2, 80035e4 <_strtod_l+0xec>
 80035d4:	2135      	movs	r1, #53	; 0x35
 80035d6:	a81a      	add	r0, sp, #104	; 0x68
 80035d8:	f002 fd12 	bl	8006000 <__copybits>
 80035dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80035de:	4620      	mov	r0, r4
 80035e0:	f002 f8d6 	bl	8005790 <_Bfree>
 80035e4:	3d01      	subs	r5, #1
 80035e6:	2d05      	cmp	r5, #5
 80035e8:	d807      	bhi.n	80035fa <_strtod_l+0x102>
 80035ea:	e8df f005 	tbb	[pc, r5]
 80035ee:	0b0e      	.short	0x0b0e
 80035f0:	030e1d18 	.word	0x030e1d18
 80035f4:	f04f 0900 	mov.w	r9, #0
 80035f8:	46c8      	mov	r8, r9
 80035fa:	073b      	lsls	r3, r7, #28
 80035fc:	d5c0      	bpl.n	8003580 <_strtod_l+0x88>
 80035fe:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003602:	e7bd      	b.n	8003580 <_strtod_l+0x88>
 8003604:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8003608:	e7f7      	b.n	80035fa <_strtod_l+0x102>
 800360a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800360e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003610:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003614:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003618:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800361c:	e7ed      	b.n	80035fa <_strtod_l+0x102>
 800361e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80037ac <_strtod_l+0x2b4>
 8003622:	f04f 0800 	mov.w	r8, #0
 8003626:	e7e8      	b.n	80035fa <_strtod_l+0x102>
 8003628:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800362c:	f04f 38ff 	mov.w	r8, #4294967295
 8003630:	e7e3      	b.n	80035fa <_strtod_l+0x102>
 8003632:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	9217      	str	r2, [sp, #92]	; 0x5c
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	2b30      	cmp	r3, #48	; 0x30
 800363c:	d0f9      	beq.n	8003632 <_strtod_l+0x13a>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d09e      	beq.n	8003580 <_strtod_l+0x88>
 8003642:	2301      	movs	r3, #1
 8003644:	9306      	str	r3, [sp, #24]
 8003646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003648:	930c      	str	r3, [sp, #48]	; 0x30
 800364a:	2300      	movs	r3, #0
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	930a      	str	r3, [sp, #40]	; 0x28
 8003650:	461e      	mov	r6, r3
 8003652:	220a      	movs	r2, #10
 8003654:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003656:	f890 b000 	ldrb.w	fp, [r0]
 800365a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800365e:	b2d9      	uxtb	r1, r3
 8003660:	2909      	cmp	r1, #9
 8003662:	d92b      	bls.n	80036bc <_strtod_l+0x1c4>
 8003664:	9908      	ldr	r1, [sp, #32]
 8003666:	462a      	mov	r2, r5
 8003668:	f003 f8d9 	bl	800681e <strncmp>
 800366c:	2800      	cmp	r0, #0
 800366e:	d035      	beq.n	80036dc <_strtod_l+0x1e4>
 8003670:	2000      	movs	r0, #0
 8003672:	465a      	mov	r2, fp
 8003674:	4633      	mov	r3, r6
 8003676:	4683      	mov	fp, r0
 8003678:	4601      	mov	r1, r0
 800367a:	2a65      	cmp	r2, #101	; 0x65
 800367c:	d001      	beq.n	8003682 <_strtod_l+0x18a>
 800367e:	2a45      	cmp	r2, #69	; 0x45
 8003680:	d118      	bne.n	80036b4 <_strtod_l+0x1bc>
 8003682:	b91b      	cbnz	r3, 800368c <_strtod_l+0x194>
 8003684:	9b06      	ldr	r3, [sp, #24]
 8003686:	4303      	orrs	r3, r0
 8003688:	d097      	beq.n	80035ba <_strtod_l+0xc2>
 800368a:	2300      	movs	r3, #0
 800368c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8003690:	f10a 0201 	add.w	r2, sl, #1
 8003694:	9217      	str	r2, [sp, #92]	; 0x5c
 8003696:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800369a:	2a2b      	cmp	r2, #43	; 0x2b
 800369c:	d077      	beq.n	800378e <_strtod_l+0x296>
 800369e:	2a2d      	cmp	r2, #45	; 0x2d
 80036a0:	d07d      	beq.n	800379e <_strtod_l+0x2a6>
 80036a2:	f04f 0e00 	mov.w	lr, #0
 80036a6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80036aa:	2d09      	cmp	r5, #9
 80036ac:	f240 8084 	bls.w	80037b8 <_strtod_l+0x2c0>
 80036b0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80036b4:	2500      	movs	r5, #0
 80036b6:	e09f      	b.n	80037f8 <_strtod_l+0x300>
 80036b8:	2300      	movs	r3, #0
 80036ba:	e7c3      	b.n	8003644 <_strtod_l+0x14c>
 80036bc:	2e08      	cmp	r6, #8
 80036be:	bfd5      	itete	le
 80036c0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80036c2:	9904      	ldrgt	r1, [sp, #16]
 80036c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80036c8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80036cc:	f100 0001 	add.w	r0, r0, #1
 80036d0:	bfd4      	ite	le
 80036d2:	930a      	strle	r3, [sp, #40]	; 0x28
 80036d4:	9304      	strgt	r3, [sp, #16]
 80036d6:	3601      	adds	r6, #1
 80036d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80036da:	e7bb      	b.n	8003654 <_strtod_l+0x15c>
 80036dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036de:	195a      	adds	r2, r3, r5
 80036e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80036e2:	5d5a      	ldrb	r2, [r3, r5]
 80036e4:	b3ae      	cbz	r6, 8003752 <_strtod_l+0x25a>
 80036e6:	4683      	mov	fp, r0
 80036e8:	4633      	mov	r3, r6
 80036ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80036ee:	2909      	cmp	r1, #9
 80036f0:	d912      	bls.n	8003718 <_strtod_l+0x220>
 80036f2:	2101      	movs	r1, #1
 80036f4:	e7c1      	b.n	800367a <_strtod_l+0x182>
 80036f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	9217      	str	r2, [sp, #92]	; 0x5c
 80036fc:	785a      	ldrb	r2, [r3, #1]
 80036fe:	3001      	adds	r0, #1
 8003700:	2a30      	cmp	r2, #48	; 0x30
 8003702:	d0f8      	beq.n	80036f6 <_strtod_l+0x1fe>
 8003704:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003708:	2b08      	cmp	r3, #8
 800370a:	f200 84b0 	bhi.w	800406e <_strtod_l+0xb76>
 800370e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003710:	930c      	str	r3, [sp, #48]	; 0x30
 8003712:	4683      	mov	fp, r0
 8003714:	2000      	movs	r0, #0
 8003716:	4603      	mov	r3, r0
 8003718:	3a30      	subs	r2, #48	; 0x30
 800371a:	f100 0101 	add.w	r1, r0, #1
 800371e:	d012      	beq.n	8003746 <_strtod_l+0x24e>
 8003720:	448b      	add	fp, r1
 8003722:	eb00 0c03 	add.w	ip, r0, r3
 8003726:	4619      	mov	r1, r3
 8003728:	250a      	movs	r5, #10
 800372a:	4561      	cmp	r1, ip
 800372c:	d113      	bne.n	8003756 <_strtod_l+0x25e>
 800372e:	1819      	adds	r1, r3, r0
 8003730:	2908      	cmp	r1, #8
 8003732:	f103 0301 	add.w	r3, r3, #1
 8003736:	4403      	add	r3, r0
 8003738:	dc1d      	bgt.n	8003776 <_strtod_l+0x27e>
 800373a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800373c:	210a      	movs	r1, #10
 800373e:	fb01 2200 	mla	r2, r1, r0, r2
 8003742:	920a      	str	r2, [sp, #40]	; 0x28
 8003744:	2100      	movs	r1, #0
 8003746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003748:	1c50      	adds	r0, r2, #1
 800374a:	9017      	str	r0, [sp, #92]	; 0x5c
 800374c:	7852      	ldrb	r2, [r2, #1]
 800374e:	4608      	mov	r0, r1
 8003750:	e7cb      	b.n	80036ea <_strtod_l+0x1f2>
 8003752:	4630      	mov	r0, r6
 8003754:	e7d4      	b.n	8003700 <_strtod_l+0x208>
 8003756:	2908      	cmp	r1, #8
 8003758:	dc04      	bgt.n	8003764 <_strtod_l+0x26c>
 800375a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800375c:	436f      	muls	r7, r5
 800375e:	970a      	str	r7, [sp, #40]	; 0x28
 8003760:	3101      	adds	r1, #1
 8003762:	e7e2      	b.n	800372a <_strtod_l+0x232>
 8003764:	f101 0e01 	add.w	lr, r1, #1
 8003768:	f1be 0f10 	cmp.w	lr, #16
 800376c:	bfde      	ittt	le
 800376e:	9f04      	ldrle	r7, [sp, #16]
 8003770:	436f      	mulle	r7, r5
 8003772:	9704      	strle	r7, [sp, #16]
 8003774:	e7f4      	b.n	8003760 <_strtod_l+0x268>
 8003776:	2b10      	cmp	r3, #16
 8003778:	bfdf      	itttt	le
 800377a:	9804      	ldrle	r0, [sp, #16]
 800377c:	210a      	movle	r1, #10
 800377e:	fb01 2200 	mlale	r2, r1, r0, r2
 8003782:	9204      	strle	r2, [sp, #16]
 8003784:	e7de      	b.n	8003744 <_strtod_l+0x24c>
 8003786:	f04f 0b00 	mov.w	fp, #0
 800378a:	2101      	movs	r1, #1
 800378c:	e77a      	b.n	8003684 <_strtod_l+0x18c>
 800378e:	f04f 0e00 	mov.w	lr, #0
 8003792:	f10a 0202 	add.w	r2, sl, #2
 8003796:	9217      	str	r2, [sp, #92]	; 0x5c
 8003798:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800379c:	e783      	b.n	80036a6 <_strtod_l+0x1ae>
 800379e:	f04f 0e01 	mov.w	lr, #1
 80037a2:	e7f6      	b.n	8003792 <_strtod_l+0x29a>
 80037a4:	080072ec 	.word	0x080072ec
 80037a8:	08007034 	.word	0x08007034
 80037ac:	7ff00000 	.word	0x7ff00000
 80037b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80037b2:	1c55      	adds	r5, r2, #1
 80037b4:	9517      	str	r5, [sp, #92]	; 0x5c
 80037b6:	7852      	ldrb	r2, [r2, #1]
 80037b8:	2a30      	cmp	r2, #48	; 0x30
 80037ba:	d0f9      	beq.n	80037b0 <_strtod_l+0x2b8>
 80037bc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80037c0:	2d08      	cmp	r5, #8
 80037c2:	f63f af77 	bhi.w	80036b4 <_strtod_l+0x1bc>
 80037c6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80037ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80037cc:	9208      	str	r2, [sp, #32]
 80037ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80037d0:	1c55      	adds	r5, r2, #1
 80037d2:	9517      	str	r5, [sp, #92]	; 0x5c
 80037d4:	7852      	ldrb	r2, [r2, #1]
 80037d6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80037da:	2f09      	cmp	r7, #9
 80037dc:	d937      	bls.n	800384e <_strtod_l+0x356>
 80037de:	9f08      	ldr	r7, [sp, #32]
 80037e0:	1bed      	subs	r5, r5, r7
 80037e2:	2d08      	cmp	r5, #8
 80037e4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80037e8:	dc02      	bgt.n	80037f0 <_strtod_l+0x2f8>
 80037ea:	4565      	cmp	r5, ip
 80037ec:	bfa8      	it	ge
 80037ee:	4665      	movge	r5, ip
 80037f0:	f1be 0f00 	cmp.w	lr, #0
 80037f4:	d000      	beq.n	80037f8 <_strtod_l+0x300>
 80037f6:	426d      	negs	r5, r5
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d14f      	bne.n	800389c <_strtod_l+0x3a4>
 80037fc:	9b06      	ldr	r3, [sp, #24]
 80037fe:	4303      	orrs	r3, r0
 8003800:	f47f aebe 	bne.w	8003580 <_strtod_l+0x88>
 8003804:	2900      	cmp	r1, #0
 8003806:	f47f aed8 	bne.w	80035ba <_strtod_l+0xc2>
 800380a:	2a69      	cmp	r2, #105	; 0x69
 800380c:	d027      	beq.n	800385e <_strtod_l+0x366>
 800380e:	dc24      	bgt.n	800385a <_strtod_l+0x362>
 8003810:	2a49      	cmp	r2, #73	; 0x49
 8003812:	d024      	beq.n	800385e <_strtod_l+0x366>
 8003814:	2a4e      	cmp	r2, #78	; 0x4e
 8003816:	f47f aed0 	bne.w	80035ba <_strtod_l+0xc2>
 800381a:	499b      	ldr	r1, [pc, #620]	; (8003a88 <_strtod_l+0x590>)
 800381c:	a817      	add	r0, sp, #92	; 0x5c
 800381e:	f001 fe97 	bl	8005550 <__match>
 8003822:	2800      	cmp	r0, #0
 8003824:	f43f aec9 	beq.w	80035ba <_strtod_l+0xc2>
 8003828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b28      	cmp	r3, #40	; 0x28
 800382e:	d12d      	bne.n	800388c <_strtod_l+0x394>
 8003830:	4996      	ldr	r1, [pc, #600]	; (8003a8c <_strtod_l+0x594>)
 8003832:	aa1a      	add	r2, sp, #104	; 0x68
 8003834:	a817      	add	r0, sp, #92	; 0x5c
 8003836:	f001 fe9f 	bl	8005578 <__hexnan>
 800383a:	2805      	cmp	r0, #5
 800383c:	d126      	bne.n	800388c <_strtod_l+0x394>
 800383e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003840:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003844:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003848:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800384c:	e698      	b.n	8003580 <_strtod_l+0x88>
 800384e:	250a      	movs	r5, #10
 8003850:	fb05 250c 	mla	r5, r5, ip, r2
 8003854:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8003858:	e7b9      	b.n	80037ce <_strtod_l+0x2d6>
 800385a:	2a6e      	cmp	r2, #110	; 0x6e
 800385c:	e7db      	b.n	8003816 <_strtod_l+0x31e>
 800385e:	498c      	ldr	r1, [pc, #560]	; (8003a90 <_strtod_l+0x598>)
 8003860:	a817      	add	r0, sp, #92	; 0x5c
 8003862:	f001 fe75 	bl	8005550 <__match>
 8003866:	2800      	cmp	r0, #0
 8003868:	f43f aea7 	beq.w	80035ba <_strtod_l+0xc2>
 800386c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800386e:	4989      	ldr	r1, [pc, #548]	; (8003a94 <_strtod_l+0x59c>)
 8003870:	3b01      	subs	r3, #1
 8003872:	a817      	add	r0, sp, #92	; 0x5c
 8003874:	9317      	str	r3, [sp, #92]	; 0x5c
 8003876:	f001 fe6b 	bl	8005550 <__match>
 800387a:	b910      	cbnz	r0, 8003882 <_strtod_l+0x38a>
 800387c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800387e:	3301      	adds	r3, #1
 8003880:	9317      	str	r3, [sp, #92]	; 0x5c
 8003882:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003aa8 <_strtod_l+0x5b0>
 8003886:	f04f 0800 	mov.w	r8, #0
 800388a:	e679      	b.n	8003580 <_strtod_l+0x88>
 800388c:	4882      	ldr	r0, [pc, #520]	; (8003a98 <_strtod_l+0x5a0>)
 800388e:	f002 ff6b 	bl	8006768 <nan>
 8003892:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003896:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800389a:	e671      	b.n	8003580 <_strtod_l+0x88>
 800389c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80038a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80038a4:	eba5 020b 	sub.w	r2, r5, fp
 80038a8:	2e00      	cmp	r6, #0
 80038aa:	bf08      	it	eq
 80038ac:	461e      	moveq	r6, r3
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80038b4:	9206      	str	r2, [sp, #24]
 80038b6:	461a      	mov	r2, r3
 80038b8:	bfa8      	it	ge
 80038ba:	2210      	movge	r2, #16
 80038bc:	2b09      	cmp	r3, #9
 80038be:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80038c2:	dd0e      	ble.n	80038e2 <_strtod_l+0x3ea>
 80038c4:	4975      	ldr	r1, [pc, #468]	; (8003a9c <_strtod_l+0x5a4>)
 80038c6:	eddd 7a04 	vldr	s15, [sp, #16]
 80038ca:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80038ce:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80038d2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80038d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80038da:	eea5 7b06 	vfma.f64	d7, d5, d6
 80038de:	ec59 8b17 	vmov	r8, r9, d7
 80038e2:	2b0f      	cmp	r3, #15
 80038e4:	dc37      	bgt.n	8003956 <_strtod_l+0x45e>
 80038e6:	9906      	ldr	r1, [sp, #24]
 80038e8:	2900      	cmp	r1, #0
 80038ea:	f43f ae49 	beq.w	8003580 <_strtod_l+0x88>
 80038ee:	dd23      	ble.n	8003938 <_strtod_l+0x440>
 80038f0:	2916      	cmp	r1, #22
 80038f2:	dc0b      	bgt.n	800390c <_strtod_l+0x414>
 80038f4:	4b69      	ldr	r3, [pc, #420]	; (8003a9c <_strtod_l+0x5a4>)
 80038f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80038fa:	ed93 7b00 	vldr	d7, [r3]
 80038fe:	ec49 8b16 	vmov	d6, r8, r9
 8003902:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003906:	ec59 8b17 	vmov	r8, r9, d7
 800390a:	e639      	b.n	8003580 <_strtod_l+0x88>
 800390c:	9806      	ldr	r0, [sp, #24]
 800390e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8003912:	4281      	cmp	r1, r0
 8003914:	db1f      	blt.n	8003956 <_strtod_l+0x45e>
 8003916:	4a61      	ldr	r2, [pc, #388]	; (8003a9c <_strtod_l+0x5a4>)
 8003918:	f1c3 030f 	rsb	r3, r3, #15
 800391c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8003920:	ed91 7b00 	vldr	d7, [r1]
 8003924:	ec49 8b16 	vmov	d6, r8, r9
 8003928:	1ac3      	subs	r3, r0, r3
 800392a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800392e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003932:	ed92 6b00 	vldr	d6, [r2]
 8003936:	e7e4      	b.n	8003902 <_strtod_l+0x40a>
 8003938:	9906      	ldr	r1, [sp, #24]
 800393a:	3116      	adds	r1, #22
 800393c:	db0b      	blt.n	8003956 <_strtod_l+0x45e>
 800393e:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <_strtod_l+0x5a4>)
 8003940:	ebab 0505 	sub.w	r5, fp, r5
 8003944:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003948:	ed95 7b00 	vldr	d7, [r5]
 800394c:	ec49 8b16 	vmov	d6, r8, r9
 8003950:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003954:	e7d7      	b.n	8003906 <_strtod_l+0x40e>
 8003956:	9906      	ldr	r1, [sp, #24]
 8003958:	1a9a      	subs	r2, r3, r2
 800395a:	440a      	add	r2, r1
 800395c:	2a00      	cmp	r2, #0
 800395e:	dd74      	ble.n	8003a4a <_strtod_l+0x552>
 8003960:	f012 000f 	ands.w	r0, r2, #15
 8003964:	d00a      	beq.n	800397c <_strtod_l+0x484>
 8003966:	494d      	ldr	r1, [pc, #308]	; (8003a9c <_strtod_l+0x5a4>)
 8003968:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800396c:	ed91 7b00 	vldr	d7, [r1]
 8003970:	ec49 8b16 	vmov	d6, r8, r9
 8003974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003978:	ec59 8b17 	vmov	r8, r9, d7
 800397c:	f032 020f 	bics.w	r2, r2, #15
 8003980:	d04f      	beq.n	8003a22 <_strtod_l+0x52a>
 8003982:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8003986:	dd22      	ble.n	80039ce <_strtod_l+0x4d6>
 8003988:	2500      	movs	r5, #0
 800398a:	462e      	mov	r6, r5
 800398c:	950a      	str	r5, [sp, #40]	; 0x28
 800398e:	462f      	mov	r7, r5
 8003990:	2322      	movs	r3, #34	; 0x22
 8003992:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8003aa8 <_strtod_l+0x5b0>
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	f04f 0800 	mov.w	r8, #0
 800399c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f43f adee 	beq.w	8003580 <_strtod_l+0x88>
 80039a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80039a6:	4620      	mov	r0, r4
 80039a8:	f001 fef2 	bl	8005790 <_Bfree>
 80039ac:	4639      	mov	r1, r7
 80039ae:	4620      	mov	r0, r4
 80039b0:	f001 feee 	bl	8005790 <_Bfree>
 80039b4:	4631      	mov	r1, r6
 80039b6:	4620      	mov	r0, r4
 80039b8:	f001 feea 	bl	8005790 <_Bfree>
 80039bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80039be:	4620      	mov	r0, r4
 80039c0:	f001 fee6 	bl	8005790 <_Bfree>
 80039c4:	4629      	mov	r1, r5
 80039c6:	4620      	mov	r0, r4
 80039c8:	f001 fee2 	bl	8005790 <_Bfree>
 80039cc:	e5d8      	b.n	8003580 <_strtod_l+0x88>
 80039ce:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80039d2:	2000      	movs	r0, #0
 80039d4:	4f32      	ldr	r7, [pc, #200]	; (8003aa0 <_strtod_l+0x5a8>)
 80039d6:	1112      	asrs	r2, r2, #4
 80039d8:	4601      	mov	r1, r0
 80039da:	2a01      	cmp	r2, #1
 80039dc:	dc24      	bgt.n	8003a28 <_strtod_l+0x530>
 80039de:	b108      	cbz	r0, 80039e4 <_strtod_l+0x4ec>
 80039e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80039e4:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <_strtod_l+0x5a8>)
 80039e6:	482f      	ldr	r0, [pc, #188]	; (8003aa4 <_strtod_l+0x5ac>)
 80039e8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80039ec:	ed91 7b00 	vldr	d7, [r1]
 80039f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80039f4:	ec49 8b16 	vmov	d6, r8, r9
 80039f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003a00:	9905      	ldr	r1, [sp, #20]
 8003a02:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <_strtod_l+0x5b0>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	4282      	cmp	r2, r0
 8003a08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003a0c:	d8bc      	bhi.n	8003988 <_strtod_l+0x490>
 8003a0e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8003a12:	4282      	cmp	r2, r0
 8003a14:	bf86      	itte	hi
 8003a16:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003aac <_strtod_l+0x5b4>
 8003a1a:	f04f 38ff 	movhi.w	r8, #4294967295
 8003a1e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8003a22:	2200      	movs	r2, #0
 8003a24:	9204      	str	r2, [sp, #16]
 8003a26:	e07f      	b.n	8003b28 <_strtod_l+0x630>
 8003a28:	f012 0f01 	tst.w	r2, #1
 8003a2c:	d00a      	beq.n	8003a44 <_strtod_l+0x54c>
 8003a2e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8003a32:	ed90 7b00 	vldr	d7, [r0]
 8003a36:	ed9d 6b04 	vldr	d6, [sp, #16]
 8003a3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003a3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003a42:	2001      	movs	r0, #1
 8003a44:	3101      	adds	r1, #1
 8003a46:	1052      	asrs	r2, r2, #1
 8003a48:	e7c7      	b.n	80039da <_strtod_l+0x4e2>
 8003a4a:	d0ea      	beq.n	8003a22 <_strtod_l+0x52a>
 8003a4c:	4252      	negs	r2, r2
 8003a4e:	f012 000f 	ands.w	r0, r2, #15
 8003a52:	d00a      	beq.n	8003a6a <_strtod_l+0x572>
 8003a54:	4911      	ldr	r1, [pc, #68]	; (8003a9c <_strtod_l+0x5a4>)
 8003a56:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8003a5a:	ed91 7b00 	vldr	d7, [r1]
 8003a5e:	ec49 8b16 	vmov	d6, r8, r9
 8003a62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003a66:	ec59 8b17 	vmov	r8, r9, d7
 8003a6a:	1112      	asrs	r2, r2, #4
 8003a6c:	d0d9      	beq.n	8003a22 <_strtod_l+0x52a>
 8003a6e:	2a1f      	cmp	r2, #31
 8003a70:	dd1e      	ble.n	8003ab0 <_strtod_l+0x5b8>
 8003a72:	2500      	movs	r5, #0
 8003a74:	462e      	mov	r6, r5
 8003a76:	950a      	str	r5, [sp, #40]	; 0x28
 8003a78:	462f      	mov	r7, r5
 8003a7a:	2322      	movs	r3, #34	; 0x22
 8003a7c:	f04f 0800 	mov.w	r8, #0
 8003a80:	f04f 0900 	mov.w	r9, #0
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	e789      	b.n	800399c <_strtod_l+0x4a4>
 8003a88:	08007005 	.word	0x08007005
 8003a8c:	08007048 	.word	0x08007048
 8003a90:	08006ffd 	.word	0x08006ffd
 8003a94:	0800718c 	.word	0x0800718c
 8003a98:	08006fe5 	.word	0x08006fe5
 8003a9c:	08007388 	.word	0x08007388
 8003aa0:	08007360 	.word	0x08007360
 8003aa4:	7ca00000 	.word	0x7ca00000
 8003aa8:	7ff00000 	.word	0x7ff00000
 8003aac:	7fefffff 	.word	0x7fefffff
 8003ab0:	f012 0110 	ands.w	r1, r2, #16
 8003ab4:	bf18      	it	ne
 8003ab6:	216a      	movne	r1, #106	; 0x6a
 8003ab8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003abc:	9104      	str	r1, [sp, #16]
 8003abe:	49c0      	ldr	r1, [pc, #768]	; (8003dc0 <_strtod_l+0x8c8>)
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	07d7      	lsls	r7, r2, #31
 8003ac4:	d508      	bpl.n	8003ad8 <_strtod_l+0x5e0>
 8003ac6:	ed9d 6b08 	vldr	d6, [sp, #32]
 8003aca:	ed91 7b00 	vldr	d7, [r1]
 8003ace:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003ad2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	1052      	asrs	r2, r2, #1
 8003ada:	f101 0108 	add.w	r1, r1, #8
 8003ade:	d1f0      	bne.n	8003ac2 <_strtod_l+0x5ca>
 8003ae0:	b108      	cbz	r0, 8003ae6 <_strtod_l+0x5ee>
 8003ae2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8003ae6:	9a04      	ldr	r2, [sp, #16]
 8003ae8:	b1ba      	cbz	r2, 8003b1a <_strtod_l+0x622>
 8003aea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8003aee:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	4649      	mov	r1, r9
 8003af6:	dd10      	ble.n	8003b1a <_strtod_l+0x622>
 8003af8:	2a1f      	cmp	r2, #31
 8003afa:	f340 8132 	ble.w	8003d62 <_strtod_l+0x86a>
 8003afe:	2a34      	cmp	r2, #52	; 0x34
 8003b00:	bfde      	ittt	le
 8003b02:	3a20      	suble	r2, #32
 8003b04:	f04f 30ff 	movle.w	r0, #4294967295
 8003b08:	fa00 f202 	lslle.w	r2, r0, r2
 8003b0c:	f04f 0800 	mov.w	r8, #0
 8003b10:	bfcc      	ite	gt
 8003b12:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003b16:	ea02 0901 	andle.w	r9, r2, r1
 8003b1a:	ec49 8b17 	vmov	d7, r8, r9
 8003b1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	d0a4      	beq.n	8003a72 <_strtod_l+0x57a>
 8003b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b2a:	9200      	str	r2, [sp, #0]
 8003b2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b2e:	4632      	mov	r2, r6
 8003b30:	4620      	mov	r0, r4
 8003b32:	f001 fe99 	bl	8005868 <__s2b>
 8003b36:	900a      	str	r0, [sp, #40]	; 0x28
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	f43f af25 	beq.w	8003988 <_strtod_l+0x490>
 8003b3e:	9b06      	ldr	r3, [sp, #24]
 8003b40:	ebab 0505 	sub.w	r5, fp, r5
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bfb4      	ite	lt
 8003b48:	462b      	movlt	r3, r5
 8003b4a:	2300      	movge	r3, #0
 8003b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8003b4e:	9b06      	ldr	r3, [sp, #24]
 8003b50:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8003da8 <_strtod_l+0x8b0>
 8003b54:	ed9f ab96 	vldr	d10, [pc, #600]	; 8003db0 <_strtod_l+0x8b8>
 8003b58:	ed9f bb97 	vldr	d11, [pc, #604]	; 8003db8 <_strtod_l+0x8c0>
 8003b5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003b60:	2500      	movs	r5, #0
 8003b62:	9312      	str	r3, [sp, #72]	; 0x48
 8003b64:	462e      	mov	r6, r5
 8003b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b68:	4620      	mov	r0, r4
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	f001 fdd0 	bl	8005710 <_Balloc>
 8003b70:	4607      	mov	r7, r0
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f43f af0c 	beq.w	8003990 <_strtod_l+0x498>
 8003b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	3202      	adds	r2, #2
 8003b7e:	f103 010c 	add.w	r1, r3, #12
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	300c      	adds	r0, #12
 8003b86:	f001 fdb5 	bl	80056f4 <memcpy>
 8003b8a:	ec49 8b10 	vmov	d0, r8, r9
 8003b8e:	aa1a      	add	r2, sp, #104	; 0x68
 8003b90:	a919      	add	r1, sp, #100	; 0x64
 8003b92:	4620      	mov	r0, r4
 8003b94:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003b98:	f002 f9a2 	bl	8005ee0 <__d2b>
 8003b9c:	9018      	str	r0, [sp, #96]	; 0x60
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	f43f aef6 	beq.w	8003990 <_strtod_l+0x498>
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f001 fef8 	bl	800599c <__i2b>
 8003bac:	4606      	mov	r6, r0
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	f43f aeee 	beq.w	8003990 <_strtod_l+0x498>
 8003bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bfab      	itete	ge
 8003bbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8003bbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003bc0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8003bc4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8003bc8:	bfac      	ite	ge
 8003bca:	eb03 0b02 	addge.w	fp, r3, r2
 8003bce:	eba2 0a03 	sublt.w	sl, r2, r3
 8003bd2:	9a04      	ldr	r2, [sp, #16]
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	4a7a      	ldr	r2, [pc, #488]	; (8003dc4 <_strtod_l+0x8cc>)
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8003be2:	f280 80d1 	bge.w	8003d88 <_strtod_l+0x890>
 8003be6:	1ad2      	subs	r2, r2, r3
 8003be8:	2a1f      	cmp	r2, #31
 8003bea:	eba1 0102 	sub.w	r1, r1, r2
 8003bee:	f04f 0001 	mov.w	r0, #1
 8003bf2:	f300 80bd 	bgt.w	8003d70 <_strtod_l+0x878>
 8003bf6:	fa00 f302 	lsl.w	r3, r0, r2
 8003bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8003c00:	eb0b 0301 	add.w	r3, fp, r1
 8003c04:	9a04      	ldr	r2, [sp, #16]
 8003c06:	459b      	cmp	fp, r3
 8003c08:	448a      	add	sl, r1
 8003c0a:	4492      	add	sl, r2
 8003c0c:	465a      	mov	r2, fp
 8003c0e:	bfa8      	it	ge
 8003c10:	461a      	movge	r2, r3
 8003c12:	4552      	cmp	r2, sl
 8003c14:	bfa8      	it	ge
 8003c16:	4652      	movge	r2, sl
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	bfc2      	ittt	gt
 8003c1c:	1a9b      	subgt	r3, r3, r2
 8003c1e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8003c22:	ebab 0b02 	subgt.w	fp, fp, r2
 8003c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	dd18      	ble.n	8003c5e <_strtod_l+0x766>
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4620      	mov	r0, r4
 8003c30:	9315      	str	r3, [sp, #84]	; 0x54
 8003c32:	f001 ff6f 	bl	8005b14 <__pow5mult>
 8003c36:	4606      	mov	r6, r0
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	f43f aea9 	beq.w	8003990 <_strtod_l+0x498>
 8003c3e:	4601      	mov	r1, r0
 8003c40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003c42:	4620      	mov	r0, r4
 8003c44:	f001 fec0 	bl	80059c8 <__multiply>
 8003c48:	9014      	str	r0, [sp, #80]	; 0x50
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f43f aea0 	beq.w	8003990 <_strtod_l+0x498>
 8003c50:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c52:	4620      	mov	r0, r4
 8003c54:	f001 fd9c 	bl	8005790 <_Bfree>
 8003c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c5c:	9218      	str	r2, [sp, #96]	; 0x60
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f300 8097 	bgt.w	8003d92 <_strtod_l+0x89a>
 8003c64:	9b06      	ldr	r3, [sp, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	dd08      	ble.n	8003c7c <_strtod_l+0x784>
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f001 ff50 	bl	8005b14 <__pow5mult>
 8003c74:	4607      	mov	r7, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	f43f ae8a 	beq.w	8003990 <_strtod_l+0x498>
 8003c7c:	f1ba 0f00 	cmp.w	sl, #0
 8003c80:	dd08      	ble.n	8003c94 <_strtod_l+0x79c>
 8003c82:	4639      	mov	r1, r7
 8003c84:	4652      	mov	r2, sl
 8003c86:	4620      	mov	r0, r4
 8003c88:	f001 ff9e 	bl	8005bc8 <__lshift>
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	f43f ae7e 	beq.w	8003990 <_strtod_l+0x498>
 8003c94:	f1bb 0f00 	cmp.w	fp, #0
 8003c98:	dd08      	ble.n	8003cac <_strtod_l+0x7b4>
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	465a      	mov	r2, fp
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f001 ff92 	bl	8005bc8 <__lshift>
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	f43f ae72 	beq.w	8003990 <_strtod_l+0x498>
 8003cac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003cae:	463a      	mov	r2, r7
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f002 f811 	bl	8005cd8 <__mdiff>
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f43f ae69 	beq.w	8003990 <_strtod_l+0x498>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8003cc4:	60c3      	str	r3, [r0, #12]
 8003cc6:	4631      	mov	r1, r6
 8003cc8:	f001 ffea 	bl	8005ca0 <__mcmp>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	da7f      	bge.n	8003dd0 <_strtod_l+0x8d8>
 8003cd0:	ea5a 0308 	orrs.w	r3, sl, r8
 8003cd4:	f040 80a5 	bne.w	8003e22 <_strtod_l+0x92a>
 8003cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 80a0 	bne.w	8003e22 <_strtod_l+0x92a>
 8003ce2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ce6:	0d1b      	lsrs	r3, r3, #20
 8003ce8:	051b      	lsls	r3, r3, #20
 8003cea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003cee:	f240 8098 	bls.w	8003e22 <_strtod_l+0x92a>
 8003cf2:	696b      	ldr	r3, [r5, #20]
 8003cf4:	b91b      	cbnz	r3, 8003cfe <_strtod_l+0x806>
 8003cf6:	692b      	ldr	r3, [r5, #16]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	f340 8092 	ble.w	8003e22 <_strtod_l+0x92a>
 8003cfe:	4629      	mov	r1, r5
 8003d00:	2201      	movs	r2, #1
 8003d02:	4620      	mov	r0, r4
 8003d04:	f001 ff60 	bl	8005bc8 <__lshift>
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	f001 ffc8 	bl	8005ca0 <__mcmp>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	f340 8086 	ble.w	8003e22 <_strtod_l+0x92a>
 8003d16:	9904      	ldr	r1, [sp, #16]
 8003d18:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <_strtod_l+0x8d0>)
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	f000 80a1 	beq.w	8003e64 <_strtod_l+0x96c>
 8003d22:	ea02 0109 	and.w	r1, r2, r9
 8003d26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003d2a:	f300 809b 	bgt.w	8003e64 <_strtod_l+0x96c>
 8003d2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003d32:	f77f aea2 	ble.w	8003a7a <_strtod_l+0x582>
 8003d36:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <_strtod_l+0x8d4>)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8003d3e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8003d42:	ec49 8b17 	vmov	d7, r8, r9
 8003d46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003d4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003d4e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	bf08      	it	eq
 8003d56:	2322      	moveq	r3, #34	; 0x22
 8003d58:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003d5c:	bf08      	it	eq
 8003d5e:	6023      	streq	r3, [r4, #0]
 8003d60:	e620      	b.n	80039a4 <_strtod_l+0x4ac>
 8003d62:	f04f 31ff 	mov.w	r1, #4294967295
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	ea02 0808 	and.w	r8, r2, r8
 8003d6e:	e6d4      	b.n	8003b1a <_strtod_l+0x622>
 8003d70:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8003d74:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8003d78:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8003d7c:	33e2      	adds	r3, #226	; 0xe2
 8003d7e:	fa00 f303 	lsl.w	r3, r0, r3
 8003d82:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8003d86:	e73b      	b.n	8003c00 <_strtod_l+0x708>
 8003d88:	2000      	movs	r0, #0
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8003d90:	e736      	b.n	8003c00 <_strtod_l+0x708>
 8003d92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003d94:	461a      	mov	r2, r3
 8003d96:	4620      	mov	r0, r4
 8003d98:	f001 ff16 	bl	8005bc8 <__lshift>
 8003d9c:	9018      	str	r0, [sp, #96]	; 0x60
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f47f af60 	bne.w	8003c64 <_strtod_l+0x76c>
 8003da4:	e5f4      	b.n	8003990 <_strtod_l+0x498>
 8003da6:	bf00      	nop
 8003da8:	94a03595 	.word	0x94a03595
 8003dac:	3fcfffff 	.word	0x3fcfffff
 8003db0:	94a03595 	.word	0x94a03595
 8003db4:	3fdfffff 	.word	0x3fdfffff
 8003db8:	35afe535 	.word	0x35afe535
 8003dbc:	3fe00000 	.word	0x3fe00000
 8003dc0:	08007060 	.word	0x08007060
 8003dc4:	fffffc02 	.word	0xfffffc02
 8003dc8:	7ff00000 	.word	0x7ff00000
 8003dcc:	39500000 	.word	0x39500000
 8003dd0:	46cb      	mov	fp, r9
 8003dd2:	d165      	bne.n	8003ea0 <_strtod_l+0x9a8>
 8003dd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003dd8:	f1ba 0f00 	cmp.w	sl, #0
 8003ddc:	d02a      	beq.n	8003e34 <_strtod_l+0x93c>
 8003dde:	4aaa      	ldr	r2, [pc, #680]	; (8004088 <_strtod_l+0xb90>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d12b      	bne.n	8003e3c <_strtod_l+0x944>
 8003de4:	9b04      	ldr	r3, [sp, #16]
 8003de6:	4641      	mov	r1, r8
 8003de8:	b1fb      	cbz	r3, 8003e2a <_strtod_l+0x932>
 8003dea:	4aa8      	ldr	r2, [pc, #672]	; (800408c <_strtod_l+0xb94>)
 8003dec:	ea09 0202 	and.w	r2, r9, r2
 8003df0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	d81a      	bhi.n	8003e30 <_strtod_l+0x938>
 8003dfa:	0d12      	lsrs	r2, r2, #20
 8003dfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003e00:	fa00 f303 	lsl.w	r3, r0, r3
 8003e04:	4299      	cmp	r1, r3
 8003e06:	d119      	bne.n	8003e3c <_strtod_l+0x944>
 8003e08:	4ba1      	ldr	r3, [pc, #644]	; (8004090 <_strtod_l+0xb98>)
 8003e0a:	459b      	cmp	fp, r3
 8003e0c:	d102      	bne.n	8003e14 <_strtod_l+0x91c>
 8003e0e:	3101      	adds	r1, #1
 8003e10:	f43f adbe 	beq.w	8003990 <_strtod_l+0x498>
 8003e14:	4b9d      	ldr	r3, [pc, #628]	; (800408c <_strtod_l+0xb94>)
 8003e16:	ea0b 0303 	and.w	r3, fp, r3
 8003e1a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8003e1e:	f04f 0800 	mov.w	r8, #0
 8003e22:	9b04      	ldr	r3, [sp, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d186      	bne.n	8003d36 <_strtod_l+0x83e>
 8003e28:	e5bc      	b.n	80039a4 <_strtod_l+0x4ac>
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	e7e9      	b.n	8003e04 <_strtod_l+0x90c>
 8003e30:	4603      	mov	r3, r0
 8003e32:	e7e7      	b.n	8003e04 <_strtod_l+0x90c>
 8003e34:	ea53 0308 	orrs.w	r3, r3, r8
 8003e38:	f43f af6d 	beq.w	8003d16 <_strtod_l+0x81e>
 8003e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e3e:	b1db      	cbz	r3, 8003e78 <_strtod_l+0x980>
 8003e40:	ea13 0f0b 	tst.w	r3, fp
 8003e44:	d0ed      	beq.n	8003e22 <_strtod_l+0x92a>
 8003e46:	9a04      	ldr	r2, [sp, #16]
 8003e48:	4640      	mov	r0, r8
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	f1ba 0f00 	cmp.w	sl, #0
 8003e50:	d016      	beq.n	8003e80 <_strtod_l+0x988>
 8003e52:	f7ff fb35 	bl	80034c0 <sulp>
 8003e56:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003e5a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8003e5e:	ec59 8b17 	vmov	r8, r9, d7
 8003e62:	e7de      	b.n	8003e22 <_strtod_l+0x92a>
 8003e64:	4013      	ands	r3, r2
 8003e66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003e6a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8003e6e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8003e72:	f04f 38ff 	mov.w	r8, #4294967295
 8003e76:	e7d4      	b.n	8003e22 <_strtod_l+0x92a>
 8003e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e7a:	ea13 0f08 	tst.w	r3, r8
 8003e7e:	e7e1      	b.n	8003e44 <_strtod_l+0x94c>
 8003e80:	f7ff fb1e 	bl	80034c0 <sulp>
 8003e84:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003e88:	ee37 7b40 	vsub.f64	d7, d7, d0
 8003e8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003e90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e98:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003e9c:	d1c1      	bne.n	8003e22 <_strtod_l+0x92a>
 8003e9e:	e5ec      	b.n	8003a7a <_strtod_l+0x582>
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f002 f878 	bl	8005f98 <__ratio>
 8003ea8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8003eac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	d867      	bhi.n	8003f86 <_strtod_l+0xa8e>
 8003eb6:	f1ba 0f00 	cmp.w	sl, #0
 8003eba:	d044      	beq.n	8003f46 <_strtod_l+0xa4e>
 8003ebc:	4b75      	ldr	r3, [pc, #468]	; (8004094 <_strtod_l+0xb9c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8003ec4:	4971      	ldr	r1, [pc, #452]	; (800408c <_strtod_l+0xb94>)
 8003ec6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80040a0 <_strtod_l+0xba8>
 8003eca:	ea0b 0001 	and.w	r0, fp, r1
 8003ece:	4560      	cmp	r0, ip
 8003ed0:	900d      	str	r0, [sp, #52]	; 0x34
 8003ed2:	f040 808b 	bne.w	8003fec <_strtod_l+0xaf4>
 8003ed6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003eda:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8003ede:	ec49 8b10 	vmov	d0, r8, r9
 8003ee2:	ec43 2b1c 	vmov	d12, r2, r3
 8003ee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003eea:	f001 ff7d 	bl	8005de8 <__ulp>
 8003eee:	ec49 8b1d 	vmov	d13, r8, r9
 8003ef2:	eeac db00 	vfma.f64	d13, d12, d0
 8003ef6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8003efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003efc:	4963      	ldr	r1, [pc, #396]	; (800408c <_strtod_l+0xb94>)
 8003efe:	4a66      	ldr	r2, [pc, #408]	; (8004098 <_strtod_l+0xba0>)
 8003f00:	4019      	ands	r1, r3
 8003f02:	4291      	cmp	r1, r2
 8003f04:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8003f08:	d947      	bls.n	8003f9a <_strtod_l+0xaa2>
 8003f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <_strtod_l+0xa24>
 8003f14:	9b08      	ldr	r3, [sp, #32]
 8003f16:	3301      	adds	r3, #1
 8003f18:	f43f ad3a 	beq.w	8003990 <_strtod_l+0x498>
 8003f1c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8004090 <_strtod_l+0xb98>
 8003f20:	f04f 38ff 	mov.w	r8, #4294967295
 8003f24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003f26:	4620      	mov	r0, r4
 8003f28:	f001 fc32 	bl	8005790 <_Bfree>
 8003f2c:	4639      	mov	r1, r7
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f001 fc2e 	bl	8005790 <_Bfree>
 8003f34:	4631      	mov	r1, r6
 8003f36:	4620      	mov	r0, r4
 8003f38:	f001 fc2a 	bl	8005790 <_Bfree>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f001 fc26 	bl	8005790 <_Bfree>
 8003f44:	e60f      	b.n	8003b66 <_strtod_l+0x66e>
 8003f46:	f1b8 0f00 	cmp.w	r8, #0
 8003f4a:	d112      	bne.n	8003f72 <_strtod_l+0xa7a>
 8003f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f50:	b9b3      	cbnz	r3, 8003f80 <_strtod_l+0xa88>
 8003f52:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8003f56:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8003f62:	d401      	bmi.n	8003f68 <_strtod_l+0xa70>
 8003f64:	ee20 8b08 	vmul.f64	d8, d0, d8
 8003f68:	eeb1 7b48 	vneg.f64	d7, d8
 8003f6c:	ec53 2b17 	vmov	r2, r3, d7
 8003f70:	e7a8      	b.n	8003ec4 <_strtod_l+0x9cc>
 8003f72:	f1b8 0f01 	cmp.w	r8, #1
 8003f76:	d103      	bne.n	8003f80 <_strtod_l+0xa88>
 8003f78:	f1b9 0f00 	cmp.w	r9, #0
 8003f7c:	f43f ad7d 	beq.w	8003a7a <_strtod_l+0x582>
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <_strtod_l+0xba4>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	e79c      	b.n	8003ec0 <_strtod_l+0x9c8>
 8003f86:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8003f8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8003f8e:	f1ba 0f00 	cmp.w	sl, #0
 8003f92:	d0e9      	beq.n	8003f68 <_strtod_l+0xa70>
 8003f94:	ec53 2b18 	vmov	r2, r3, d8
 8003f98:	e794      	b.n	8003ec4 <_strtod_l+0x9cc>
 8003f9a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8003f9e:	9b04      	ldr	r3, [sp, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1bf      	bne.n	8003f24 <_strtod_l+0xa2c>
 8003fa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003faa:	0d1b      	lsrs	r3, r3, #20
 8003fac:	051b      	lsls	r3, r3, #20
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d1b8      	bne.n	8003f24 <_strtod_l+0xa2c>
 8003fb2:	ec51 0b18 	vmov	r0, r1, d8
 8003fb6:	f7fc fbbf 	bl	8000738 <__aeabi_d2lz>
 8003fba:	f7fc fb77 	bl	80006ac <__aeabi_l2d>
 8003fbe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003fc2:	ec41 0b17 	vmov	d7, r0, r1
 8003fc6:	ea43 0308 	orr.w	r3, r3, r8
 8003fca:	ea53 030a 	orrs.w	r3, r3, sl
 8003fce:	ee38 8b47 	vsub.f64	d8, d8, d7
 8003fd2:	d03e      	beq.n	8004052 <_strtod_l+0xb5a>
 8003fd4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8003fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fdc:	f53f ace2 	bmi.w	80039a4 <_strtod_l+0x4ac>
 8003fe0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8003fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe8:	dd9c      	ble.n	8003f24 <_strtod_l+0xa2c>
 8003fea:	e4db      	b.n	80039a4 <_strtod_l+0x4ac>
 8003fec:	9904      	ldr	r1, [sp, #16]
 8003fee:	b301      	cbz	r1, 8004032 <_strtod_l+0xb3a>
 8003ff0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ff2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8003ff6:	d81c      	bhi.n	8004032 <_strtod_l+0xb3a>
 8003ff8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8004080 <_strtod_l+0xb88>
 8003ffc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004004:	d811      	bhi.n	800402a <_strtod_l+0xb32>
 8004006:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800400a:	ee18 3a10 	vmov	r3, s16
 800400e:	2b01      	cmp	r3, #1
 8004010:	bf38      	it	cc
 8004012:	2301      	movcc	r3, #1
 8004014:	ee08 3a10 	vmov	s16, r3
 8004018:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800401c:	f1ba 0f00 	cmp.w	sl, #0
 8004020:	d114      	bne.n	800404c <_strtod_l+0xb54>
 8004022:	eeb1 7b48 	vneg.f64	d7, d8
 8004026:	ec53 2b17 	vmov	r2, r3, d7
 800402a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800402c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8004030:	1a0b      	subs	r3, r1, r0
 8004032:	ed9d 0b08 	vldr	d0, [sp, #32]
 8004036:	ec43 2b1c 	vmov	d12, r2, r3
 800403a:	f001 fed5 	bl	8005de8 <__ulp>
 800403e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004042:	eeac 7b00 	vfma.f64	d7, d12, d0
 8004046:	ec59 8b17 	vmov	r8, r9, d7
 800404a:	e7a8      	b.n	8003f9e <_strtod_l+0xaa6>
 800404c:	ec53 2b18 	vmov	r2, r3, d8
 8004050:	e7eb      	b.n	800402a <_strtod_l+0xb32>
 8004052:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8004056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405a:	f57f af63 	bpl.w	8003f24 <_strtod_l+0xa2c>
 800405e:	e4a1      	b.n	80039a4 <_strtod_l+0x4ac>
 8004060:	2300      	movs	r3, #0
 8004062:	930b      	str	r3, [sp, #44]	; 0x2c
 8004064:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	f7ff ba8d 	b.w	8003588 <_strtod_l+0x90>
 800406e:	2a65      	cmp	r2, #101	; 0x65
 8004070:	f43f ab89 	beq.w	8003786 <_strtod_l+0x28e>
 8004074:	2a45      	cmp	r2, #69	; 0x45
 8004076:	f43f ab86 	beq.w	8003786 <_strtod_l+0x28e>
 800407a:	2101      	movs	r1, #1
 800407c:	f7ff bbbe 	b.w	80037fc <_strtod_l+0x304>
 8004080:	ffc00000 	.word	0xffc00000
 8004084:	41dfffff 	.word	0x41dfffff
 8004088:	000fffff 	.word	0x000fffff
 800408c:	7ff00000 	.word	0x7ff00000
 8004090:	7fefffff 	.word	0x7fefffff
 8004094:	3ff00000 	.word	0x3ff00000
 8004098:	7c9fffff 	.word	0x7c9fffff
 800409c:	bff00000 	.word	0xbff00000
 80040a0:	7fe00000 	.word	0x7fe00000

080040a4 <_strtod_r>:
 80040a4:	4b01      	ldr	r3, [pc, #4]	; (80040ac <_strtod_r+0x8>)
 80040a6:	f7ff ba27 	b.w	80034f8 <_strtod_l>
 80040aa:	bf00      	nop
 80040ac:	20000088 	.word	0x20000088

080040b0 <_strtol_l.isra.0>:
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b6:	d001      	beq.n	80040bc <_strtol_l.isra.0+0xc>
 80040b8:	2b24      	cmp	r3, #36	; 0x24
 80040ba:	d906      	bls.n	80040ca <_strtol_l.isra.0+0x1a>
 80040bc:	f000 fe8e 	bl	8004ddc <__errno>
 80040c0:	2316      	movs	r3, #22
 80040c2:	6003      	str	r3, [r0, #0]
 80040c4:	2000      	movs	r0, #0
 80040c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ca:	4f3a      	ldr	r7, [pc, #232]	; (80041b4 <_strtol_l.isra.0+0x104>)
 80040cc:	468e      	mov	lr, r1
 80040ce:	4676      	mov	r6, lr
 80040d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80040d4:	5de5      	ldrb	r5, [r4, r7]
 80040d6:	f015 0508 	ands.w	r5, r5, #8
 80040da:	d1f8      	bne.n	80040ce <_strtol_l.isra.0+0x1e>
 80040dc:	2c2d      	cmp	r4, #45	; 0x2d
 80040de:	d134      	bne.n	800414a <_strtol_l.isra.0+0x9a>
 80040e0:	f89e 4000 	ldrb.w	r4, [lr]
 80040e4:	f04f 0801 	mov.w	r8, #1
 80040e8:	f106 0e02 	add.w	lr, r6, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05c      	beq.n	80041aa <_strtol_l.isra.0+0xfa>
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d10c      	bne.n	800410e <_strtol_l.isra.0+0x5e>
 80040f4:	2c30      	cmp	r4, #48	; 0x30
 80040f6:	d10a      	bne.n	800410e <_strtol_l.isra.0+0x5e>
 80040f8:	f89e 4000 	ldrb.w	r4, [lr]
 80040fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004100:	2c58      	cmp	r4, #88	; 0x58
 8004102:	d14d      	bne.n	80041a0 <_strtol_l.isra.0+0xf0>
 8004104:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004108:	2310      	movs	r3, #16
 800410a:	f10e 0e02 	add.w	lr, lr, #2
 800410e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004112:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004116:	2600      	movs	r6, #0
 8004118:	fbbc f9f3 	udiv	r9, ip, r3
 800411c:	4635      	mov	r5, r6
 800411e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004122:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004126:	2f09      	cmp	r7, #9
 8004128:	d818      	bhi.n	800415c <_strtol_l.isra.0+0xac>
 800412a:	463c      	mov	r4, r7
 800412c:	42a3      	cmp	r3, r4
 800412e:	dd24      	ble.n	800417a <_strtol_l.isra.0+0xca>
 8004130:	2e00      	cmp	r6, #0
 8004132:	db1f      	blt.n	8004174 <_strtol_l.isra.0+0xc4>
 8004134:	45a9      	cmp	r9, r5
 8004136:	d31d      	bcc.n	8004174 <_strtol_l.isra.0+0xc4>
 8004138:	d101      	bne.n	800413e <_strtol_l.isra.0+0x8e>
 800413a:	45a2      	cmp	sl, r4
 800413c:	db1a      	blt.n	8004174 <_strtol_l.isra.0+0xc4>
 800413e:	fb05 4503 	mla	r5, r5, r3, r4
 8004142:	2601      	movs	r6, #1
 8004144:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004148:	e7eb      	b.n	8004122 <_strtol_l.isra.0+0x72>
 800414a:	2c2b      	cmp	r4, #43	; 0x2b
 800414c:	bf08      	it	eq
 800414e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004152:	46a8      	mov	r8, r5
 8004154:	bf08      	it	eq
 8004156:	f106 0e02 	addeq.w	lr, r6, #2
 800415a:	e7c7      	b.n	80040ec <_strtol_l.isra.0+0x3c>
 800415c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004160:	2f19      	cmp	r7, #25
 8004162:	d801      	bhi.n	8004168 <_strtol_l.isra.0+0xb8>
 8004164:	3c37      	subs	r4, #55	; 0x37
 8004166:	e7e1      	b.n	800412c <_strtol_l.isra.0+0x7c>
 8004168:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800416c:	2f19      	cmp	r7, #25
 800416e:	d804      	bhi.n	800417a <_strtol_l.isra.0+0xca>
 8004170:	3c57      	subs	r4, #87	; 0x57
 8004172:	e7db      	b.n	800412c <_strtol_l.isra.0+0x7c>
 8004174:	f04f 36ff 	mov.w	r6, #4294967295
 8004178:	e7e4      	b.n	8004144 <_strtol_l.isra.0+0x94>
 800417a:	2e00      	cmp	r6, #0
 800417c:	da05      	bge.n	800418a <_strtol_l.isra.0+0xda>
 800417e:	2322      	movs	r3, #34	; 0x22
 8004180:	6003      	str	r3, [r0, #0]
 8004182:	4665      	mov	r5, ip
 8004184:	b942      	cbnz	r2, 8004198 <_strtol_l.isra.0+0xe8>
 8004186:	4628      	mov	r0, r5
 8004188:	e79d      	b.n	80040c6 <_strtol_l.isra.0+0x16>
 800418a:	f1b8 0f00 	cmp.w	r8, #0
 800418e:	d000      	beq.n	8004192 <_strtol_l.isra.0+0xe2>
 8004190:	426d      	negs	r5, r5
 8004192:	2a00      	cmp	r2, #0
 8004194:	d0f7      	beq.n	8004186 <_strtol_l.isra.0+0xd6>
 8004196:	b10e      	cbz	r6, 800419c <_strtol_l.isra.0+0xec>
 8004198:	f10e 31ff 	add.w	r1, lr, #4294967295
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	e7f2      	b.n	8004186 <_strtol_l.isra.0+0xd6>
 80041a0:	2430      	movs	r4, #48	; 0x30
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1b3      	bne.n	800410e <_strtol_l.isra.0+0x5e>
 80041a6:	2308      	movs	r3, #8
 80041a8:	e7b1      	b.n	800410e <_strtol_l.isra.0+0x5e>
 80041aa:	2c30      	cmp	r4, #48	; 0x30
 80041ac:	d0a4      	beq.n	80040f8 <_strtol_l.isra.0+0x48>
 80041ae:	230a      	movs	r3, #10
 80041b0:	e7ad      	b.n	800410e <_strtol_l.isra.0+0x5e>
 80041b2:	bf00      	nop
 80041b4:	08007089 	.word	0x08007089

080041b8 <_strtol_r>:
 80041b8:	f7ff bf7a 	b.w	80040b0 <_strtol_l.isra.0>

080041bc <quorem>:
 80041bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	6903      	ldr	r3, [r0, #16]
 80041c2:	690c      	ldr	r4, [r1, #16]
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	4607      	mov	r7, r0
 80041c8:	f2c0 8081 	blt.w	80042ce <quorem+0x112>
 80041cc:	3c01      	subs	r4, #1
 80041ce:	f101 0814 	add.w	r8, r1, #20
 80041d2:	f100 0514 	add.w	r5, r0, #20
 80041d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041e4:	3301      	adds	r3, #1
 80041e6:	429a      	cmp	r2, r3
 80041e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80041ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80041f4:	d331      	bcc.n	800425a <quorem+0x9e>
 80041f6:	f04f 0e00 	mov.w	lr, #0
 80041fa:	4640      	mov	r0, r8
 80041fc:	46ac      	mov	ip, r5
 80041fe:	46f2      	mov	sl, lr
 8004200:	f850 2b04 	ldr.w	r2, [r0], #4
 8004204:	b293      	uxth	r3, r2
 8004206:	fb06 e303 	mla	r3, r6, r3, lr
 800420a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800420e:	b29b      	uxth	r3, r3
 8004210:	ebaa 0303 	sub.w	r3, sl, r3
 8004214:	0c12      	lsrs	r2, r2, #16
 8004216:	f8dc a000 	ldr.w	sl, [ip]
 800421a:	fb06 e202 	mla	r2, r6, r2, lr
 800421e:	fa13 f38a 	uxtah	r3, r3, sl
 8004222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004226:	fa1f fa82 	uxth.w	sl, r2
 800422a:	f8dc 2000 	ldr.w	r2, [ip]
 800422e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004232:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004236:	b29b      	uxth	r3, r3
 8004238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800423c:	4581      	cmp	r9, r0
 800423e:	f84c 3b04 	str.w	r3, [ip], #4
 8004242:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004246:	d2db      	bcs.n	8004200 <quorem+0x44>
 8004248:	f855 300b 	ldr.w	r3, [r5, fp]
 800424c:	b92b      	cbnz	r3, 800425a <quorem+0x9e>
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	3b04      	subs	r3, #4
 8004252:	429d      	cmp	r5, r3
 8004254:	461a      	mov	r2, r3
 8004256:	d32e      	bcc.n	80042b6 <quorem+0xfa>
 8004258:	613c      	str	r4, [r7, #16]
 800425a:	4638      	mov	r0, r7
 800425c:	f001 fd20 	bl	8005ca0 <__mcmp>
 8004260:	2800      	cmp	r0, #0
 8004262:	db24      	blt.n	80042ae <quorem+0xf2>
 8004264:	3601      	adds	r6, #1
 8004266:	4628      	mov	r0, r5
 8004268:	f04f 0c00 	mov.w	ip, #0
 800426c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004270:	f8d0 e000 	ldr.w	lr, [r0]
 8004274:	b293      	uxth	r3, r2
 8004276:	ebac 0303 	sub.w	r3, ip, r3
 800427a:	0c12      	lsrs	r2, r2, #16
 800427c:	fa13 f38e 	uxtah	r3, r3, lr
 8004280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004288:	b29b      	uxth	r3, r3
 800428a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800428e:	45c1      	cmp	r9, r8
 8004290:	f840 3b04 	str.w	r3, [r0], #4
 8004294:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004298:	d2e8      	bcs.n	800426c <quorem+0xb0>
 800429a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800429e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042a2:	b922      	cbnz	r2, 80042ae <quorem+0xf2>
 80042a4:	3b04      	subs	r3, #4
 80042a6:	429d      	cmp	r5, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	d30a      	bcc.n	80042c2 <quorem+0x106>
 80042ac:	613c      	str	r4, [r7, #16]
 80042ae:	4630      	mov	r0, r6
 80042b0:	b003      	add	sp, #12
 80042b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	3b04      	subs	r3, #4
 80042ba:	2a00      	cmp	r2, #0
 80042bc:	d1cc      	bne.n	8004258 <quorem+0x9c>
 80042be:	3c01      	subs	r4, #1
 80042c0:	e7c7      	b.n	8004252 <quorem+0x96>
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	3b04      	subs	r3, #4
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	d1f0      	bne.n	80042ac <quorem+0xf0>
 80042ca:	3c01      	subs	r4, #1
 80042cc:	e7eb      	b.n	80042a6 <quorem+0xea>
 80042ce:	2000      	movs	r0, #0
 80042d0:	e7ee      	b.n	80042b0 <quorem+0xf4>
 80042d2:	0000      	movs	r0, r0
 80042d4:	0000      	movs	r0, r0
	...

080042d8 <_dtoa_r>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	ec59 8b10 	vmov	r8, r9, d0
 80042e0:	b095      	sub	sp, #84	; 0x54
 80042e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80042e4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80042e6:	9107      	str	r1, [sp, #28]
 80042e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80042ec:	4606      	mov	r6, r0
 80042ee:	9209      	str	r2, [sp, #36]	; 0x24
 80042f0:	9310      	str	r3, [sp, #64]	; 0x40
 80042f2:	b975      	cbnz	r5, 8004312 <_dtoa_r+0x3a>
 80042f4:	2010      	movs	r0, #16
 80042f6:	f001 f9e3 	bl	80056c0 <malloc>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6270      	str	r0, [r6, #36]	; 0x24
 80042fe:	b920      	cbnz	r0, 800430a <_dtoa_r+0x32>
 8004300:	4bab      	ldr	r3, [pc, #684]	; (80045b0 <_dtoa_r+0x2d8>)
 8004302:	21ea      	movs	r1, #234	; 0xea
 8004304:	48ab      	ldr	r0, [pc, #684]	; (80045b4 <_dtoa_r+0x2dc>)
 8004306:	f002 fb7d 	bl	8006a04 <__assert_func>
 800430a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800430e:	6005      	str	r5, [r0, #0]
 8004310:	60c5      	str	r5, [r0, #12]
 8004312:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004314:	6819      	ldr	r1, [r3, #0]
 8004316:	b151      	cbz	r1, 800432e <_dtoa_r+0x56>
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	604a      	str	r2, [r1, #4]
 800431c:	2301      	movs	r3, #1
 800431e:	4093      	lsls	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
 8004322:	4630      	mov	r0, r6
 8004324:	f001 fa34 	bl	8005790 <_Bfree>
 8004328:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f1b9 0300 	subs.w	r3, r9, #0
 8004332:	bfbb      	ittet	lt
 8004334:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004338:	9303      	strlt	r3, [sp, #12]
 800433a:	2300      	movge	r3, #0
 800433c:	2201      	movlt	r2, #1
 800433e:	bfac      	ite	ge
 8004340:	6023      	strge	r3, [r4, #0]
 8004342:	6022      	strlt	r2, [r4, #0]
 8004344:	4b9c      	ldr	r3, [pc, #624]	; (80045b8 <_dtoa_r+0x2e0>)
 8004346:	9c03      	ldr	r4, [sp, #12]
 8004348:	43a3      	bics	r3, r4
 800434a:	d11a      	bne.n	8004382 <_dtoa_r+0xaa>
 800434c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800434e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004358:	ea53 0308 	orrs.w	r3, r3, r8
 800435c:	f000 8512 	beq.w	8004d84 <_dtoa_r+0xaac>
 8004360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004362:	b953      	cbnz	r3, 800437a <_dtoa_r+0xa2>
 8004364:	4b95      	ldr	r3, [pc, #596]	; (80045bc <_dtoa_r+0x2e4>)
 8004366:	e01f      	b.n	80043a8 <_dtoa_r+0xd0>
 8004368:	4b95      	ldr	r3, [pc, #596]	; (80045c0 <_dtoa_r+0x2e8>)
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	9800      	ldr	r0, [sp, #0]
 8004374:	b015      	add	sp, #84	; 0x54
 8004376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437a:	4b90      	ldr	r3, [pc, #576]	; (80045bc <_dtoa_r+0x2e4>)
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	3303      	adds	r3, #3
 8004380:	e7f5      	b.n	800436e <_dtoa_r+0x96>
 8004382:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004386:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004392:	d10b      	bne.n	80043ac <_dtoa_r+0xd4>
 8004394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004396:	2301      	movs	r3, #1
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 84ee 	beq.w	8004d7e <_dtoa_r+0xaa6>
 80043a2:	4888      	ldr	r0, [pc, #544]	; (80045c4 <_dtoa_r+0x2ec>)
 80043a4:	6018      	str	r0, [r3, #0]
 80043a6:	1e43      	subs	r3, r0, #1
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	e7e2      	b.n	8004372 <_dtoa_r+0x9a>
 80043ac:	a913      	add	r1, sp, #76	; 0x4c
 80043ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80043b2:	aa12      	add	r2, sp, #72	; 0x48
 80043b4:	4630      	mov	r0, r6
 80043b6:	f001 fd93 	bl	8005ee0 <__d2b>
 80043ba:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80043be:	4605      	mov	r5, r0
 80043c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80043c2:	2900      	cmp	r1, #0
 80043c4:	d047      	beq.n	8004456 <_dtoa_r+0x17e>
 80043c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80043c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80043cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043d0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80043d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80043d8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80043dc:	2400      	movs	r4, #0
 80043de:	ec43 2b16 	vmov	d6, r2, r3
 80043e2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80043e6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8004598 <_dtoa_r+0x2c0>
 80043ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80043ee:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80045a0 <_dtoa_r+0x2c8>
 80043f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80043f6:	eeb0 7b46 	vmov.f64	d7, d6
 80043fa:	ee06 1a90 	vmov	s13, r1
 80043fe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8004402:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80045a8 <_dtoa_r+0x2d0>
 8004406:	eea5 7b06 	vfma.f64	d7, d5, d6
 800440a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800440e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004416:	ee16 ba90 	vmov	fp, s13
 800441a:	9411      	str	r4, [sp, #68]	; 0x44
 800441c:	d508      	bpl.n	8004430 <_dtoa_r+0x158>
 800441e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004422:	eeb4 6b47 	vcmp.f64	d6, d7
 8004426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442a:	bf18      	it	ne
 800442c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004430:	f1bb 0f16 	cmp.w	fp, #22
 8004434:	d832      	bhi.n	800449c <_dtoa_r+0x1c4>
 8004436:	4b64      	ldr	r3, [pc, #400]	; (80045c8 <_dtoa_r+0x2f0>)
 8004438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800443c:	ed93 7b00 	vldr	d7, [r3]
 8004440:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8004444:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	d501      	bpl.n	8004452 <_dtoa_r+0x17a>
 800444e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004452:	2300      	movs	r3, #0
 8004454:	e023      	b.n	800449e <_dtoa_r+0x1c6>
 8004456:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004458:	4401      	add	r1, r0
 800445a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800445e:	2b20      	cmp	r3, #32
 8004460:	bfc3      	ittte	gt
 8004462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004466:	fa04 f303 	lslgt.w	r3, r4, r3
 800446a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800446e:	f1c3 0320 	rsble	r3, r3, #32
 8004472:	bfc6      	itte	gt
 8004474:	fa28 f804 	lsrgt.w	r8, r8, r4
 8004478:	ea43 0308 	orrgt.w	r3, r3, r8
 800447c:	fa08 f303 	lslle.w	r3, r8, r3
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004488:	3901      	subs	r1, #1
 800448a:	ed8d 7b00 	vstr	d7, [sp]
 800448e:	9c01      	ldr	r4, [sp, #4]
 8004490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004494:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8004498:	2401      	movs	r4, #1
 800449a:	e7a0      	b.n	80043de <_dtoa_r+0x106>
 800449c:	2301      	movs	r3, #1
 800449e:	930f      	str	r3, [sp, #60]	; 0x3c
 80044a0:	1a43      	subs	r3, r0, r1
 80044a2:	1e5a      	subs	r2, r3, #1
 80044a4:	bf45      	ittet	mi
 80044a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80044aa:	9305      	strmi	r3, [sp, #20]
 80044ac:	2300      	movpl	r3, #0
 80044ae:	2300      	movmi	r3, #0
 80044b0:	9206      	str	r2, [sp, #24]
 80044b2:	bf54      	ite	pl
 80044b4:	9305      	strpl	r3, [sp, #20]
 80044b6:	9306      	strmi	r3, [sp, #24]
 80044b8:	f1bb 0f00 	cmp.w	fp, #0
 80044bc:	db18      	blt.n	80044f0 <_dtoa_r+0x218>
 80044be:	9b06      	ldr	r3, [sp, #24]
 80044c0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80044c4:	445b      	add	r3, fp
 80044c6:	9306      	str	r3, [sp, #24]
 80044c8:	2300      	movs	r3, #0
 80044ca:	9a07      	ldr	r2, [sp, #28]
 80044cc:	2a09      	cmp	r2, #9
 80044ce:	d849      	bhi.n	8004564 <_dtoa_r+0x28c>
 80044d0:	2a05      	cmp	r2, #5
 80044d2:	bfc4      	itt	gt
 80044d4:	3a04      	subgt	r2, #4
 80044d6:	9207      	strgt	r2, [sp, #28]
 80044d8:	9a07      	ldr	r2, [sp, #28]
 80044da:	f1a2 0202 	sub.w	r2, r2, #2
 80044de:	bfcc      	ite	gt
 80044e0:	2400      	movgt	r4, #0
 80044e2:	2401      	movle	r4, #1
 80044e4:	2a03      	cmp	r2, #3
 80044e6:	d848      	bhi.n	800457a <_dtoa_r+0x2a2>
 80044e8:	e8df f002 	tbb	[pc, r2]
 80044ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80044f0:	9b05      	ldr	r3, [sp, #20]
 80044f2:	2200      	movs	r2, #0
 80044f4:	eba3 030b 	sub.w	r3, r3, fp
 80044f8:	9305      	str	r3, [sp, #20]
 80044fa:	920e      	str	r2, [sp, #56]	; 0x38
 80044fc:	f1cb 0300 	rsb	r3, fp, #0
 8004500:	e7e3      	b.n	80044ca <_dtoa_r+0x1f2>
 8004502:	2200      	movs	r2, #0
 8004504:	9208      	str	r2, [sp, #32]
 8004506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004508:	2a00      	cmp	r2, #0
 800450a:	dc39      	bgt.n	8004580 <_dtoa_r+0x2a8>
 800450c:	f04f 0a01 	mov.w	sl, #1
 8004510:	46d1      	mov	r9, sl
 8004512:	4652      	mov	r2, sl
 8004514:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004518:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800451a:	2100      	movs	r1, #0
 800451c:	6079      	str	r1, [r7, #4]
 800451e:	2004      	movs	r0, #4
 8004520:	f100 0c14 	add.w	ip, r0, #20
 8004524:	4594      	cmp	ip, r2
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	d92f      	bls.n	800458a <_dtoa_r+0x2b2>
 800452a:	4630      	mov	r0, r6
 800452c:	930c      	str	r3, [sp, #48]	; 0x30
 800452e:	f001 f8ef 	bl	8005710 <_Balloc>
 8004532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004534:	9000      	str	r0, [sp, #0]
 8004536:	4602      	mov	r2, r0
 8004538:	2800      	cmp	r0, #0
 800453a:	d149      	bne.n	80045d0 <_dtoa_r+0x2f8>
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <_dtoa_r+0x2f4>)
 800453e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004542:	e6df      	b.n	8004304 <_dtoa_r+0x2c>
 8004544:	2201      	movs	r2, #1
 8004546:	e7dd      	b.n	8004504 <_dtoa_r+0x22c>
 8004548:	2200      	movs	r2, #0
 800454a:	9208      	str	r2, [sp, #32]
 800454c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800454e:	eb0b 0a02 	add.w	sl, fp, r2
 8004552:	f10a 0901 	add.w	r9, sl, #1
 8004556:	464a      	mov	r2, r9
 8004558:	2a01      	cmp	r2, #1
 800455a:	bfb8      	it	lt
 800455c:	2201      	movlt	r2, #1
 800455e:	e7db      	b.n	8004518 <_dtoa_r+0x240>
 8004560:	2201      	movs	r2, #1
 8004562:	e7f2      	b.n	800454a <_dtoa_r+0x272>
 8004564:	2401      	movs	r4, #1
 8004566:	2200      	movs	r2, #0
 8004568:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800456c:	f04f 3aff 	mov.w	sl, #4294967295
 8004570:	2100      	movs	r1, #0
 8004572:	46d1      	mov	r9, sl
 8004574:	2212      	movs	r2, #18
 8004576:	9109      	str	r1, [sp, #36]	; 0x24
 8004578:	e7ce      	b.n	8004518 <_dtoa_r+0x240>
 800457a:	2201      	movs	r2, #1
 800457c:	9208      	str	r2, [sp, #32]
 800457e:	e7f5      	b.n	800456c <_dtoa_r+0x294>
 8004580:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004584:	46d1      	mov	r9, sl
 8004586:	4652      	mov	r2, sl
 8004588:	e7c6      	b.n	8004518 <_dtoa_r+0x240>
 800458a:	3101      	adds	r1, #1
 800458c:	6079      	str	r1, [r7, #4]
 800458e:	0040      	lsls	r0, r0, #1
 8004590:	e7c6      	b.n	8004520 <_dtoa_r+0x248>
 8004592:	bf00      	nop
 8004594:	f3af 8000 	nop.w
 8004598:	636f4361 	.word	0x636f4361
 800459c:	3fd287a7 	.word	0x3fd287a7
 80045a0:	8b60c8b3 	.word	0x8b60c8b3
 80045a4:	3fc68a28 	.word	0x3fc68a28
 80045a8:	509f79fb 	.word	0x509f79fb
 80045ac:	3fd34413 	.word	0x3fd34413
 80045b0:	08007196 	.word	0x08007196
 80045b4:	080071ad 	.word	0x080071ad
 80045b8:	7ff00000 	.word	0x7ff00000
 80045bc:	08007192 	.word	0x08007192
 80045c0:	08007189 	.word	0x08007189
 80045c4:	08007009 	.word	0x08007009
 80045c8:	08007388 	.word	0x08007388
 80045cc:	0800720c 	.word	0x0800720c
 80045d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80045d2:	9900      	ldr	r1, [sp, #0]
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	f1b9 0f0e 	cmp.w	r9, #14
 80045da:	d872      	bhi.n	80046c2 <_dtoa_r+0x3ea>
 80045dc:	2c00      	cmp	r4, #0
 80045de:	d070      	beq.n	80046c2 <_dtoa_r+0x3ea>
 80045e0:	f1bb 0f00 	cmp.w	fp, #0
 80045e4:	f340 80a6 	ble.w	8004734 <_dtoa_r+0x45c>
 80045e8:	49ca      	ldr	r1, [pc, #808]	; (8004914 <_dtoa_r+0x63c>)
 80045ea:	f00b 020f 	and.w	r2, fp, #15
 80045ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80045f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80045f6:	ed92 7b00 	vldr	d7, [r2]
 80045fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80045fe:	f000 808d 	beq.w	800471c <_dtoa_r+0x444>
 8004602:	4ac5      	ldr	r2, [pc, #788]	; (8004918 <_dtoa_r+0x640>)
 8004604:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004608:	ed92 6b08 	vldr	d6, [r2, #32]
 800460c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004610:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004614:	f001 010f 	and.w	r1, r1, #15
 8004618:	2203      	movs	r2, #3
 800461a:	48bf      	ldr	r0, [pc, #764]	; (8004918 <_dtoa_r+0x640>)
 800461c:	2900      	cmp	r1, #0
 800461e:	d17f      	bne.n	8004720 <_dtoa_r+0x448>
 8004620:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004624:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004628:	ed8d 7b02 	vstr	d7, [sp, #8]
 800462c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800462e:	2900      	cmp	r1, #0
 8004630:	f000 80b2 	beq.w	8004798 <_dtoa_r+0x4c0>
 8004634:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004638:	ed9d 7b02 	vldr	d7, [sp, #8]
 800463c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	f140 80a8 	bpl.w	8004798 <_dtoa_r+0x4c0>
 8004648:	f1b9 0f00 	cmp.w	r9, #0
 800464c:	f000 80a4 	beq.w	8004798 <_dtoa_r+0x4c0>
 8004650:	f1ba 0f00 	cmp.w	sl, #0
 8004654:	dd31      	ble.n	80046ba <_dtoa_r+0x3e2>
 8004656:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800465a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800465e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004662:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004666:	3201      	adds	r2, #1
 8004668:	4650      	mov	r0, sl
 800466a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800466e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004672:	ee07 2a90 	vmov	s15, r2
 8004676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800467a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800467e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8004682:	9c03      	ldr	r4, [sp, #12]
 8004684:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004688:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800468c:	2800      	cmp	r0, #0
 800468e:	f040 8086 	bne.w	800479e <_dtoa_r+0x4c6>
 8004692:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004696:	ee36 6b47 	vsub.f64	d6, d6, d7
 800469a:	ec42 1b17 	vmov	d7, r1, r2
 800469e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	f300 8272 	bgt.w	8004b8e <_dtoa_r+0x8b6>
 80046aa:	eeb1 7b47 	vneg.f64	d7, d7
 80046ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80046b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b6:	f100 8267 	bmi.w	8004b88 <_dtoa_r+0x8b0>
 80046ba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80046be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80046c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	f2c0 8129 	blt.w	800491c <_dtoa_r+0x644>
 80046ca:	f1bb 0f0e 	cmp.w	fp, #14
 80046ce:	f300 8125 	bgt.w	800491c <_dtoa_r+0x644>
 80046d2:	4b90      	ldr	r3, [pc, #576]	; (8004914 <_dtoa_r+0x63c>)
 80046d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046d8:	ed93 6b00 	vldr	d6, [r3]
 80046dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f280 80c3 	bge.w	800486a <_dtoa_r+0x592>
 80046e4:	f1b9 0f00 	cmp.w	r9, #0
 80046e8:	f300 80bf 	bgt.w	800486a <_dtoa_r+0x592>
 80046ec:	f040 824c 	bne.w	8004b88 <_dtoa_r+0x8b0>
 80046f0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80046f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80046f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	464c      	mov	r4, r9
 8004706:	464f      	mov	r7, r9
 8004708:	f280 8222 	bge.w	8004b50 <_dtoa_r+0x878>
 800470c:	f8dd 8000 	ldr.w	r8, [sp]
 8004710:	2331      	movs	r3, #49	; 0x31
 8004712:	f808 3b01 	strb.w	r3, [r8], #1
 8004716:	f10b 0b01 	add.w	fp, fp, #1
 800471a:	e21e      	b.n	8004b5a <_dtoa_r+0x882>
 800471c:	2202      	movs	r2, #2
 800471e:	e77c      	b.n	800461a <_dtoa_r+0x342>
 8004720:	07cc      	lsls	r4, r1, #31
 8004722:	d504      	bpl.n	800472e <_dtoa_r+0x456>
 8004724:	ed90 6b00 	vldr	d6, [r0]
 8004728:	3201      	adds	r2, #1
 800472a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800472e:	1049      	asrs	r1, r1, #1
 8004730:	3008      	adds	r0, #8
 8004732:	e773      	b.n	800461c <_dtoa_r+0x344>
 8004734:	d02e      	beq.n	8004794 <_dtoa_r+0x4bc>
 8004736:	f1cb 0100 	rsb	r1, fp, #0
 800473a:	4a76      	ldr	r2, [pc, #472]	; (8004914 <_dtoa_r+0x63c>)
 800473c:	f001 000f 	and.w	r0, r1, #15
 8004740:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004744:	ed92 7b00 	vldr	d7, [r2]
 8004748:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800474c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004750:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004754:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8004758:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800475c:	486e      	ldr	r0, [pc, #440]	; (8004918 <_dtoa_r+0x640>)
 800475e:	1109      	asrs	r1, r1, #4
 8004760:	2400      	movs	r4, #0
 8004762:	2202      	movs	r2, #2
 8004764:	b939      	cbnz	r1, 8004776 <_dtoa_r+0x49e>
 8004766:	2c00      	cmp	r4, #0
 8004768:	f43f af60 	beq.w	800462c <_dtoa_r+0x354>
 800476c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004774:	e75a      	b.n	800462c <_dtoa_r+0x354>
 8004776:	07cf      	lsls	r7, r1, #31
 8004778:	d509      	bpl.n	800478e <_dtoa_r+0x4b6>
 800477a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800477e:	ed90 7b00 	vldr	d7, [r0]
 8004782:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004786:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800478a:	3201      	adds	r2, #1
 800478c:	2401      	movs	r4, #1
 800478e:	1049      	asrs	r1, r1, #1
 8004790:	3008      	adds	r0, #8
 8004792:	e7e7      	b.n	8004764 <_dtoa_r+0x48c>
 8004794:	2202      	movs	r2, #2
 8004796:	e749      	b.n	800462c <_dtoa_r+0x354>
 8004798:	465f      	mov	r7, fp
 800479a:	4648      	mov	r0, r9
 800479c:	e765      	b.n	800466a <_dtoa_r+0x392>
 800479e:	ec42 1b17 	vmov	d7, r1, r2
 80047a2:	4a5c      	ldr	r2, [pc, #368]	; (8004914 <_dtoa_r+0x63c>)
 80047a4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80047a8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80047ac:	9a00      	ldr	r2, [sp, #0]
 80047ae:	1814      	adds	r4, r2, r0
 80047b0:	9a08      	ldr	r2, [sp, #32]
 80047b2:	b352      	cbz	r2, 800480a <_dtoa_r+0x532>
 80047b4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80047b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80047bc:	f8dd 8000 	ldr.w	r8, [sp]
 80047c0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80047c4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80047c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80047cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80047d0:	ee14 2a90 	vmov	r2, s9
 80047d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80047d8:	3230      	adds	r2, #48	; 0x30
 80047da:	ee36 6b45 	vsub.f64	d6, d6, d5
 80047de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e6:	f808 2b01 	strb.w	r2, [r8], #1
 80047ea:	d439      	bmi.n	8004860 <_dtoa_r+0x588>
 80047ec:	ee32 5b46 	vsub.f64	d5, d2, d6
 80047f0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	d472      	bmi.n	80048e0 <_dtoa_r+0x608>
 80047fa:	45a0      	cmp	r8, r4
 80047fc:	f43f af5d 	beq.w	80046ba <_dtoa_r+0x3e2>
 8004800:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004804:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004808:	e7e0      	b.n	80047cc <_dtoa_r+0x4f4>
 800480a:	f8dd 8000 	ldr.w	r8, [sp]
 800480e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004812:	4621      	mov	r1, r4
 8004814:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004818:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800481c:	ee14 2a90 	vmov	r2, s9
 8004820:	3230      	adds	r2, #48	; 0x30
 8004822:	f808 2b01 	strb.w	r2, [r8], #1
 8004826:	45a0      	cmp	r8, r4
 8004828:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800482c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004830:	d118      	bne.n	8004864 <_dtoa_r+0x58c>
 8004832:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004836:	ee37 4b05 	vadd.f64	d4, d7, d5
 800483a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800483e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004842:	dc4d      	bgt.n	80048e0 <_dtoa_r+0x608>
 8004844:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004848:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004850:	f57f af33 	bpl.w	80046ba <_dtoa_r+0x3e2>
 8004854:	4688      	mov	r8, r1
 8004856:	3901      	subs	r1, #1
 8004858:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800485c:	2b30      	cmp	r3, #48	; 0x30
 800485e:	d0f9      	beq.n	8004854 <_dtoa_r+0x57c>
 8004860:	46bb      	mov	fp, r7
 8004862:	e02a      	b.n	80048ba <_dtoa_r+0x5e2>
 8004864:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004868:	e7d6      	b.n	8004818 <_dtoa_r+0x540>
 800486a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800486e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004872:	f8dd 8000 	ldr.w	r8, [sp]
 8004876:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800487a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800487e:	ee15 3a10 	vmov	r3, s10
 8004882:	3330      	adds	r3, #48	; 0x30
 8004884:	f808 3b01 	strb.w	r3, [r8], #1
 8004888:	9b00      	ldr	r3, [sp, #0]
 800488a:	eba8 0303 	sub.w	r3, r8, r3
 800488e:	4599      	cmp	r9, r3
 8004890:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004894:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004898:	d133      	bne.n	8004902 <_dtoa_r+0x62a>
 800489a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800489e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	dc1a      	bgt.n	80048de <_dtoa_r+0x606>
 80048a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	d103      	bne.n	80048ba <_dtoa_r+0x5e2>
 80048b2:	ee15 3a10 	vmov	r3, s10
 80048b6:	07d9      	lsls	r1, r3, #31
 80048b8:	d411      	bmi.n	80048de <_dtoa_r+0x606>
 80048ba:	4629      	mov	r1, r5
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 ff67 	bl	8005790 <_Bfree>
 80048c2:	2300      	movs	r3, #0
 80048c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048c6:	f888 3000 	strb.w	r3, [r8]
 80048ca:	f10b 0301 	add.w	r3, fp, #1
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f43f ad4d 	beq.w	8004372 <_dtoa_r+0x9a>
 80048d8:	f8c3 8000 	str.w	r8, [r3]
 80048dc:	e549      	b.n	8004372 <_dtoa_r+0x9a>
 80048de:	465f      	mov	r7, fp
 80048e0:	4643      	mov	r3, r8
 80048e2:	4698      	mov	r8, r3
 80048e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048e8:	2a39      	cmp	r2, #57	; 0x39
 80048ea:	d106      	bne.n	80048fa <_dtoa_r+0x622>
 80048ec:	9a00      	ldr	r2, [sp, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d1f7      	bne.n	80048e2 <_dtoa_r+0x60a>
 80048f2:	9900      	ldr	r1, [sp, #0]
 80048f4:	2230      	movs	r2, #48	; 0x30
 80048f6:	3701      	adds	r7, #1
 80048f8:	700a      	strb	r2, [r1, #0]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	3201      	adds	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e7ae      	b.n	8004860 <_dtoa_r+0x588>
 8004902:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004906:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d1b2      	bne.n	8004876 <_dtoa_r+0x59e>
 8004910:	e7d3      	b.n	80048ba <_dtoa_r+0x5e2>
 8004912:	bf00      	nop
 8004914:	08007388 	.word	0x08007388
 8004918:	08007360 	.word	0x08007360
 800491c:	9908      	ldr	r1, [sp, #32]
 800491e:	2900      	cmp	r1, #0
 8004920:	f000 80d1 	beq.w	8004ac6 <_dtoa_r+0x7ee>
 8004924:	9907      	ldr	r1, [sp, #28]
 8004926:	2901      	cmp	r1, #1
 8004928:	f300 80b4 	bgt.w	8004a94 <_dtoa_r+0x7bc>
 800492c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800492e:	2900      	cmp	r1, #0
 8004930:	f000 80ac 	beq.w	8004a8c <_dtoa_r+0x7b4>
 8004934:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004938:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800493c:	461c      	mov	r4, r3
 800493e:	930a      	str	r3, [sp, #40]	; 0x28
 8004940:	9b05      	ldr	r3, [sp, #20]
 8004942:	4413      	add	r3, r2
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	9b06      	ldr	r3, [sp, #24]
 8004948:	2101      	movs	r1, #1
 800494a:	4413      	add	r3, r2
 800494c:	4630      	mov	r0, r6
 800494e:	9306      	str	r3, [sp, #24]
 8004950:	f001 f824 	bl	800599c <__i2b>
 8004954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004956:	4607      	mov	r7, r0
 8004958:	f1b8 0f00 	cmp.w	r8, #0
 800495c:	dd0d      	ble.n	800497a <_dtoa_r+0x6a2>
 800495e:	9a06      	ldr	r2, [sp, #24]
 8004960:	2a00      	cmp	r2, #0
 8004962:	dd0a      	ble.n	800497a <_dtoa_r+0x6a2>
 8004964:	4542      	cmp	r2, r8
 8004966:	9905      	ldr	r1, [sp, #20]
 8004968:	bfa8      	it	ge
 800496a:	4642      	movge	r2, r8
 800496c:	1a89      	subs	r1, r1, r2
 800496e:	9105      	str	r1, [sp, #20]
 8004970:	9906      	ldr	r1, [sp, #24]
 8004972:	eba8 0802 	sub.w	r8, r8, r2
 8004976:	1a8a      	subs	r2, r1, r2
 8004978:	9206      	str	r2, [sp, #24]
 800497a:	b303      	cbz	r3, 80049be <_dtoa_r+0x6e6>
 800497c:	9a08      	ldr	r2, [sp, #32]
 800497e:	2a00      	cmp	r2, #0
 8004980:	f000 80a6 	beq.w	8004ad0 <_dtoa_r+0x7f8>
 8004984:	2c00      	cmp	r4, #0
 8004986:	dd13      	ble.n	80049b0 <_dtoa_r+0x6d8>
 8004988:	4639      	mov	r1, r7
 800498a:	4622      	mov	r2, r4
 800498c:	4630      	mov	r0, r6
 800498e:	930c      	str	r3, [sp, #48]	; 0x30
 8004990:	f001 f8c0 	bl	8005b14 <__pow5mult>
 8004994:	462a      	mov	r2, r5
 8004996:	4601      	mov	r1, r0
 8004998:	4607      	mov	r7, r0
 800499a:	4630      	mov	r0, r6
 800499c:	f001 f814 	bl	80059c8 <__multiply>
 80049a0:	4629      	mov	r1, r5
 80049a2:	900a      	str	r0, [sp, #40]	; 0x28
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 fef3 	bl	8005790 <_Bfree>
 80049aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049ae:	4615      	mov	r5, r2
 80049b0:	1b1a      	subs	r2, r3, r4
 80049b2:	d004      	beq.n	80049be <_dtoa_r+0x6e6>
 80049b4:	4629      	mov	r1, r5
 80049b6:	4630      	mov	r0, r6
 80049b8:	f001 f8ac 	bl	8005b14 <__pow5mult>
 80049bc:	4605      	mov	r5, r0
 80049be:	2101      	movs	r1, #1
 80049c0:	4630      	mov	r0, r6
 80049c2:	f000 ffeb 	bl	800599c <__i2b>
 80049c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	4604      	mov	r4, r0
 80049cc:	f340 8082 	ble.w	8004ad4 <_dtoa_r+0x7fc>
 80049d0:	461a      	mov	r2, r3
 80049d2:	4601      	mov	r1, r0
 80049d4:	4630      	mov	r0, r6
 80049d6:	f001 f89d 	bl	8005b14 <__pow5mult>
 80049da:	9b07      	ldr	r3, [sp, #28]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	4604      	mov	r4, r0
 80049e0:	dd7b      	ble.n	8004ada <_dtoa_r+0x802>
 80049e2:	2300      	movs	r3, #0
 80049e4:	930a      	str	r3, [sp, #40]	; 0x28
 80049e6:	6922      	ldr	r2, [r4, #16]
 80049e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80049ec:	6910      	ldr	r0, [r2, #16]
 80049ee:	f000 ff85 	bl	80058fc <__hi0bits>
 80049f2:	f1c0 0020 	rsb	r0, r0, #32
 80049f6:	9b06      	ldr	r3, [sp, #24]
 80049f8:	4418      	add	r0, r3
 80049fa:	f010 001f 	ands.w	r0, r0, #31
 80049fe:	f000 808d 	beq.w	8004b1c <_dtoa_r+0x844>
 8004a02:	f1c0 0220 	rsb	r2, r0, #32
 8004a06:	2a04      	cmp	r2, #4
 8004a08:	f340 8086 	ble.w	8004b18 <_dtoa_r+0x840>
 8004a0c:	f1c0 001c 	rsb	r0, r0, #28
 8004a10:	9b05      	ldr	r3, [sp, #20]
 8004a12:	4403      	add	r3, r0
 8004a14:	9305      	str	r3, [sp, #20]
 8004a16:	9b06      	ldr	r3, [sp, #24]
 8004a18:	4403      	add	r3, r0
 8004a1a:	4480      	add	r8, r0
 8004a1c:	9306      	str	r3, [sp, #24]
 8004a1e:	9b05      	ldr	r3, [sp, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dd05      	ble.n	8004a30 <_dtoa_r+0x758>
 8004a24:	4629      	mov	r1, r5
 8004a26:	461a      	mov	r2, r3
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f001 f8cd 	bl	8005bc8 <__lshift>
 8004a2e:	4605      	mov	r5, r0
 8004a30:	9b06      	ldr	r3, [sp, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	dd05      	ble.n	8004a42 <_dtoa_r+0x76a>
 8004a36:	4621      	mov	r1, r4
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f001 f8c4 	bl	8005bc8 <__lshift>
 8004a40:	4604      	mov	r4, r0
 8004a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d06b      	beq.n	8004b20 <_dtoa_r+0x848>
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f001 f928 	bl	8005ca0 <__mcmp>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	da65      	bge.n	8004b20 <_dtoa_r+0x848>
 8004a54:	2300      	movs	r3, #0
 8004a56:	4629      	mov	r1, r5
 8004a58:	220a      	movs	r2, #10
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f000 feba 	bl	80057d4 <__multadd>
 8004a60:	9b08      	ldr	r3, [sp, #32]
 8004a62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a66:	4605      	mov	r5, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8192 	beq.w	8004d92 <_dtoa_r+0xaba>
 8004a6e:	4639      	mov	r1, r7
 8004a70:	2300      	movs	r3, #0
 8004a72:	220a      	movs	r2, #10
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 fead 	bl	80057d4 <__multadd>
 8004a7a:	f1ba 0f00 	cmp.w	sl, #0
 8004a7e:	4607      	mov	r7, r0
 8004a80:	f300 808e 	bgt.w	8004ba0 <_dtoa_r+0x8c8>
 8004a84:	9b07      	ldr	r3, [sp, #28]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	dc51      	bgt.n	8004b2e <_dtoa_r+0x856>
 8004a8a:	e089      	b.n	8004ba0 <_dtoa_r+0x8c8>
 8004a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004a92:	e751      	b.n	8004938 <_dtoa_r+0x660>
 8004a94:	f109 34ff 	add.w	r4, r9, #4294967295
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	bfbf      	itttt	lt
 8004a9c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004a9e:	1ae3      	sublt	r3, r4, r3
 8004aa0:	18d2      	addlt	r2, r2, r3
 8004aa2:	4613      	movlt	r3, r2
 8004aa4:	bfb7      	itett	lt
 8004aa6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004aa8:	1b1c      	subge	r4, r3, r4
 8004aaa:	4623      	movlt	r3, r4
 8004aac:	2400      	movlt	r4, #0
 8004aae:	f1b9 0f00 	cmp.w	r9, #0
 8004ab2:	bfb5      	itete	lt
 8004ab4:	9a05      	ldrlt	r2, [sp, #20]
 8004ab6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8004aba:	eba2 0809 	sublt.w	r8, r2, r9
 8004abe:	464a      	movge	r2, r9
 8004ac0:	bfb8      	it	lt
 8004ac2:	2200      	movlt	r2, #0
 8004ac4:	e73b      	b.n	800493e <_dtoa_r+0x666>
 8004ac6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004aca:	9f08      	ldr	r7, [sp, #32]
 8004acc:	461c      	mov	r4, r3
 8004ace:	e743      	b.n	8004958 <_dtoa_r+0x680>
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	e76f      	b.n	80049b4 <_dtoa_r+0x6dc>
 8004ad4:	9b07      	ldr	r3, [sp, #28]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	dc18      	bgt.n	8004b0c <_dtoa_r+0x834>
 8004ada:	9b02      	ldr	r3, [sp, #8]
 8004adc:	b9b3      	cbnz	r3, 8004b0c <_dtoa_r+0x834>
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004ae4:	b9a2      	cbnz	r2, 8004b10 <_dtoa_r+0x838>
 8004ae6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aea:	0d12      	lsrs	r2, r2, #20
 8004aec:	0512      	lsls	r2, r2, #20
 8004aee:	b18a      	cbz	r2, 8004b14 <_dtoa_r+0x83c>
 8004af0:	9b05      	ldr	r3, [sp, #20]
 8004af2:	3301      	adds	r3, #1
 8004af4:	9305      	str	r3, [sp, #20]
 8004af6:	9b06      	ldr	r3, [sp, #24]
 8004af8:	3301      	adds	r3, #1
 8004afa:	9306      	str	r3, [sp, #24]
 8004afc:	2301      	movs	r3, #1
 8004afe:	930a      	str	r3, [sp, #40]	; 0x28
 8004b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f47f af6f 	bne.w	80049e6 <_dtoa_r+0x70e>
 8004b08:	2001      	movs	r0, #1
 8004b0a:	e774      	b.n	80049f6 <_dtoa_r+0x71e>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e7f6      	b.n	8004afe <_dtoa_r+0x826>
 8004b10:	9b02      	ldr	r3, [sp, #8]
 8004b12:	e7f4      	b.n	8004afe <_dtoa_r+0x826>
 8004b14:	920a      	str	r2, [sp, #40]	; 0x28
 8004b16:	e7f3      	b.n	8004b00 <_dtoa_r+0x828>
 8004b18:	d081      	beq.n	8004a1e <_dtoa_r+0x746>
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	301c      	adds	r0, #28
 8004b1e:	e777      	b.n	8004a10 <_dtoa_r+0x738>
 8004b20:	f1b9 0f00 	cmp.w	r9, #0
 8004b24:	dc37      	bgt.n	8004b96 <_dtoa_r+0x8be>
 8004b26:	9b07      	ldr	r3, [sp, #28]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	dd34      	ble.n	8004b96 <_dtoa_r+0x8be>
 8004b2c:	46ca      	mov	sl, r9
 8004b2e:	f1ba 0f00 	cmp.w	sl, #0
 8004b32:	d10d      	bne.n	8004b50 <_dtoa_r+0x878>
 8004b34:	4621      	mov	r1, r4
 8004b36:	4653      	mov	r3, sl
 8004b38:	2205      	movs	r2, #5
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 fe4a 	bl	80057d4 <__multadd>
 8004b40:	4601      	mov	r1, r0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4628      	mov	r0, r5
 8004b46:	f001 f8ab 	bl	8005ca0 <__mcmp>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	f73f adde 	bgt.w	800470c <_dtoa_r+0x434>
 8004b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b52:	f8dd 8000 	ldr.w	r8, [sp]
 8004b56:	ea6f 0b03 	mvn.w	fp, r3
 8004b5a:	f04f 0900 	mov.w	r9, #0
 8004b5e:	4621      	mov	r1, r4
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 fe15 	bl	8005790 <_Bfree>
 8004b66:	2f00      	cmp	r7, #0
 8004b68:	f43f aea7 	beq.w	80048ba <_dtoa_r+0x5e2>
 8004b6c:	f1b9 0f00 	cmp.w	r9, #0
 8004b70:	d005      	beq.n	8004b7e <_dtoa_r+0x8a6>
 8004b72:	45b9      	cmp	r9, r7
 8004b74:	d003      	beq.n	8004b7e <_dtoa_r+0x8a6>
 8004b76:	4649      	mov	r1, r9
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f000 fe09 	bl	8005790 <_Bfree>
 8004b7e:	4639      	mov	r1, r7
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 fe05 	bl	8005790 <_Bfree>
 8004b86:	e698      	b.n	80048ba <_dtoa_r+0x5e2>
 8004b88:	2400      	movs	r4, #0
 8004b8a:	4627      	mov	r7, r4
 8004b8c:	e7e0      	b.n	8004b50 <_dtoa_r+0x878>
 8004b8e:	46bb      	mov	fp, r7
 8004b90:	4604      	mov	r4, r0
 8004b92:	4607      	mov	r7, r0
 8004b94:	e5ba      	b.n	800470c <_dtoa_r+0x434>
 8004b96:	9b08      	ldr	r3, [sp, #32]
 8004b98:	46ca      	mov	sl, r9
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8100 	beq.w	8004da0 <_dtoa_r+0xac8>
 8004ba0:	f1b8 0f00 	cmp.w	r8, #0
 8004ba4:	dd05      	ble.n	8004bb2 <_dtoa_r+0x8da>
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	4642      	mov	r2, r8
 8004baa:	4630      	mov	r0, r6
 8004bac:	f001 f80c 	bl	8005bc8 <__lshift>
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05d      	beq.n	8004c74 <_dtoa_r+0x99c>
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f000 fda8 	bl	8005710 <_Balloc>
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	b928      	cbnz	r0, 8004bd0 <_dtoa_r+0x8f8>
 8004bc4:	4b82      	ldr	r3, [pc, #520]	; (8004dd0 <_dtoa_r+0xaf8>)
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004bcc:	f7ff bb9a 	b.w	8004304 <_dtoa_r+0x2c>
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	3202      	adds	r2, #2
 8004bd4:	0092      	lsls	r2, r2, #2
 8004bd6:	f107 010c 	add.w	r1, r7, #12
 8004bda:	300c      	adds	r0, #12
 8004bdc:	f000 fd8a 	bl	80056f4 <memcpy>
 8004be0:	2201      	movs	r2, #1
 8004be2:	4641      	mov	r1, r8
 8004be4:	4630      	mov	r0, r6
 8004be6:	f000 ffef 	bl	8005bc8 <__lshift>
 8004bea:	9b00      	ldr	r3, [sp, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	9305      	str	r3, [sp, #20]
 8004bf0:	9b00      	ldr	r3, [sp, #0]
 8004bf2:	4453      	add	r3, sl
 8004bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf6:	9b02      	ldr	r3, [sp, #8]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	46b9      	mov	r9, r7
 8004bfe:	9308      	str	r3, [sp, #32]
 8004c00:	4607      	mov	r7, r0
 8004c02:	9b05      	ldr	r3, [sp, #20]
 8004c04:	4621      	mov	r1, r4
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4628      	mov	r0, r5
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	f7ff fad6 	bl	80041bc <quorem>
 8004c10:	4603      	mov	r3, r0
 8004c12:	3330      	adds	r3, #48	; 0x30
 8004c14:	9006      	str	r0, [sp, #24]
 8004c16:	4649      	mov	r1, r9
 8004c18:	4628      	mov	r0, r5
 8004c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c1c:	f001 f840 	bl	8005ca0 <__mcmp>
 8004c20:	463a      	mov	r2, r7
 8004c22:	4682      	mov	sl, r0
 8004c24:	4621      	mov	r1, r4
 8004c26:	4630      	mov	r0, r6
 8004c28:	f001 f856 	bl	8005cd8 <__mdiff>
 8004c2c:	68c2      	ldr	r2, [r0, #12]
 8004c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c30:	4680      	mov	r8, r0
 8004c32:	bb0a      	cbnz	r2, 8004c78 <_dtoa_r+0x9a0>
 8004c34:	4601      	mov	r1, r0
 8004c36:	4628      	mov	r0, r5
 8004c38:	f001 f832 	bl	8005ca0 <__mcmp>
 8004c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4641      	mov	r1, r8
 8004c42:	4630      	mov	r0, r6
 8004c44:	920e      	str	r2, [sp, #56]	; 0x38
 8004c46:	930a      	str	r3, [sp, #40]	; 0x28
 8004c48:	f000 fda2 	bl	8005790 <_Bfree>
 8004c4c:	9b07      	ldr	r3, [sp, #28]
 8004c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004c54:	ea43 0102 	orr.w	r1, r3, r2
 8004c58:	9b08      	ldr	r3, [sp, #32]
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c5e:	d10d      	bne.n	8004c7c <_dtoa_r+0x9a4>
 8004c60:	2b39      	cmp	r3, #57	; 0x39
 8004c62:	d029      	beq.n	8004cb8 <_dtoa_r+0x9e0>
 8004c64:	f1ba 0f00 	cmp.w	sl, #0
 8004c68:	dd01      	ble.n	8004c6e <_dtoa_r+0x996>
 8004c6a:	9b06      	ldr	r3, [sp, #24]
 8004c6c:	3331      	adds	r3, #49	; 0x31
 8004c6e:	9a02      	ldr	r2, [sp, #8]
 8004c70:	7013      	strb	r3, [r2, #0]
 8004c72:	e774      	b.n	8004b5e <_dtoa_r+0x886>
 8004c74:	4638      	mov	r0, r7
 8004c76:	e7b8      	b.n	8004bea <_dtoa_r+0x912>
 8004c78:	2201      	movs	r2, #1
 8004c7a:	e7e1      	b.n	8004c40 <_dtoa_r+0x968>
 8004c7c:	f1ba 0f00 	cmp.w	sl, #0
 8004c80:	db06      	blt.n	8004c90 <_dtoa_r+0x9b8>
 8004c82:	9907      	ldr	r1, [sp, #28]
 8004c84:	ea41 0a0a 	orr.w	sl, r1, sl
 8004c88:	9908      	ldr	r1, [sp, #32]
 8004c8a:	ea5a 0101 	orrs.w	r1, sl, r1
 8004c8e:	d120      	bne.n	8004cd2 <_dtoa_r+0x9fa>
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	ddec      	ble.n	8004c6e <_dtoa_r+0x996>
 8004c94:	4629      	mov	r1, r5
 8004c96:	2201      	movs	r2, #1
 8004c98:	4630      	mov	r0, r6
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	f000 ff94 	bl	8005bc8 <__lshift>
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	f000 fffc 	bl	8005ca0 <__mcmp>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	dc02      	bgt.n	8004cb4 <_dtoa_r+0x9dc>
 8004cae:	d1de      	bne.n	8004c6e <_dtoa_r+0x996>
 8004cb0:	07da      	lsls	r2, r3, #31
 8004cb2:	d5dc      	bpl.n	8004c6e <_dtoa_r+0x996>
 8004cb4:	2b39      	cmp	r3, #57	; 0x39
 8004cb6:	d1d8      	bne.n	8004c6a <_dtoa_r+0x992>
 8004cb8:	9a02      	ldr	r2, [sp, #8]
 8004cba:	2339      	movs	r3, #57	; 0x39
 8004cbc:	7013      	strb	r3, [r2, #0]
 8004cbe:	4643      	mov	r3, r8
 8004cc0:	4698      	mov	r8, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004cc8:	2a39      	cmp	r2, #57	; 0x39
 8004cca:	d051      	beq.n	8004d70 <_dtoa_r+0xa98>
 8004ccc:	3201      	adds	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e745      	b.n	8004b5e <_dtoa_r+0x886>
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	dd03      	ble.n	8004cde <_dtoa_r+0xa06>
 8004cd6:	2b39      	cmp	r3, #57	; 0x39
 8004cd8:	d0ee      	beq.n	8004cb8 <_dtoa_r+0x9e0>
 8004cda:	3301      	adds	r3, #1
 8004cdc:	e7c7      	b.n	8004c6e <_dtoa_r+0x996>
 8004cde:	9a05      	ldr	r2, [sp, #20]
 8004ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ce2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004ce6:	428a      	cmp	r2, r1
 8004ce8:	d02b      	beq.n	8004d42 <_dtoa_r+0xa6a>
 8004cea:	4629      	mov	r1, r5
 8004cec:	2300      	movs	r3, #0
 8004cee:	220a      	movs	r2, #10
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 fd6f 	bl	80057d4 <__multadd>
 8004cf6:	45b9      	cmp	r9, r7
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	f04f 020a 	mov.w	r2, #10
 8004d02:	4649      	mov	r1, r9
 8004d04:	4630      	mov	r0, r6
 8004d06:	d107      	bne.n	8004d18 <_dtoa_r+0xa40>
 8004d08:	f000 fd64 	bl	80057d4 <__multadd>
 8004d0c:	4681      	mov	r9, r0
 8004d0e:	4607      	mov	r7, r0
 8004d10:	9b05      	ldr	r3, [sp, #20]
 8004d12:	3301      	adds	r3, #1
 8004d14:	9305      	str	r3, [sp, #20]
 8004d16:	e774      	b.n	8004c02 <_dtoa_r+0x92a>
 8004d18:	f000 fd5c 	bl	80057d4 <__multadd>
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	4681      	mov	r9, r0
 8004d20:	2300      	movs	r3, #0
 8004d22:	220a      	movs	r2, #10
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 fd55 	bl	80057d4 <__multadd>
 8004d2a:	4607      	mov	r7, r0
 8004d2c:	e7f0      	b.n	8004d10 <_dtoa_r+0xa38>
 8004d2e:	f1ba 0f00 	cmp.w	sl, #0
 8004d32:	9a00      	ldr	r2, [sp, #0]
 8004d34:	bfcc      	ite	gt
 8004d36:	46d0      	movgt	r8, sl
 8004d38:	f04f 0801 	movle.w	r8, #1
 8004d3c:	4490      	add	r8, r2
 8004d3e:	f04f 0900 	mov.w	r9, #0
 8004d42:	4629      	mov	r1, r5
 8004d44:	2201      	movs	r2, #1
 8004d46:	4630      	mov	r0, r6
 8004d48:	9302      	str	r3, [sp, #8]
 8004d4a:	f000 ff3d 	bl	8005bc8 <__lshift>
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4605      	mov	r5, r0
 8004d52:	f000 ffa5 	bl	8005ca0 <__mcmp>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	dcb1      	bgt.n	8004cbe <_dtoa_r+0x9e6>
 8004d5a:	d102      	bne.n	8004d62 <_dtoa_r+0xa8a>
 8004d5c:	9b02      	ldr	r3, [sp, #8]
 8004d5e:	07db      	lsls	r3, r3, #31
 8004d60:	d4ad      	bmi.n	8004cbe <_dtoa_r+0x9e6>
 8004d62:	4643      	mov	r3, r8
 8004d64:	4698      	mov	r8, r3
 8004d66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d6a:	2a30      	cmp	r2, #48	; 0x30
 8004d6c:	d0fa      	beq.n	8004d64 <_dtoa_r+0xa8c>
 8004d6e:	e6f6      	b.n	8004b5e <_dtoa_r+0x886>
 8004d70:	9a00      	ldr	r2, [sp, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d1a4      	bne.n	8004cc0 <_dtoa_r+0x9e8>
 8004d76:	f10b 0b01 	add.w	fp, fp, #1
 8004d7a:	2331      	movs	r3, #49	; 0x31
 8004d7c:	e778      	b.n	8004c70 <_dtoa_r+0x998>
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <_dtoa_r+0xafc>)
 8004d80:	f7ff bb12 	b.w	80043a8 <_dtoa_r+0xd0>
 8004d84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f47f aaee 	bne.w	8004368 <_dtoa_r+0x90>
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <_dtoa_r+0xb00>)
 8004d8e:	f7ff bb0b 	b.w	80043a8 <_dtoa_r+0xd0>
 8004d92:	f1ba 0f00 	cmp.w	sl, #0
 8004d96:	dc03      	bgt.n	8004da0 <_dtoa_r+0xac8>
 8004d98:	9b07      	ldr	r3, [sp, #28]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	f73f aec7 	bgt.w	8004b2e <_dtoa_r+0x856>
 8004da0:	f8dd 8000 	ldr.w	r8, [sp]
 8004da4:	4621      	mov	r1, r4
 8004da6:	4628      	mov	r0, r5
 8004da8:	f7ff fa08 	bl	80041bc <quorem>
 8004dac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004db0:	f808 3b01 	strb.w	r3, [r8], #1
 8004db4:	9a00      	ldr	r2, [sp, #0]
 8004db6:	eba8 0202 	sub.w	r2, r8, r2
 8004dba:	4592      	cmp	sl, r2
 8004dbc:	ddb7      	ble.n	8004d2e <_dtoa_r+0xa56>
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	220a      	movs	r2, #10
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 fd05 	bl	80057d4 <__multadd>
 8004dca:	4605      	mov	r5, r0
 8004dcc:	e7ea      	b.n	8004da4 <_dtoa_r+0xacc>
 8004dce:	bf00      	nop
 8004dd0:	0800720c 	.word	0x0800720c
 8004dd4:	08007008 	.word	0x08007008
 8004dd8:	08007189 	.word	0x08007189

08004ddc <__errno>:
 8004ddc:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <__errno+0x8>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000020 	.word	0x20000020

08004de8 <std>:
 8004de8:	2300      	movs	r3, #0
 8004dea:	b510      	push	{r4, lr}
 8004dec:	4604      	mov	r4, r0
 8004dee:	e9c0 3300 	strd	r3, r3, [r0]
 8004df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004df6:	6083      	str	r3, [r0, #8]
 8004df8:	8181      	strh	r1, [r0, #12]
 8004dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8004dfc:	81c2      	strh	r2, [r0, #14]
 8004dfe:	6183      	str	r3, [r0, #24]
 8004e00:	4619      	mov	r1, r3
 8004e02:	2208      	movs	r2, #8
 8004e04:	305c      	adds	r0, #92	; 0x5c
 8004e06:	f7fd fccf 	bl	80027a8 <memset>
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <std+0x38>)
 8004e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <std+0x3c>)
 8004e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <std+0x40>)
 8004e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <std+0x44>)
 8004e18:	6224      	str	r4, [r4, #32]
 8004e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	bf00      	nop
 8004e20:	08006799 	.word	0x08006799
 8004e24:	080067bb 	.word	0x080067bb
 8004e28:	080067f3 	.word	0x080067f3
 8004e2c:	08006817 	.word	0x08006817

08004e30 <_cleanup_r>:
 8004e30:	4901      	ldr	r1, [pc, #4]	; (8004e38 <_cleanup_r+0x8>)
 8004e32:	f000 b8af 	b.w	8004f94 <_fwalk_reent>
 8004e36:	bf00      	nop
 8004e38:	08006b6d 	.word	0x08006b6d

08004e3c <__sfmoreglue>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	1e4a      	subs	r2, r1, #1
 8004e40:	2568      	movs	r5, #104	; 0x68
 8004e42:	4355      	muls	r5, r2
 8004e44:	460e      	mov	r6, r1
 8004e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e4a:	f001 f97d 	bl	8006148 <_malloc_r>
 8004e4e:	4604      	mov	r4, r0
 8004e50:	b140      	cbz	r0, 8004e64 <__sfmoreglue+0x28>
 8004e52:	2100      	movs	r1, #0
 8004e54:	e9c0 1600 	strd	r1, r6, [r0]
 8004e58:	300c      	adds	r0, #12
 8004e5a:	60a0      	str	r0, [r4, #8]
 8004e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e60:	f7fd fca2 	bl	80027a8 <memset>
 8004e64:	4620      	mov	r0, r4
 8004e66:	bd70      	pop	{r4, r5, r6, pc}

08004e68 <__sfp_lock_acquire>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__sfp_lock_acquire+0x8>)
 8004e6a:	f000 bc26 	b.w	80056ba <__retarget_lock_acquire_recursive>
 8004e6e:	bf00      	nop
 8004e70:	200006e8 	.word	0x200006e8

08004e74 <__sfp_lock_release>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__sfp_lock_release+0x8>)
 8004e76:	f000 bc21 	b.w	80056bc <__retarget_lock_release_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	200006e8 	.word	0x200006e8

08004e80 <__sinit_lock_acquire>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__sinit_lock_acquire+0x8>)
 8004e82:	f000 bc1a 	b.w	80056ba <__retarget_lock_acquire_recursive>
 8004e86:	bf00      	nop
 8004e88:	200006e3 	.word	0x200006e3

08004e8c <__sinit_lock_release>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__sinit_lock_release+0x8>)
 8004e8e:	f000 bc15 	b.w	80056bc <__retarget_lock_release_recursive>
 8004e92:	bf00      	nop
 8004e94:	200006e3 	.word	0x200006e3

08004e98 <__sinit>:
 8004e98:	b510      	push	{r4, lr}
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	f7ff fff0 	bl	8004e80 <__sinit_lock_acquire>
 8004ea0:	69a3      	ldr	r3, [r4, #24]
 8004ea2:	b11b      	cbz	r3, 8004eac <__sinit+0x14>
 8004ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea8:	f7ff bff0 	b.w	8004e8c <__sinit_lock_release>
 8004eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <__sinit+0x68>)
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <__sinit+0x6c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	bf04      	itt	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	61a3      	streq	r3, [r4, #24]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f000 f820 	bl	8004f08 <__sfp>
 8004ec8:	6060      	str	r0, [r4, #4]
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 f81c 	bl	8004f08 <__sfp>
 8004ed0:	60a0      	str	r0, [r4, #8]
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f818 	bl	8004f08 <__sfp>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	60e0      	str	r0, [r4, #12]
 8004edc:	2104      	movs	r1, #4
 8004ede:	6860      	ldr	r0, [r4, #4]
 8004ee0:	f7ff ff82 	bl	8004de8 <std>
 8004ee4:	68a0      	ldr	r0, [r4, #8]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2109      	movs	r1, #9
 8004eea:	f7ff ff7d 	bl	8004de8 <std>
 8004eee:	68e0      	ldr	r0, [r4, #12]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	2112      	movs	r1, #18
 8004ef4:	f7ff ff78 	bl	8004de8 <std>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	61a3      	str	r3, [r4, #24]
 8004efc:	e7d2      	b.n	8004ea4 <__sinit+0xc>
 8004efe:	bf00      	nop
 8004f00:	08006ff4 	.word	0x08006ff4
 8004f04:	08004e31 	.word	0x08004e31

08004f08 <__sfp>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	f7ff ffac 	bl	8004e68 <__sfp_lock_acquire>
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <__sfp+0x84>)
 8004f12:	681e      	ldr	r6, [r3, #0]
 8004f14:	69b3      	ldr	r3, [r6, #24]
 8004f16:	b913      	cbnz	r3, 8004f1e <__sfp+0x16>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffbd 	bl	8004e98 <__sinit>
 8004f1e:	3648      	adds	r6, #72	; 0x48
 8004f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	d503      	bpl.n	8004f30 <__sfp+0x28>
 8004f28:	6833      	ldr	r3, [r6, #0]
 8004f2a:	b30b      	cbz	r3, 8004f70 <__sfp+0x68>
 8004f2c:	6836      	ldr	r6, [r6, #0]
 8004f2e:	e7f7      	b.n	8004f20 <__sfp+0x18>
 8004f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f34:	b9d5      	cbnz	r5, 8004f6c <__sfp+0x64>
 8004f36:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <__sfp+0x88>)
 8004f38:	60e3      	str	r3, [r4, #12]
 8004f3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f40:	f000 fbba 	bl	80056b8 <__retarget_lock_init_recursive>
 8004f44:	f7ff ff96 	bl	8004e74 <__sfp_lock_release>
 8004f48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f50:	6025      	str	r5, [r4, #0]
 8004f52:	61a5      	str	r5, [r4, #24]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4629      	mov	r1, r5
 8004f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f5c:	f7fd fc24 	bl	80027a8 <memset>
 8004f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f68:	4620      	mov	r0, r4
 8004f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6c:	3468      	adds	r4, #104	; 0x68
 8004f6e:	e7d9      	b.n	8004f24 <__sfp+0x1c>
 8004f70:	2104      	movs	r1, #4
 8004f72:	4638      	mov	r0, r7
 8004f74:	f7ff ff62 	bl	8004e3c <__sfmoreglue>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	6030      	str	r0, [r6, #0]
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d1d5      	bne.n	8004f2c <__sfp+0x24>
 8004f80:	f7ff ff78 	bl	8004e74 <__sfp_lock_release>
 8004f84:	230c      	movs	r3, #12
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	e7ee      	b.n	8004f68 <__sfp+0x60>
 8004f8a:	bf00      	nop
 8004f8c:	08006ff4 	.word	0x08006ff4
 8004f90:	ffff0001 	.word	0xffff0001

08004f94 <_fwalk_reent>:
 8004f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f98:	4606      	mov	r6, r0
 8004f9a:	4688      	mov	r8, r1
 8004f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fa0:	2700      	movs	r7, #0
 8004fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8004faa:	d505      	bpl.n	8004fb8 <_fwalk_reent+0x24>
 8004fac:	6824      	ldr	r4, [r4, #0]
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	d1f7      	bne.n	8004fa2 <_fwalk_reent+0xe>
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb8:	89ab      	ldrh	r3, [r5, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d907      	bls.n	8004fce <_fwalk_reent+0x3a>
 8004fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	d003      	beq.n	8004fce <_fwalk_reent+0x3a>
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	47c0      	blx	r8
 8004fcc:	4307      	orrs	r7, r0
 8004fce:	3568      	adds	r5, #104	; 0x68
 8004fd0:	e7e9      	b.n	8004fa6 <_fwalk_reent+0x12>

08004fd2 <rshift>:
 8004fd2:	6903      	ldr	r3, [r0, #16]
 8004fd4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fdc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004fe0:	f100 0414 	add.w	r4, r0, #20
 8004fe4:	dd45      	ble.n	8005072 <rshift+0xa0>
 8004fe6:	f011 011f 	ands.w	r1, r1, #31
 8004fea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004fee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004ff2:	d10c      	bne.n	800500e <rshift+0x3c>
 8004ff4:	f100 0710 	add.w	r7, r0, #16
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	42b1      	cmp	r1, r6
 8004ffc:	d334      	bcc.n	8005068 <rshift+0x96>
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	1eea      	subs	r2, r5, #3
 8005004:	4296      	cmp	r6, r2
 8005006:	bf38      	it	cc
 8005008:	2300      	movcc	r3, #0
 800500a:	4423      	add	r3, r4
 800500c:	e015      	b.n	800503a <rshift+0x68>
 800500e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005012:	f1c1 0820 	rsb	r8, r1, #32
 8005016:	40cf      	lsrs	r7, r1
 8005018:	f105 0e04 	add.w	lr, r5, #4
 800501c:	46a1      	mov	r9, r4
 800501e:	4576      	cmp	r6, lr
 8005020:	46f4      	mov	ip, lr
 8005022:	d815      	bhi.n	8005050 <rshift+0x7e>
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009a      	lsls	r2, r3, #2
 8005028:	3a04      	subs	r2, #4
 800502a:	3501      	adds	r5, #1
 800502c:	42ae      	cmp	r6, r5
 800502e:	bf38      	it	cc
 8005030:	2200      	movcc	r2, #0
 8005032:	18a3      	adds	r3, r4, r2
 8005034:	50a7      	str	r7, [r4, r2]
 8005036:	b107      	cbz	r7, 800503a <rshift+0x68>
 8005038:	3304      	adds	r3, #4
 800503a:	1b1a      	subs	r2, r3, r4
 800503c:	42a3      	cmp	r3, r4
 800503e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005042:	bf08      	it	eq
 8005044:	2300      	moveq	r3, #0
 8005046:	6102      	str	r2, [r0, #16]
 8005048:	bf08      	it	eq
 800504a:	6143      	streq	r3, [r0, #20]
 800504c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005050:	f8dc c000 	ldr.w	ip, [ip]
 8005054:	fa0c fc08 	lsl.w	ip, ip, r8
 8005058:	ea4c 0707 	orr.w	r7, ip, r7
 800505c:	f849 7b04 	str.w	r7, [r9], #4
 8005060:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005064:	40cf      	lsrs	r7, r1
 8005066:	e7da      	b.n	800501e <rshift+0x4c>
 8005068:	f851 cb04 	ldr.w	ip, [r1], #4
 800506c:	f847 cf04 	str.w	ip, [r7, #4]!
 8005070:	e7c3      	b.n	8004ffa <rshift+0x28>
 8005072:	4623      	mov	r3, r4
 8005074:	e7e1      	b.n	800503a <rshift+0x68>

08005076 <__hexdig_fun>:
 8005076:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800507a:	2b09      	cmp	r3, #9
 800507c:	d802      	bhi.n	8005084 <__hexdig_fun+0xe>
 800507e:	3820      	subs	r0, #32
 8005080:	b2c0      	uxtb	r0, r0
 8005082:	4770      	bx	lr
 8005084:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005088:	2b05      	cmp	r3, #5
 800508a:	d801      	bhi.n	8005090 <__hexdig_fun+0x1a>
 800508c:	3847      	subs	r0, #71	; 0x47
 800508e:	e7f7      	b.n	8005080 <__hexdig_fun+0xa>
 8005090:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005094:	2b05      	cmp	r3, #5
 8005096:	d801      	bhi.n	800509c <__hexdig_fun+0x26>
 8005098:	3827      	subs	r0, #39	; 0x27
 800509a:	e7f1      	b.n	8005080 <__hexdig_fun+0xa>
 800509c:	2000      	movs	r0, #0
 800509e:	4770      	bx	lr

080050a0 <__gethex>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	ed2d 8b02 	vpush	{d8}
 80050a8:	b089      	sub	sp, #36	; 0x24
 80050aa:	ee08 0a10 	vmov	s16, r0
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	4bbc      	ldr	r3, [pc, #752]	; (80053a4 <__gethex+0x304>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	468b      	mov	fp, r1
 80050ba:	4690      	mov	r8, r2
 80050bc:	f7fb f910 	bl	80002e0 <strlen>
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	f8db 2000 	ldr.w	r2, [fp]
 80050c6:	4403      	add	r3, r0
 80050c8:	4682      	mov	sl, r0
 80050ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80050ce:	9305      	str	r3, [sp, #20]
 80050d0:	1c93      	adds	r3, r2, #2
 80050d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80050d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80050da:	32fe      	adds	r2, #254	; 0xfe
 80050dc:	18d1      	adds	r1, r2, r3
 80050de:	461f      	mov	r7, r3
 80050e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80050e4:	9100      	str	r1, [sp, #0]
 80050e6:	2830      	cmp	r0, #48	; 0x30
 80050e8:	d0f8      	beq.n	80050dc <__gethex+0x3c>
 80050ea:	f7ff ffc4 	bl	8005076 <__hexdig_fun>
 80050ee:	4604      	mov	r4, r0
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d13a      	bne.n	800516a <__gethex+0xca>
 80050f4:	9901      	ldr	r1, [sp, #4]
 80050f6:	4652      	mov	r2, sl
 80050f8:	4638      	mov	r0, r7
 80050fa:	f001 fb90 	bl	800681e <strncmp>
 80050fe:	4605      	mov	r5, r0
 8005100:	2800      	cmp	r0, #0
 8005102:	d168      	bne.n	80051d6 <__gethex+0x136>
 8005104:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005108:	eb07 060a 	add.w	r6, r7, sl
 800510c:	f7ff ffb3 	bl	8005076 <__hexdig_fun>
 8005110:	2800      	cmp	r0, #0
 8005112:	d062      	beq.n	80051da <__gethex+0x13a>
 8005114:	4633      	mov	r3, r6
 8005116:	7818      	ldrb	r0, [r3, #0]
 8005118:	2830      	cmp	r0, #48	; 0x30
 800511a:	461f      	mov	r7, r3
 800511c:	f103 0301 	add.w	r3, r3, #1
 8005120:	d0f9      	beq.n	8005116 <__gethex+0x76>
 8005122:	f7ff ffa8 	bl	8005076 <__hexdig_fun>
 8005126:	2301      	movs	r3, #1
 8005128:	fab0 f480 	clz	r4, r0
 800512c:	0964      	lsrs	r4, r4, #5
 800512e:	4635      	mov	r5, r6
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	463a      	mov	r2, r7
 8005134:	4616      	mov	r6, r2
 8005136:	3201      	adds	r2, #1
 8005138:	7830      	ldrb	r0, [r6, #0]
 800513a:	f7ff ff9c 	bl	8005076 <__hexdig_fun>
 800513e:	2800      	cmp	r0, #0
 8005140:	d1f8      	bne.n	8005134 <__gethex+0x94>
 8005142:	9901      	ldr	r1, [sp, #4]
 8005144:	4652      	mov	r2, sl
 8005146:	4630      	mov	r0, r6
 8005148:	f001 fb69 	bl	800681e <strncmp>
 800514c:	b980      	cbnz	r0, 8005170 <__gethex+0xd0>
 800514e:	b94d      	cbnz	r5, 8005164 <__gethex+0xc4>
 8005150:	eb06 050a 	add.w	r5, r6, sl
 8005154:	462a      	mov	r2, r5
 8005156:	4616      	mov	r6, r2
 8005158:	3201      	adds	r2, #1
 800515a:	7830      	ldrb	r0, [r6, #0]
 800515c:	f7ff ff8b 	bl	8005076 <__hexdig_fun>
 8005160:	2800      	cmp	r0, #0
 8005162:	d1f8      	bne.n	8005156 <__gethex+0xb6>
 8005164:	1bad      	subs	r5, r5, r6
 8005166:	00ad      	lsls	r5, r5, #2
 8005168:	e004      	b.n	8005174 <__gethex+0xd4>
 800516a:	2400      	movs	r4, #0
 800516c:	4625      	mov	r5, r4
 800516e:	e7e0      	b.n	8005132 <__gethex+0x92>
 8005170:	2d00      	cmp	r5, #0
 8005172:	d1f7      	bne.n	8005164 <__gethex+0xc4>
 8005174:	7833      	ldrb	r3, [r6, #0]
 8005176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800517a:	2b50      	cmp	r3, #80	; 0x50
 800517c:	d13b      	bne.n	80051f6 <__gethex+0x156>
 800517e:	7873      	ldrb	r3, [r6, #1]
 8005180:	2b2b      	cmp	r3, #43	; 0x2b
 8005182:	d02c      	beq.n	80051de <__gethex+0x13e>
 8005184:	2b2d      	cmp	r3, #45	; 0x2d
 8005186:	d02e      	beq.n	80051e6 <__gethex+0x146>
 8005188:	1c71      	adds	r1, r6, #1
 800518a:	f04f 0900 	mov.w	r9, #0
 800518e:	7808      	ldrb	r0, [r1, #0]
 8005190:	f7ff ff71 	bl	8005076 <__hexdig_fun>
 8005194:	1e43      	subs	r3, r0, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b18      	cmp	r3, #24
 800519a:	d82c      	bhi.n	80051f6 <__gethex+0x156>
 800519c:	f1a0 0210 	sub.w	r2, r0, #16
 80051a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80051a4:	f7ff ff67 	bl	8005076 <__hexdig_fun>
 80051a8:	1e43      	subs	r3, r0, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b18      	cmp	r3, #24
 80051ae:	d91d      	bls.n	80051ec <__gethex+0x14c>
 80051b0:	f1b9 0f00 	cmp.w	r9, #0
 80051b4:	d000      	beq.n	80051b8 <__gethex+0x118>
 80051b6:	4252      	negs	r2, r2
 80051b8:	4415      	add	r5, r2
 80051ba:	f8cb 1000 	str.w	r1, [fp]
 80051be:	b1e4      	cbz	r4, 80051fa <__gethex+0x15a>
 80051c0:	9b00      	ldr	r3, [sp, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf14      	ite	ne
 80051c6:	2700      	movne	r7, #0
 80051c8:	2706      	moveq	r7, #6
 80051ca:	4638      	mov	r0, r7
 80051cc:	b009      	add	sp, #36	; 0x24
 80051ce:	ecbd 8b02 	vpop	{d8}
 80051d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d6:	463e      	mov	r6, r7
 80051d8:	4625      	mov	r5, r4
 80051da:	2401      	movs	r4, #1
 80051dc:	e7ca      	b.n	8005174 <__gethex+0xd4>
 80051de:	f04f 0900 	mov.w	r9, #0
 80051e2:	1cb1      	adds	r1, r6, #2
 80051e4:	e7d3      	b.n	800518e <__gethex+0xee>
 80051e6:	f04f 0901 	mov.w	r9, #1
 80051ea:	e7fa      	b.n	80051e2 <__gethex+0x142>
 80051ec:	230a      	movs	r3, #10
 80051ee:	fb03 0202 	mla	r2, r3, r2, r0
 80051f2:	3a10      	subs	r2, #16
 80051f4:	e7d4      	b.n	80051a0 <__gethex+0x100>
 80051f6:	4631      	mov	r1, r6
 80051f8:	e7df      	b.n	80051ba <__gethex+0x11a>
 80051fa:	1bf3      	subs	r3, r6, r7
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4621      	mov	r1, r4
 8005200:	2b07      	cmp	r3, #7
 8005202:	dc0b      	bgt.n	800521c <__gethex+0x17c>
 8005204:	ee18 0a10 	vmov	r0, s16
 8005208:	f000 fa82 	bl	8005710 <_Balloc>
 800520c:	4604      	mov	r4, r0
 800520e:	b940      	cbnz	r0, 8005222 <__gethex+0x182>
 8005210:	4b65      	ldr	r3, [pc, #404]	; (80053a8 <__gethex+0x308>)
 8005212:	4602      	mov	r2, r0
 8005214:	21de      	movs	r1, #222	; 0xde
 8005216:	4865      	ldr	r0, [pc, #404]	; (80053ac <__gethex+0x30c>)
 8005218:	f001 fbf4 	bl	8006a04 <__assert_func>
 800521c:	3101      	adds	r1, #1
 800521e:	105b      	asrs	r3, r3, #1
 8005220:	e7ee      	b.n	8005200 <__gethex+0x160>
 8005222:	f100 0914 	add.w	r9, r0, #20
 8005226:	f04f 0b00 	mov.w	fp, #0
 800522a:	f1ca 0301 	rsb	r3, sl, #1
 800522e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005232:	f8cd b000 	str.w	fp, [sp]
 8005236:	9306      	str	r3, [sp, #24]
 8005238:	42b7      	cmp	r7, r6
 800523a:	d340      	bcc.n	80052be <__gethex+0x21e>
 800523c:	9802      	ldr	r0, [sp, #8]
 800523e:	9b00      	ldr	r3, [sp, #0]
 8005240:	f840 3b04 	str.w	r3, [r0], #4
 8005244:	eba0 0009 	sub.w	r0, r0, r9
 8005248:	1080      	asrs	r0, r0, #2
 800524a:	0146      	lsls	r6, r0, #5
 800524c:	6120      	str	r0, [r4, #16]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb54 	bl	80058fc <__hi0bits>
 8005254:	1a30      	subs	r0, r6, r0
 8005256:	f8d8 6000 	ldr.w	r6, [r8]
 800525a:	42b0      	cmp	r0, r6
 800525c:	dd63      	ble.n	8005326 <__gethex+0x286>
 800525e:	1b87      	subs	r7, r0, r6
 8005260:	4639      	mov	r1, r7
 8005262:	4620      	mov	r0, r4
 8005264:	f000 feef 	bl	8006046 <__any_on>
 8005268:	4682      	mov	sl, r0
 800526a:	b1a8      	cbz	r0, 8005298 <__gethex+0x1f8>
 800526c:	1e7b      	subs	r3, r7, #1
 800526e:	1159      	asrs	r1, r3, #5
 8005270:	f003 021f 	and.w	r2, r3, #31
 8005274:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005278:	f04f 0a01 	mov.w	sl, #1
 800527c:	fa0a f202 	lsl.w	r2, sl, r2
 8005280:	420a      	tst	r2, r1
 8005282:	d009      	beq.n	8005298 <__gethex+0x1f8>
 8005284:	4553      	cmp	r3, sl
 8005286:	dd05      	ble.n	8005294 <__gethex+0x1f4>
 8005288:	1eb9      	subs	r1, r7, #2
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fedb 	bl	8006046 <__any_on>
 8005290:	2800      	cmp	r0, #0
 8005292:	d145      	bne.n	8005320 <__gethex+0x280>
 8005294:	f04f 0a02 	mov.w	sl, #2
 8005298:	4639      	mov	r1, r7
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff fe99 	bl	8004fd2 <rshift>
 80052a0:	443d      	add	r5, r7
 80052a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80052a6:	42ab      	cmp	r3, r5
 80052a8:	da4c      	bge.n	8005344 <__gethex+0x2a4>
 80052aa:	ee18 0a10 	vmov	r0, s16
 80052ae:	4621      	mov	r1, r4
 80052b0:	f000 fa6e 	bl	8005790 <_Bfree>
 80052b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80052b6:	2300      	movs	r3, #0
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	27a3      	movs	r7, #163	; 0xa3
 80052bc:	e785      	b.n	80051ca <__gethex+0x12a>
 80052be:	1e73      	subs	r3, r6, #1
 80052c0:	9a05      	ldr	r2, [sp, #20]
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d019      	beq.n	8005300 <__gethex+0x260>
 80052cc:	f1bb 0f20 	cmp.w	fp, #32
 80052d0:	d107      	bne.n	80052e2 <__gethex+0x242>
 80052d2:	9b02      	ldr	r3, [sp, #8]
 80052d4:	9a00      	ldr	r2, [sp, #0]
 80052d6:	f843 2b04 	str.w	r2, [r3], #4
 80052da:	9302      	str	r3, [sp, #8]
 80052dc:	2300      	movs	r3, #0
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	469b      	mov	fp, r3
 80052e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80052e6:	f7ff fec6 	bl	8005076 <__hexdig_fun>
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	f000 000f 	and.w	r0, r0, #15
 80052f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80052f4:	4303      	orrs	r3, r0
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	f10b 0b04 	add.w	fp, fp, #4
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	e00d      	b.n	800531c <__gethex+0x27c>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	9a06      	ldr	r2, [sp, #24]
 8005304:	4413      	add	r3, r2
 8005306:	42bb      	cmp	r3, r7
 8005308:	d3e0      	bcc.n	80052cc <__gethex+0x22c>
 800530a:	4618      	mov	r0, r3
 800530c:	9901      	ldr	r1, [sp, #4]
 800530e:	9307      	str	r3, [sp, #28]
 8005310:	4652      	mov	r2, sl
 8005312:	f001 fa84 	bl	800681e <strncmp>
 8005316:	9b07      	ldr	r3, [sp, #28]
 8005318:	2800      	cmp	r0, #0
 800531a:	d1d7      	bne.n	80052cc <__gethex+0x22c>
 800531c:	461e      	mov	r6, r3
 800531e:	e78b      	b.n	8005238 <__gethex+0x198>
 8005320:	f04f 0a03 	mov.w	sl, #3
 8005324:	e7b8      	b.n	8005298 <__gethex+0x1f8>
 8005326:	da0a      	bge.n	800533e <__gethex+0x29e>
 8005328:	1a37      	subs	r7, r6, r0
 800532a:	4621      	mov	r1, r4
 800532c:	ee18 0a10 	vmov	r0, s16
 8005330:	463a      	mov	r2, r7
 8005332:	f000 fc49 	bl	8005bc8 <__lshift>
 8005336:	1bed      	subs	r5, r5, r7
 8005338:	4604      	mov	r4, r0
 800533a:	f100 0914 	add.w	r9, r0, #20
 800533e:	f04f 0a00 	mov.w	sl, #0
 8005342:	e7ae      	b.n	80052a2 <__gethex+0x202>
 8005344:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005348:	42a8      	cmp	r0, r5
 800534a:	dd72      	ble.n	8005432 <__gethex+0x392>
 800534c:	1b45      	subs	r5, r0, r5
 800534e:	42ae      	cmp	r6, r5
 8005350:	dc36      	bgt.n	80053c0 <__gethex+0x320>
 8005352:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d02a      	beq.n	80053b0 <__gethex+0x310>
 800535a:	2b03      	cmp	r3, #3
 800535c:	d02c      	beq.n	80053b8 <__gethex+0x318>
 800535e:	2b01      	cmp	r3, #1
 8005360:	d115      	bne.n	800538e <__gethex+0x2ee>
 8005362:	42ae      	cmp	r6, r5
 8005364:	d113      	bne.n	800538e <__gethex+0x2ee>
 8005366:	2e01      	cmp	r6, #1
 8005368:	d10b      	bne.n	8005382 <__gethex+0x2e2>
 800536a:	9a04      	ldr	r2, [sp, #16]
 800536c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	2301      	movs	r3, #1
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	f8c9 3000 	str.w	r3, [r9]
 800537a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800537c:	2762      	movs	r7, #98	; 0x62
 800537e:	601c      	str	r4, [r3, #0]
 8005380:	e723      	b.n	80051ca <__gethex+0x12a>
 8005382:	1e71      	subs	r1, r6, #1
 8005384:	4620      	mov	r0, r4
 8005386:	f000 fe5e 	bl	8006046 <__any_on>
 800538a:	2800      	cmp	r0, #0
 800538c:	d1ed      	bne.n	800536a <__gethex+0x2ca>
 800538e:	ee18 0a10 	vmov	r0, s16
 8005392:	4621      	mov	r1, r4
 8005394:	f000 f9fc 	bl	8005790 <_Bfree>
 8005398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800539a:	2300      	movs	r3, #0
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	2750      	movs	r7, #80	; 0x50
 80053a0:	e713      	b.n	80051ca <__gethex+0x12a>
 80053a2:	bf00      	nop
 80053a4:	080072ec 	.word	0x080072ec
 80053a8:	0800720c 	.word	0x0800720c
 80053ac:	08007280 	.word	0x08007280
 80053b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1eb      	bne.n	800538e <__gethex+0x2ee>
 80053b6:	e7d8      	b.n	800536a <__gethex+0x2ca>
 80053b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d5      	bne.n	800536a <__gethex+0x2ca>
 80053be:	e7e6      	b.n	800538e <__gethex+0x2ee>
 80053c0:	1e6f      	subs	r7, r5, #1
 80053c2:	f1ba 0f00 	cmp.w	sl, #0
 80053c6:	d131      	bne.n	800542c <__gethex+0x38c>
 80053c8:	b127      	cbz	r7, 80053d4 <__gethex+0x334>
 80053ca:	4639      	mov	r1, r7
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 fe3a 	bl	8006046 <__any_on>
 80053d2:	4682      	mov	sl, r0
 80053d4:	117b      	asrs	r3, r7, #5
 80053d6:	2101      	movs	r1, #1
 80053d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80053dc:	f007 071f 	and.w	r7, r7, #31
 80053e0:	fa01 f707 	lsl.w	r7, r1, r7
 80053e4:	421f      	tst	r7, r3
 80053e6:	4629      	mov	r1, r5
 80053e8:	4620      	mov	r0, r4
 80053ea:	bf18      	it	ne
 80053ec:	f04a 0a02 	orrne.w	sl, sl, #2
 80053f0:	1b76      	subs	r6, r6, r5
 80053f2:	f7ff fdee 	bl	8004fd2 <rshift>
 80053f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80053fa:	2702      	movs	r7, #2
 80053fc:	f1ba 0f00 	cmp.w	sl, #0
 8005400:	d048      	beq.n	8005494 <__gethex+0x3f4>
 8005402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d015      	beq.n	8005436 <__gethex+0x396>
 800540a:	2b03      	cmp	r3, #3
 800540c:	d017      	beq.n	800543e <__gethex+0x39e>
 800540e:	2b01      	cmp	r3, #1
 8005410:	d109      	bne.n	8005426 <__gethex+0x386>
 8005412:	f01a 0f02 	tst.w	sl, #2
 8005416:	d006      	beq.n	8005426 <__gethex+0x386>
 8005418:	f8d9 0000 	ldr.w	r0, [r9]
 800541c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005420:	f01a 0f01 	tst.w	sl, #1
 8005424:	d10e      	bne.n	8005444 <__gethex+0x3a4>
 8005426:	f047 0710 	orr.w	r7, r7, #16
 800542a:	e033      	b.n	8005494 <__gethex+0x3f4>
 800542c:	f04f 0a01 	mov.w	sl, #1
 8005430:	e7d0      	b.n	80053d4 <__gethex+0x334>
 8005432:	2701      	movs	r7, #1
 8005434:	e7e2      	b.n	80053fc <__gethex+0x35c>
 8005436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005438:	f1c3 0301 	rsb	r3, r3, #1
 800543c:	9315      	str	r3, [sp, #84]	; 0x54
 800543e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <__gethex+0x386>
 8005444:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005448:	f104 0314 	add.w	r3, r4, #20
 800544c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005450:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005454:	f04f 0c00 	mov.w	ip, #0
 8005458:	4618      	mov	r0, r3
 800545a:	f853 2b04 	ldr.w	r2, [r3], #4
 800545e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005462:	d01c      	beq.n	800549e <__gethex+0x3fe>
 8005464:	3201      	adds	r2, #1
 8005466:	6002      	str	r2, [r0, #0]
 8005468:	2f02      	cmp	r7, #2
 800546a:	f104 0314 	add.w	r3, r4, #20
 800546e:	d13f      	bne.n	80054f0 <__gethex+0x450>
 8005470:	f8d8 2000 	ldr.w	r2, [r8]
 8005474:	3a01      	subs	r2, #1
 8005476:	42b2      	cmp	r2, r6
 8005478:	d10a      	bne.n	8005490 <__gethex+0x3f0>
 800547a:	1171      	asrs	r1, r6, #5
 800547c:	2201      	movs	r2, #1
 800547e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005482:	f006 061f 	and.w	r6, r6, #31
 8005486:	fa02 f606 	lsl.w	r6, r2, r6
 800548a:	421e      	tst	r6, r3
 800548c:	bf18      	it	ne
 800548e:	4617      	movne	r7, r2
 8005490:	f047 0720 	orr.w	r7, r7, #32
 8005494:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005496:	601c      	str	r4, [r3, #0]
 8005498:	9b04      	ldr	r3, [sp, #16]
 800549a:	601d      	str	r5, [r3, #0]
 800549c:	e695      	b.n	80051ca <__gethex+0x12a>
 800549e:	4299      	cmp	r1, r3
 80054a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80054a4:	d8d8      	bhi.n	8005458 <__gethex+0x3b8>
 80054a6:	68a3      	ldr	r3, [r4, #8]
 80054a8:	459b      	cmp	fp, r3
 80054aa:	db19      	blt.n	80054e0 <__gethex+0x440>
 80054ac:	6861      	ldr	r1, [r4, #4]
 80054ae:	ee18 0a10 	vmov	r0, s16
 80054b2:	3101      	adds	r1, #1
 80054b4:	f000 f92c 	bl	8005710 <_Balloc>
 80054b8:	4681      	mov	r9, r0
 80054ba:	b918      	cbnz	r0, 80054c4 <__gethex+0x424>
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <__gethex+0x488>)
 80054be:	4602      	mov	r2, r0
 80054c0:	2184      	movs	r1, #132	; 0x84
 80054c2:	e6a8      	b.n	8005216 <__gethex+0x176>
 80054c4:	6922      	ldr	r2, [r4, #16]
 80054c6:	3202      	adds	r2, #2
 80054c8:	f104 010c 	add.w	r1, r4, #12
 80054cc:	0092      	lsls	r2, r2, #2
 80054ce:	300c      	adds	r0, #12
 80054d0:	f000 f910 	bl	80056f4 <memcpy>
 80054d4:	4621      	mov	r1, r4
 80054d6:	ee18 0a10 	vmov	r0, s16
 80054da:	f000 f959 	bl	8005790 <_Bfree>
 80054de:	464c      	mov	r4, r9
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054e8:	6122      	str	r2, [r4, #16]
 80054ea:	2201      	movs	r2, #1
 80054ec:	615a      	str	r2, [r3, #20]
 80054ee:	e7bb      	b.n	8005468 <__gethex+0x3c8>
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	455a      	cmp	r2, fp
 80054f4:	dd0b      	ble.n	800550e <__gethex+0x46e>
 80054f6:	2101      	movs	r1, #1
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7ff fd6a 	bl	8004fd2 <rshift>
 80054fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005502:	3501      	adds	r5, #1
 8005504:	42ab      	cmp	r3, r5
 8005506:	f6ff aed0 	blt.w	80052aa <__gethex+0x20a>
 800550a:	2701      	movs	r7, #1
 800550c:	e7c0      	b.n	8005490 <__gethex+0x3f0>
 800550e:	f016 061f 	ands.w	r6, r6, #31
 8005512:	d0fa      	beq.n	800550a <__gethex+0x46a>
 8005514:	449a      	add	sl, r3
 8005516:	f1c6 0620 	rsb	r6, r6, #32
 800551a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800551e:	f000 f9ed 	bl	80058fc <__hi0bits>
 8005522:	42b0      	cmp	r0, r6
 8005524:	dbe7      	blt.n	80054f6 <__gethex+0x456>
 8005526:	e7f0      	b.n	800550a <__gethex+0x46a>
 8005528:	0800720c 	.word	0x0800720c

0800552c <L_shift>:
 800552c:	f1c2 0208 	rsb	r2, r2, #8
 8005530:	0092      	lsls	r2, r2, #2
 8005532:	b570      	push	{r4, r5, r6, lr}
 8005534:	f1c2 0620 	rsb	r6, r2, #32
 8005538:	6843      	ldr	r3, [r0, #4]
 800553a:	6804      	ldr	r4, [r0, #0]
 800553c:	fa03 f506 	lsl.w	r5, r3, r6
 8005540:	432c      	orrs	r4, r5
 8005542:	40d3      	lsrs	r3, r2
 8005544:	6004      	str	r4, [r0, #0]
 8005546:	f840 3f04 	str.w	r3, [r0, #4]!
 800554a:	4288      	cmp	r0, r1
 800554c:	d3f4      	bcc.n	8005538 <L_shift+0xc>
 800554e:	bd70      	pop	{r4, r5, r6, pc}

08005550 <__match>:
 8005550:	b530      	push	{r4, r5, lr}
 8005552:	6803      	ldr	r3, [r0, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555a:	b914      	cbnz	r4, 8005562 <__match+0x12>
 800555c:	6003      	str	r3, [r0, #0]
 800555e:	2001      	movs	r0, #1
 8005560:	bd30      	pop	{r4, r5, pc}
 8005562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005566:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800556a:	2d19      	cmp	r5, #25
 800556c:	bf98      	it	ls
 800556e:	3220      	addls	r2, #32
 8005570:	42a2      	cmp	r2, r4
 8005572:	d0f0      	beq.n	8005556 <__match+0x6>
 8005574:	2000      	movs	r0, #0
 8005576:	e7f3      	b.n	8005560 <__match+0x10>

08005578 <__hexnan>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	680b      	ldr	r3, [r1, #0]
 800557e:	6801      	ldr	r1, [r0, #0]
 8005580:	115e      	asrs	r6, r3, #5
 8005582:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005586:	f013 031f 	ands.w	r3, r3, #31
 800558a:	b087      	sub	sp, #28
 800558c:	bf18      	it	ne
 800558e:	3604      	addne	r6, #4
 8005590:	2500      	movs	r5, #0
 8005592:	1f37      	subs	r7, r6, #4
 8005594:	4682      	mov	sl, r0
 8005596:	4690      	mov	r8, r2
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	f846 5c04 	str.w	r5, [r6, #-4]
 800559e:	46b9      	mov	r9, r7
 80055a0:	463c      	mov	r4, r7
 80055a2:	9502      	str	r5, [sp, #8]
 80055a4:	46ab      	mov	fp, r5
 80055a6:	784a      	ldrb	r2, [r1, #1]
 80055a8:	1c4b      	adds	r3, r1, #1
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	b342      	cbz	r2, 8005600 <__hexnan+0x88>
 80055ae:	4610      	mov	r0, r2
 80055b0:	9105      	str	r1, [sp, #20]
 80055b2:	9204      	str	r2, [sp, #16]
 80055b4:	f7ff fd5f 	bl	8005076 <__hexdig_fun>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d14f      	bne.n	800565c <__hexnan+0xe4>
 80055bc:	9a04      	ldr	r2, [sp, #16]
 80055be:	9905      	ldr	r1, [sp, #20]
 80055c0:	2a20      	cmp	r2, #32
 80055c2:	d818      	bhi.n	80055f6 <__hexnan+0x7e>
 80055c4:	9b02      	ldr	r3, [sp, #8]
 80055c6:	459b      	cmp	fp, r3
 80055c8:	dd13      	ble.n	80055f2 <__hexnan+0x7a>
 80055ca:	454c      	cmp	r4, r9
 80055cc:	d206      	bcs.n	80055dc <__hexnan+0x64>
 80055ce:	2d07      	cmp	r5, #7
 80055d0:	dc04      	bgt.n	80055dc <__hexnan+0x64>
 80055d2:	462a      	mov	r2, r5
 80055d4:	4649      	mov	r1, r9
 80055d6:	4620      	mov	r0, r4
 80055d8:	f7ff ffa8 	bl	800552c <L_shift>
 80055dc:	4544      	cmp	r4, r8
 80055de:	d950      	bls.n	8005682 <__hexnan+0x10a>
 80055e0:	2300      	movs	r3, #0
 80055e2:	f1a4 0904 	sub.w	r9, r4, #4
 80055e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80055ea:	f8cd b008 	str.w	fp, [sp, #8]
 80055ee:	464c      	mov	r4, r9
 80055f0:	461d      	mov	r5, r3
 80055f2:	9903      	ldr	r1, [sp, #12]
 80055f4:	e7d7      	b.n	80055a6 <__hexnan+0x2e>
 80055f6:	2a29      	cmp	r2, #41	; 0x29
 80055f8:	d156      	bne.n	80056a8 <__hexnan+0x130>
 80055fa:	3102      	adds	r1, #2
 80055fc:	f8ca 1000 	str.w	r1, [sl]
 8005600:	f1bb 0f00 	cmp.w	fp, #0
 8005604:	d050      	beq.n	80056a8 <__hexnan+0x130>
 8005606:	454c      	cmp	r4, r9
 8005608:	d206      	bcs.n	8005618 <__hexnan+0xa0>
 800560a:	2d07      	cmp	r5, #7
 800560c:	dc04      	bgt.n	8005618 <__hexnan+0xa0>
 800560e:	462a      	mov	r2, r5
 8005610:	4649      	mov	r1, r9
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff ff8a 	bl	800552c <L_shift>
 8005618:	4544      	cmp	r4, r8
 800561a:	d934      	bls.n	8005686 <__hexnan+0x10e>
 800561c:	f1a8 0204 	sub.w	r2, r8, #4
 8005620:	4623      	mov	r3, r4
 8005622:	f853 1b04 	ldr.w	r1, [r3], #4
 8005626:	f842 1f04 	str.w	r1, [r2, #4]!
 800562a:	429f      	cmp	r7, r3
 800562c:	d2f9      	bcs.n	8005622 <__hexnan+0xaa>
 800562e:	1b3b      	subs	r3, r7, r4
 8005630:	f023 0303 	bic.w	r3, r3, #3
 8005634:	3304      	adds	r3, #4
 8005636:	3401      	adds	r4, #1
 8005638:	3e03      	subs	r6, #3
 800563a:	42b4      	cmp	r4, r6
 800563c:	bf88      	it	hi
 800563e:	2304      	movhi	r3, #4
 8005640:	4443      	add	r3, r8
 8005642:	2200      	movs	r2, #0
 8005644:	f843 2b04 	str.w	r2, [r3], #4
 8005648:	429f      	cmp	r7, r3
 800564a:	d2fb      	bcs.n	8005644 <__hexnan+0xcc>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	b91b      	cbnz	r3, 8005658 <__hexnan+0xe0>
 8005650:	4547      	cmp	r7, r8
 8005652:	d127      	bne.n	80056a4 <__hexnan+0x12c>
 8005654:	2301      	movs	r3, #1
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	2005      	movs	r0, #5
 800565a:	e026      	b.n	80056aa <__hexnan+0x132>
 800565c:	3501      	adds	r5, #1
 800565e:	2d08      	cmp	r5, #8
 8005660:	f10b 0b01 	add.w	fp, fp, #1
 8005664:	dd06      	ble.n	8005674 <__hexnan+0xfc>
 8005666:	4544      	cmp	r4, r8
 8005668:	d9c3      	bls.n	80055f2 <__hexnan+0x7a>
 800566a:	2300      	movs	r3, #0
 800566c:	f844 3c04 	str.w	r3, [r4, #-4]
 8005670:	2501      	movs	r5, #1
 8005672:	3c04      	subs	r4, #4
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	f000 000f 	and.w	r0, r0, #15
 800567a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	e7b7      	b.n	80055f2 <__hexnan+0x7a>
 8005682:	2508      	movs	r5, #8
 8005684:	e7b5      	b.n	80055f2 <__hexnan+0x7a>
 8005686:	9b01      	ldr	r3, [sp, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0df      	beq.n	800564c <__hexnan+0xd4>
 800568c:	f04f 32ff 	mov.w	r2, #4294967295
 8005690:	f1c3 0320 	rsb	r3, r3, #32
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800569c:	401a      	ands	r2, r3
 800569e:	f846 2c04 	str.w	r2, [r6, #-4]
 80056a2:	e7d3      	b.n	800564c <__hexnan+0xd4>
 80056a4:	3f04      	subs	r7, #4
 80056a6:	e7d1      	b.n	800564c <__hexnan+0xd4>
 80056a8:	2004      	movs	r0, #4
 80056aa:	b007      	add	sp, #28
 80056ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056b0 <_localeconv_r>:
 80056b0:	4800      	ldr	r0, [pc, #0]	; (80056b4 <_localeconv_r+0x4>)
 80056b2:	4770      	bx	lr
 80056b4:	20000178 	.word	0x20000178

080056b8 <__retarget_lock_init_recursive>:
 80056b8:	4770      	bx	lr

080056ba <__retarget_lock_acquire_recursive>:
 80056ba:	4770      	bx	lr

080056bc <__retarget_lock_release_recursive>:
 80056bc:	4770      	bx	lr
	...

080056c0 <malloc>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <malloc+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f000 bd3f 	b.w	8006148 <_malloc_r>
 80056ca:	bf00      	nop
 80056cc:	20000020 	.word	0x20000020

080056d0 <__ascii_mbtowc>:
 80056d0:	b082      	sub	sp, #8
 80056d2:	b901      	cbnz	r1, 80056d6 <__ascii_mbtowc+0x6>
 80056d4:	a901      	add	r1, sp, #4
 80056d6:	b142      	cbz	r2, 80056ea <__ascii_mbtowc+0x1a>
 80056d8:	b14b      	cbz	r3, 80056ee <__ascii_mbtowc+0x1e>
 80056da:	7813      	ldrb	r3, [r2, #0]
 80056dc:	600b      	str	r3, [r1, #0]
 80056de:	7812      	ldrb	r2, [r2, #0]
 80056e0:	1e10      	subs	r0, r2, #0
 80056e2:	bf18      	it	ne
 80056e4:	2001      	movne	r0, #1
 80056e6:	b002      	add	sp, #8
 80056e8:	4770      	bx	lr
 80056ea:	4610      	mov	r0, r2
 80056ec:	e7fb      	b.n	80056e6 <__ascii_mbtowc+0x16>
 80056ee:	f06f 0001 	mvn.w	r0, #1
 80056f2:	e7f8      	b.n	80056e6 <__ascii_mbtowc+0x16>

080056f4 <memcpy>:
 80056f4:	440a      	add	r2, r1
 80056f6:	4291      	cmp	r1, r2
 80056f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056fc:	d100      	bne.n	8005700 <memcpy+0xc>
 80056fe:	4770      	bx	lr
 8005700:	b510      	push	{r4, lr}
 8005702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570a:	4291      	cmp	r1, r2
 800570c:	d1f9      	bne.n	8005702 <memcpy+0xe>
 800570e:	bd10      	pop	{r4, pc}

08005710 <_Balloc>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005714:	4604      	mov	r4, r0
 8005716:	460d      	mov	r5, r1
 8005718:	b976      	cbnz	r6, 8005738 <_Balloc+0x28>
 800571a:	2010      	movs	r0, #16
 800571c:	f7ff ffd0 	bl	80056c0 <malloc>
 8005720:	4602      	mov	r2, r0
 8005722:	6260      	str	r0, [r4, #36]	; 0x24
 8005724:	b920      	cbnz	r0, 8005730 <_Balloc+0x20>
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <_Balloc+0x78>)
 8005728:	4818      	ldr	r0, [pc, #96]	; (800578c <_Balloc+0x7c>)
 800572a:	2166      	movs	r1, #102	; 0x66
 800572c:	f001 f96a 	bl	8006a04 <__assert_func>
 8005730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005734:	6006      	str	r6, [r0, #0]
 8005736:	60c6      	str	r6, [r0, #12]
 8005738:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800573a:	68f3      	ldr	r3, [r6, #12]
 800573c:	b183      	cbz	r3, 8005760 <_Balloc+0x50>
 800573e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005746:	b9b8      	cbnz	r0, 8005778 <_Balloc+0x68>
 8005748:	2101      	movs	r1, #1
 800574a:	fa01 f605 	lsl.w	r6, r1, r5
 800574e:	1d72      	adds	r2, r6, #5
 8005750:	0092      	lsls	r2, r2, #2
 8005752:	4620      	mov	r0, r4
 8005754:	f000 fc98 	bl	8006088 <_calloc_r>
 8005758:	b160      	cbz	r0, 8005774 <_Balloc+0x64>
 800575a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800575e:	e00e      	b.n	800577e <_Balloc+0x6e>
 8005760:	2221      	movs	r2, #33	; 0x21
 8005762:	2104      	movs	r1, #4
 8005764:	4620      	mov	r0, r4
 8005766:	f000 fc8f 	bl	8006088 <_calloc_r>
 800576a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800576c:	60f0      	str	r0, [r6, #12]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e4      	bne.n	800573e <_Balloc+0x2e>
 8005774:	2000      	movs	r0, #0
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	6802      	ldr	r2, [r0, #0]
 800577a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800577e:	2300      	movs	r3, #0
 8005780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005784:	e7f7      	b.n	8005776 <_Balloc+0x66>
 8005786:	bf00      	nop
 8005788:	08007196 	.word	0x08007196
 800578c:	08007300 	.word	0x08007300

08005790 <_Bfree>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005794:	4605      	mov	r5, r0
 8005796:	460c      	mov	r4, r1
 8005798:	b976      	cbnz	r6, 80057b8 <_Bfree+0x28>
 800579a:	2010      	movs	r0, #16
 800579c:	f7ff ff90 	bl	80056c0 <malloc>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6268      	str	r0, [r5, #36]	; 0x24
 80057a4:	b920      	cbnz	r0, 80057b0 <_Bfree+0x20>
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <_Bfree+0x3c>)
 80057a8:	4809      	ldr	r0, [pc, #36]	; (80057d0 <_Bfree+0x40>)
 80057aa:	218a      	movs	r1, #138	; 0x8a
 80057ac:	f001 f92a 	bl	8006a04 <__assert_func>
 80057b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057b4:	6006      	str	r6, [r0, #0]
 80057b6:	60c6      	str	r6, [r0, #12]
 80057b8:	b13c      	cbz	r4, 80057ca <_Bfree+0x3a>
 80057ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057bc:	6862      	ldr	r2, [r4, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057c4:	6021      	str	r1, [r4, #0]
 80057c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	08007196 	.word	0x08007196
 80057d0:	08007300 	.word	0x08007300

080057d4 <__multadd>:
 80057d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d8:	690e      	ldr	r6, [r1, #16]
 80057da:	4607      	mov	r7, r0
 80057dc:	4698      	mov	r8, r3
 80057de:	460c      	mov	r4, r1
 80057e0:	f101 0014 	add.w	r0, r1, #20
 80057e4:	2300      	movs	r3, #0
 80057e6:	6805      	ldr	r5, [r0, #0]
 80057e8:	b2a9      	uxth	r1, r5
 80057ea:	fb02 8101 	mla	r1, r2, r1, r8
 80057ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80057f2:	0c2d      	lsrs	r5, r5, #16
 80057f4:	fb02 c505 	mla	r5, r2, r5, ip
 80057f8:	b289      	uxth	r1, r1
 80057fa:	3301      	adds	r3, #1
 80057fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005800:	429e      	cmp	r6, r3
 8005802:	f840 1b04 	str.w	r1, [r0], #4
 8005806:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800580a:	dcec      	bgt.n	80057e6 <__multadd+0x12>
 800580c:	f1b8 0f00 	cmp.w	r8, #0
 8005810:	d022      	beq.n	8005858 <__multadd+0x84>
 8005812:	68a3      	ldr	r3, [r4, #8]
 8005814:	42b3      	cmp	r3, r6
 8005816:	dc19      	bgt.n	800584c <__multadd+0x78>
 8005818:	6861      	ldr	r1, [r4, #4]
 800581a:	4638      	mov	r0, r7
 800581c:	3101      	adds	r1, #1
 800581e:	f7ff ff77 	bl	8005710 <_Balloc>
 8005822:	4605      	mov	r5, r0
 8005824:	b928      	cbnz	r0, 8005832 <__multadd+0x5e>
 8005826:	4602      	mov	r2, r0
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <__multadd+0x8c>)
 800582a:	480e      	ldr	r0, [pc, #56]	; (8005864 <__multadd+0x90>)
 800582c:	21b5      	movs	r1, #181	; 0xb5
 800582e:	f001 f8e9 	bl	8006a04 <__assert_func>
 8005832:	6922      	ldr	r2, [r4, #16]
 8005834:	3202      	adds	r2, #2
 8005836:	f104 010c 	add.w	r1, r4, #12
 800583a:	0092      	lsls	r2, r2, #2
 800583c:	300c      	adds	r0, #12
 800583e:	f7ff ff59 	bl	80056f4 <memcpy>
 8005842:	4621      	mov	r1, r4
 8005844:	4638      	mov	r0, r7
 8005846:	f7ff ffa3 	bl	8005790 <_Bfree>
 800584a:	462c      	mov	r4, r5
 800584c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005850:	3601      	adds	r6, #1
 8005852:	f8c3 8014 	str.w	r8, [r3, #20]
 8005856:	6126      	str	r6, [r4, #16]
 8005858:	4620      	mov	r0, r4
 800585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800585e:	bf00      	nop
 8005860:	0800720c 	.word	0x0800720c
 8005864:	08007300 	.word	0x08007300

08005868 <__s2b>:
 8005868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800586c:	460c      	mov	r4, r1
 800586e:	4615      	mov	r5, r2
 8005870:	461f      	mov	r7, r3
 8005872:	2209      	movs	r2, #9
 8005874:	3308      	adds	r3, #8
 8005876:	4606      	mov	r6, r0
 8005878:	fb93 f3f2 	sdiv	r3, r3, r2
 800587c:	2100      	movs	r1, #0
 800587e:	2201      	movs	r2, #1
 8005880:	429a      	cmp	r2, r3
 8005882:	db09      	blt.n	8005898 <__s2b+0x30>
 8005884:	4630      	mov	r0, r6
 8005886:	f7ff ff43 	bl	8005710 <_Balloc>
 800588a:	b940      	cbnz	r0, 800589e <__s2b+0x36>
 800588c:	4602      	mov	r2, r0
 800588e:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <__s2b+0x8c>)
 8005890:	4819      	ldr	r0, [pc, #100]	; (80058f8 <__s2b+0x90>)
 8005892:	21ce      	movs	r1, #206	; 0xce
 8005894:	f001 f8b6 	bl	8006a04 <__assert_func>
 8005898:	0052      	lsls	r2, r2, #1
 800589a:	3101      	adds	r1, #1
 800589c:	e7f0      	b.n	8005880 <__s2b+0x18>
 800589e:	9b08      	ldr	r3, [sp, #32]
 80058a0:	6143      	str	r3, [r0, #20]
 80058a2:	2d09      	cmp	r5, #9
 80058a4:	f04f 0301 	mov.w	r3, #1
 80058a8:	6103      	str	r3, [r0, #16]
 80058aa:	dd16      	ble.n	80058da <__s2b+0x72>
 80058ac:	f104 0909 	add.w	r9, r4, #9
 80058b0:	46c8      	mov	r8, r9
 80058b2:	442c      	add	r4, r5
 80058b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80058b8:	4601      	mov	r1, r0
 80058ba:	3b30      	subs	r3, #48	; 0x30
 80058bc:	220a      	movs	r2, #10
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff ff88 	bl	80057d4 <__multadd>
 80058c4:	45a0      	cmp	r8, r4
 80058c6:	d1f5      	bne.n	80058b4 <__s2b+0x4c>
 80058c8:	f1a5 0408 	sub.w	r4, r5, #8
 80058cc:	444c      	add	r4, r9
 80058ce:	1b2d      	subs	r5, r5, r4
 80058d0:	1963      	adds	r3, r4, r5
 80058d2:	42bb      	cmp	r3, r7
 80058d4:	db04      	blt.n	80058e0 <__s2b+0x78>
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	340a      	adds	r4, #10
 80058dc:	2509      	movs	r5, #9
 80058de:	e7f6      	b.n	80058ce <__s2b+0x66>
 80058e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058e4:	4601      	mov	r1, r0
 80058e6:	3b30      	subs	r3, #48	; 0x30
 80058e8:	220a      	movs	r2, #10
 80058ea:	4630      	mov	r0, r6
 80058ec:	f7ff ff72 	bl	80057d4 <__multadd>
 80058f0:	e7ee      	b.n	80058d0 <__s2b+0x68>
 80058f2:	bf00      	nop
 80058f4:	0800720c 	.word	0x0800720c
 80058f8:	08007300 	.word	0x08007300

080058fc <__hi0bits>:
 80058fc:	0c03      	lsrs	r3, r0, #16
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	b9d3      	cbnz	r3, 8005938 <__hi0bits+0x3c>
 8005902:	0400      	lsls	r0, r0, #16
 8005904:	2310      	movs	r3, #16
 8005906:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800590a:	bf04      	itt	eq
 800590c:	0200      	lsleq	r0, r0, #8
 800590e:	3308      	addeq	r3, #8
 8005910:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005914:	bf04      	itt	eq
 8005916:	0100      	lsleq	r0, r0, #4
 8005918:	3304      	addeq	r3, #4
 800591a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800591e:	bf04      	itt	eq
 8005920:	0080      	lsleq	r0, r0, #2
 8005922:	3302      	addeq	r3, #2
 8005924:	2800      	cmp	r0, #0
 8005926:	db05      	blt.n	8005934 <__hi0bits+0x38>
 8005928:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800592c:	f103 0301 	add.w	r3, r3, #1
 8005930:	bf08      	it	eq
 8005932:	2320      	moveq	r3, #32
 8005934:	4618      	mov	r0, r3
 8005936:	4770      	bx	lr
 8005938:	2300      	movs	r3, #0
 800593a:	e7e4      	b.n	8005906 <__hi0bits+0xa>

0800593c <__lo0bits>:
 800593c:	6803      	ldr	r3, [r0, #0]
 800593e:	f013 0207 	ands.w	r2, r3, #7
 8005942:	4601      	mov	r1, r0
 8005944:	d00b      	beq.n	800595e <__lo0bits+0x22>
 8005946:	07da      	lsls	r2, r3, #31
 8005948:	d424      	bmi.n	8005994 <__lo0bits+0x58>
 800594a:	0798      	lsls	r0, r3, #30
 800594c:	bf49      	itett	mi
 800594e:	085b      	lsrmi	r3, r3, #1
 8005950:	089b      	lsrpl	r3, r3, #2
 8005952:	2001      	movmi	r0, #1
 8005954:	600b      	strmi	r3, [r1, #0]
 8005956:	bf5c      	itt	pl
 8005958:	600b      	strpl	r3, [r1, #0]
 800595a:	2002      	movpl	r0, #2
 800595c:	4770      	bx	lr
 800595e:	b298      	uxth	r0, r3
 8005960:	b9b0      	cbnz	r0, 8005990 <__lo0bits+0x54>
 8005962:	0c1b      	lsrs	r3, r3, #16
 8005964:	2010      	movs	r0, #16
 8005966:	f013 0fff 	tst.w	r3, #255	; 0xff
 800596a:	bf04      	itt	eq
 800596c:	0a1b      	lsreq	r3, r3, #8
 800596e:	3008      	addeq	r0, #8
 8005970:	071a      	lsls	r2, r3, #28
 8005972:	bf04      	itt	eq
 8005974:	091b      	lsreq	r3, r3, #4
 8005976:	3004      	addeq	r0, #4
 8005978:	079a      	lsls	r2, r3, #30
 800597a:	bf04      	itt	eq
 800597c:	089b      	lsreq	r3, r3, #2
 800597e:	3002      	addeq	r0, #2
 8005980:	07da      	lsls	r2, r3, #31
 8005982:	d403      	bmi.n	800598c <__lo0bits+0x50>
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	f100 0001 	add.w	r0, r0, #1
 800598a:	d005      	beq.n	8005998 <__lo0bits+0x5c>
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	4770      	bx	lr
 8005990:	4610      	mov	r0, r2
 8005992:	e7e8      	b.n	8005966 <__lo0bits+0x2a>
 8005994:	2000      	movs	r0, #0
 8005996:	4770      	bx	lr
 8005998:	2020      	movs	r0, #32
 800599a:	4770      	bx	lr

0800599c <__i2b>:
 800599c:	b510      	push	{r4, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	2101      	movs	r1, #1
 80059a2:	f7ff feb5 	bl	8005710 <_Balloc>
 80059a6:	4602      	mov	r2, r0
 80059a8:	b928      	cbnz	r0, 80059b6 <__i2b+0x1a>
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <__i2b+0x24>)
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <__i2b+0x28>)
 80059ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80059b2:	f001 f827 	bl	8006a04 <__assert_func>
 80059b6:	2301      	movs	r3, #1
 80059b8:	6144      	str	r4, [r0, #20]
 80059ba:	6103      	str	r3, [r0, #16]
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	0800720c 	.word	0x0800720c
 80059c4:	08007300 	.word	0x08007300

080059c8 <__multiply>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	4614      	mov	r4, r2
 80059ce:	690a      	ldr	r2, [r1, #16]
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	bfb8      	it	lt
 80059d6:	460b      	movlt	r3, r1
 80059d8:	460d      	mov	r5, r1
 80059da:	bfbc      	itt	lt
 80059dc:	4625      	movlt	r5, r4
 80059de:	461c      	movlt	r4, r3
 80059e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80059e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80059e8:	68ab      	ldr	r3, [r5, #8]
 80059ea:	6869      	ldr	r1, [r5, #4]
 80059ec:	eb0a 0709 	add.w	r7, sl, r9
 80059f0:	42bb      	cmp	r3, r7
 80059f2:	b085      	sub	sp, #20
 80059f4:	bfb8      	it	lt
 80059f6:	3101      	addlt	r1, #1
 80059f8:	f7ff fe8a 	bl	8005710 <_Balloc>
 80059fc:	b930      	cbnz	r0, 8005a0c <__multiply+0x44>
 80059fe:	4602      	mov	r2, r0
 8005a00:	4b42      	ldr	r3, [pc, #264]	; (8005b0c <__multiply+0x144>)
 8005a02:	4843      	ldr	r0, [pc, #268]	; (8005b10 <__multiply+0x148>)
 8005a04:	f240 115d 	movw	r1, #349	; 0x15d
 8005a08:	f000 fffc 	bl	8006a04 <__assert_func>
 8005a0c:	f100 0614 	add.w	r6, r0, #20
 8005a10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005a14:	4633      	mov	r3, r6
 8005a16:	2200      	movs	r2, #0
 8005a18:	4543      	cmp	r3, r8
 8005a1a:	d31e      	bcc.n	8005a5a <__multiply+0x92>
 8005a1c:	f105 0c14 	add.w	ip, r5, #20
 8005a20:	f104 0314 	add.w	r3, r4, #20
 8005a24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005a28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005a2c:	9202      	str	r2, [sp, #8]
 8005a2e:	ebac 0205 	sub.w	r2, ip, r5
 8005a32:	3a15      	subs	r2, #21
 8005a34:	f022 0203 	bic.w	r2, r2, #3
 8005a38:	3204      	adds	r2, #4
 8005a3a:	f105 0115 	add.w	r1, r5, #21
 8005a3e:	458c      	cmp	ip, r1
 8005a40:	bf38      	it	cc
 8005a42:	2204      	movcc	r2, #4
 8005a44:	9201      	str	r2, [sp, #4]
 8005a46:	9a02      	ldr	r2, [sp, #8]
 8005a48:	9303      	str	r3, [sp, #12]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d808      	bhi.n	8005a60 <__multiply+0x98>
 8005a4e:	2f00      	cmp	r7, #0
 8005a50:	dc55      	bgt.n	8005afe <__multiply+0x136>
 8005a52:	6107      	str	r7, [r0, #16]
 8005a54:	b005      	add	sp, #20
 8005a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5a:	f843 2b04 	str.w	r2, [r3], #4
 8005a5e:	e7db      	b.n	8005a18 <__multiply+0x50>
 8005a60:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a64:	f1ba 0f00 	cmp.w	sl, #0
 8005a68:	d020      	beq.n	8005aac <__multiply+0xe4>
 8005a6a:	f105 0e14 	add.w	lr, r5, #20
 8005a6e:	46b1      	mov	r9, r6
 8005a70:	2200      	movs	r2, #0
 8005a72:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005a76:	f8d9 b000 	ldr.w	fp, [r9]
 8005a7a:	b2a1      	uxth	r1, r4
 8005a7c:	fa1f fb8b 	uxth.w	fp, fp
 8005a80:	fb0a b101 	mla	r1, sl, r1, fp
 8005a84:	4411      	add	r1, r2
 8005a86:	f8d9 2000 	ldr.w	r2, [r9]
 8005a8a:	0c24      	lsrs	r4, r4, #16
 8005a8c:	0c12      	lsrs	r2, r2, #16
 8005a8e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005a92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005a96:	b289      	uxth	r1, r1
 8005a98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005a9c:	45f4      	cmp	ip, lr
 8005a9e:	f849 1b04 	str.w	r1, [r9], #4
 8005aa2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005aa6:	d8e4      	bhi.n	8005a72 <__multiply+0xaa>
 8005aa8:	9901      	ldr	r1, [sp, #4]
 8005aaa:	5072      	str	r2, [r6, r1]
 8005aac:	9a03      	ldr	r2, [sp, #12]
 8005aae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	f1b9 0f00 	cmp.w	r9, #0
 8005ab8:	d01f      	beq.n	8005afa <__multiply+0x132>
 8005aba:	6834      	ldr	r4, [r6, #0]
 8005abc:	f105 0114 	add.w	r1, r5, #20
 8005ac0:	46b6      	mov	lr, r6
 8005ac2:	f04f 0a00 	mov.w	sl, #0
 8005ac6:	880a      	ldrh	r2, [r1, #0]
 8005ac8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005acc:	fb09 b202 	mla	r2, r9, r2, fp
 8005ad0:	4492      	add	sl, r2
 8005ad2:	b2a4      	uxth	r4, r4
 8005ad4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005ad8:	f84e 4b04 	str.w	r4, [lr], #4
 8005adc:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ae0:	f8be 2000 	ldrh.w	r2, [lr]
 8005ae4:	0c24      	lsrs	r4, r4, #16
 8005ae6:	fb09 2404 	mla	r4, r9, r4, r2
 8005aea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005aee:	458c      	cmp	ip, r1
 8005af0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005af4:	d8e7      	bhi.n	8005ac6 <__multiply+0xfe>
 8005af6:	9a01      	ldr	r2, [sp, #4]
 8005af8:	50b4      	str	r4, [r6, r2]
 8005afa:	3604      	adds	r6, #4
 8005afc:	e7a3      	b.n	8005a46 <__multiply+0x7e>
 8005afe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1a5      	bne.n	8005a52 <__multiply+0x8a>
 8005b06:	3f01      	subs	r7, #1
 8005b08:	e7a1      	b.n	8005a4e <__multiply+0x86>
 8005b0a:	bf00      	nop
 8005b0c:	0800720c 	.word	0x0800720c
 8005b10:	08007300 	.word	0x08007300

08005b14 <__pow5mult>:
 8005b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b18:	4615      	mov	r5, r2
 8005b1a:	f012 0203 	ands.w	r2, r2, #3
 8005b1e:	4606      	mov	r6, r0
 8005b20:	460f      	mov	r7, r1
 8005b22:	d007      	beq.n	8005b34 <__pow5mult+0x20>
 8005b24:	4c25      	ldr	r4, [pc, #148]	; (8005bbc <__pow5mult+0xa8>)
 8005b26:	3a01      	subs	r2, #1
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b2e:	f7ff fe51 	bl	80057d4 <__multadd>
 8005b32:	4607      	mov	r7, r0
 8005b34:	10ad      	asrs	r5, r5, #2
 8005b36:	d03d      	beq.n	8005bb4 <__pow5mult+0xa0>
 8005b38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b3a:	b97c      	cbnz	r4, 8005b5c <__pow5mult+0x48>
 8005b3c:	2010      	movs	r0, #16
 8005b3e:	f7ff fdbf 	bl	80056c0 <malloc>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6270      	str	r0, [r6, #36]	; 0x24
 8005b46:	b928      	cbnz	r0, 8005b54 <__pow5mult+0x40>
 8005b48:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <__pow5mult+0xac>)
 8005b4a:	481e      	ldr	r0, [pc, #120]	; (8005bc4 <__pow5mult+0xb0>)
 8005b4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b50:	f000 ff58 	bl	8006a04 <__assert_func>
 8005b54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b58:	6004      	str	r4, [r0, #0]
 8005b5a:	60c4      	str	r4, [r0, #12]
 8005b5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b64:	b94c      	cbnz	r4, 8005b7a <__pow5mult+0x66>
 8005b66:	f240 2171 	movw	r1, #625	; 0x271
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ff16 	bl	800599c <__i2b>
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b76:	4604      	mov	r4, r0
 8005b78:	6003      	str	r3, [r0, #0]
 8005b7a:	f04f 0900 	mov.w	r9, #0
 8005b7e:	07eb      	lsls	r3, r5, #31
 8005b80:	d50a      	bpl.n	8005b98 <__pow5mult+0x84>
 8005b82:	4639      	mov	r1, r7
 8005b84:	4622      	mov	r2, r4
 8005b86:	4630      	mov	r0, r6
 8005b88:	f7ff ff1e 	bl	80059c8 <__multiply>
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4680      	mov	r8, r0
 8005b90:	4630      	mov	r0, r6
 8005b92:	f7ff fdfd 	bl	8005790 <_Bfree>
 8005b96:	4647      	mov	r7, r8
 8005b98:	106d      	asrs	r5, r5, #1
 8005b9a:	d00b      	beq.n	8005bb4 <__pow5mult+0xa0>
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	b938      	cbnz	r0, 8005bb0 <__pow5mult+0x9c>
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f7ff ff0f 	bl	80059c8 <__multiply>
 8005baa:	6020      	str	r0, [r4, #0]
 8005bac:	f8c0 9000 	str.w	r9, [r0]
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	e7e4      	b.n	8005b7e <__pow5mult+0x6a>
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bba:	bf00      	nop
 8005bbc:	08007450 	.word	0x08007450
 8005bc0:	08007196 	.word	0x08007196
 8005bc4:	08007300 	.word	0x08007300

08005bc8 <__lshift>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	460c      	mov	r4, r1
 8005bce:	6849      	ldr	r1, [r1, #4]
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005bd6:	68a3      	ldr	r3, [r4, #8]
 8005bd8:	4607      	mov	r7, r0
 8005bda:	4691      	mov	r9, r2
 8005bdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005be0:	f108 0601 	add.w	r6, r8, #1
 8005be4:	42b3      	cmp	r3, r6
 8005be6:	db0b      	blt.n	8005c00 <__lshift+0x38>
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff fd91 	bl	8005710 <_Balloc>
 8005bee:	4605      	mov	r5, r0
 8005bf0:	b948      	cbnz	r0, 8005c06 <__lshift+0x3e>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	4b28      	ldr	r3, [pc, #160]	; (8005c98 <__lshift+0xd0>)
 8005bf6:	4829      	ldr	r0, [pc, #164]	; (8005c9c <__lshift+0xd4>)
 8005bf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005bfc:	f000 ff02 	bl	8006a04 <__assert_func>
 8005c00:	3101      	adds	r1, #1
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	e7ee      	b.n	8005be4 <__lshift+0x1c>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f100 0114 	add.w	r1, r0, #20
 8005c0c:	f100 0210 	add.w	r2, r0, #16
 8005c10:	4618      	mov	r0, r3
 8005c12:	4553      	cmp	r3, sl
 8005c14:	db33      	blt.n	8005c7e <__lshift+0xb6>
 8005c16:	6920      	ldr	r0, [r4, #16]
 8005c18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c1c:	f104 0314 	add.w	r3, r4, #20
 8005c20:	f019 091f 	ands.w	r9, r9, #31
 8005c24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c2c:	d02b      	beq.n	8005c86 <__lshift+0xbe>
 8005c2e:	f1c9 0e20 	rsb	lr, r9, #32
 8005c32:	468a      	mov	sl, r1
 8005c34:	2200      	movs	r2, #0
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	fa00 f009 	lsl.w	r0, r0, r9
 8005c3c:	4302      	orrs	r2, r0
 8005c3e:	f84a 2b04 	str.w	r2, [sl], #4
 8005c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c46:	459c      	cmp	ip, r3
 8005c48:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c4c:	d8f3      	bhi.n	8005c36 <__lshift+0x6e>
 8005c4e:	ebac 0304 	sub.w	r3, ip, r4
 8005c52:	3b15      	subs	r3, #21
 8005c54:	f023 0303 	bic.w	r3, r3, #3
 8005c58:	3304      	adds	r3, #4
 8005c5a:	f104 0015 	add.w	r0, r4, #21
 8005c5e:	4584      	cmp	ip, r0
 8005c60:	bf38      	it	cc
 8005c62:	2304      	movcc	r3, #4
 8005c64:	50ca      	str	r2, [r1, r3]
 8005c66:	b10a      	cbz	r2, 8005c6c <__lshift+0xa4>
 8005c68:	f108 0602 	add.w	r6, r8, #2
 8005c6c:	3e01      	subs	r6, #1
 8005c6e:	4638      	mov	r0, r7
 8005c70:	612e      	str	r6, [r5, #16]
 8005c72:	4621      	mov	r1, r4
 8005c74:	f7ff fd8c 	bl	8005790 <_Bfree>
 8005c78:	4628      	mov	r0, r5
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c82:	3301      	adds	r3, #1
 8005c84:	e7c5      	b.n	8005c12 <__lshift+0x4a>
 8005c86:	3904      	subs	r1, #4
 8005c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c90:	459c      	cmp	ip, r3
 8005c92:	d8f9      	bhi.n	8005c88 <__lshift+0xc0>
 8005c94:	e7ea      	b.n	8005c6c <__lshift+0xa4>
 8005c96:	bf00      	nop
 8005c98:	0800720c 	.word	0x0800720c
 8005c9c:	08007300 	.word	0x08007300

08005ca0 <__mcmp>:
 8005ca0:	b530      	push	{r4, r5, lr}
 8005ca2:	6902      	ldr	r2, [r0, #16]
 8005ca4:	690c      	ldr	r4, [r1, #16]
 8005ca6:	1b12      	subs	r2, r2, r4
 8005ca8:	d10e      	bne.n	8005cc8 <__mcmp+0x28>
 8005caa:	f100 0314 	add.w	r3, r0, #20
 8005cae:	3114      	adds	r1, #20
 8005cb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005cb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005cb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005cbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005cc0:	42a5      	cmp	r5, r4
 8005cc2:	d003      	beq.n	8005ccc <__mcmp+0x2c>
 8005cc4:	d305      	bcc.n	8005cd2 <__mcmp+0x32>
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	4610      	mov	r0, r2
 8005cca:	bd30      	pop	{r4, r5, pc}
 8005ccc:	4283      	cmp	r3, r0
 8005cce:	d3f3      	bcc.n	8005cb8 <__mcmp+0x18>
 8005cd0:	e7fa      	b.n	8005cc8 <__mcmp+0x28>
 8005cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd6:	e7f7      	b.n	8005cc8 <__mcmp+0x28>

08005cd8 <__mdiff>:
 8005cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	460c      	mov	r4, r1
 8005cde:	4606      	mov	r6, r0
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4617      	mov	r7, r2
 8005ce6:	f7ff ffdb 	bl	8005ca0 <__mcmp>
 8005cea:	1e05      	subs	r5, r0, #0
 8005cec:	d110      	bne.n	8005d10 <__mdiff+0x38>
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f7ff fd0d 	bl	8005710 <_Balloc>
 8005cf6:	b930      	cbnz	r0, 8005d06 <__mdiff+0x2e>
 8005cf8:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <__mdiff+0x108>)
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	f240 2132 	movw	r1, #562	; 0x232
 8005d00:	4838      	ldr	r0, [pc, #224]	; (8005de4 <__mdiff+0x10c>)
 8005d02:	f000 fe7f 	bl	8006a04 <__assert_func>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d10:	bfa4      	itt	ge
 8005d12:	463b      	movge	r3, r7
 8005d14:	4627      	movge	r7, r4
 8005d16:	4630      	mov	r0, r6
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	bfa6      	itte	ge
 8005d1c:	461c      	movge	r4, r3
 8005d1e:	2500      	movge	r5, #0
 8005d20:	2501      	movlt	r5, #1
 8005d22:	f7ff fcf5 	bl	8005710 <_Balloc>
 8005d26:	b920      	cbnz	r0, 8005d32 <__mdiff+0x5a>
 8005d28:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <__mdiff+0x108>)
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d30:	e7e6      	b.n	8005d00 <__mdiff+0x28>
 8005d32:	693e      	ldr	r6, [r7, #16]
 8005d34:	60c5      	str	r5, [r0, #12]
 8005d36:	6925      	ldr	r5, [r4, #16]
 8005d38:	f107 0114 	add.w	r1, r7, #20
 8005d3c:	f104 0914 	add.w	r9, r4, #20
 8005d40:	f100 0e14 	add.w	lr, r0, #20
 8005d44:	f107 0210 	add.w	r2, r7, #16
 8005d48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005d4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005d50:	46f2      	mov	sl, lr
 8005d52:	2700      	movs	r7, #0
 8005d54:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d5c:	fa1f f883 	uxth.w	r8, r3
 8005d60:	fa17 f78b 	uxtah	r7, r7, fp
 8005d64:	0c1b      	lsrs	r3, r3, #16
 8005d66:	eba7 0808 	sub.w	r8, r7, r8
 8005d6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d72:	fa1f f888 	uxth.w	r8, r8
 8005d76:	141f      	asrs	r7, r3, #16
 8005d78:	454d      	cmp	r5, r9
 8005d7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d7e:	f84a 3b04 	str.w	r3, [sl], #4
 8005d82:	d8e7      	bhi.n	8005d54 <__mdiff+0x7c>
 8005d84:	1b2b      	subs	r3, r5, r4
 8005d86:	3b15      	subs	r3, #21
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	3415      	adds	r4, #21
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	bf38      	it	cc
 8005d94:	2304      	movcc	r3, #4
 8005d96:	4419      	add	r1, r3
 8005d98:	4473      	add	r3, lr
 8005d9a:	469e      	mov	lr, r3
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	4565      	cmp	r5, ip
 8005da0:	d30e      	bcc.n	8005dc0 <__mdiff+0xe8>
 8005da2:	f10c 0203 	add.w	r2, ip, #3
 8005da6:	1a52      	subs	r2, r2, r1
 8005da8:	f022 0203 	bic.w	r2, r2, #3
 8005dac:	3903      	subs	r1, #3
 8005dae:	458c      	cmp	ip, r1
 8005db0:	bf38      	it	cc
 8005db2:	2200      	movcc	r2, #0
 8005db4:	441a      	add	r2, r3
 8005db6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005dba:	b17b      	cbz	r3, 8005ddc <__mdiff+0x104>
 8005dbc:	6106      	str	r6, [r0, #16]
 8005dbe:	e7a5      	b.n	8005d0c <__mdiff+0x34>
 8005dc0:	f855 8b04 	ldr.w	r8, [r5], #4
 8005dc4:	fa17 f488 	uxtah	r4, r7, r8
 8005dc8:	1422      	asrs	r2, r4, #16
 8005dca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005dce:	b2a4      	uxth	r4, r4
 8005dd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005dd4:	f84e 4b04 	str.w	r4, [lr], #4
 8005dd8:	1417      	asrs	r7, r2, #16
 8005dda:	e7e0      	b.n	8005d9e <__mdiff+0xc6>
 8005ddc:	3e01      	subs	r6, #1
 8005dde:	e7ea      	b.n	8005db6 <__mdiff+0xde>
 8005de0:	0800720c 	.word	0x0800720c
 8005de4:	08007300 	.word	0x08007300

08005de8 <__ulp>:
 8005de8:	b082      	sub	sp, #8
 8005dea:	ed8d 0b00 	vstr	d0, [sp]
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	4912      	ldr	r1, [pc, #72]	; (8005e3c <__ulp+0x54>)
 8005df2:	4019      	ands	r1, r3
 8005df4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	dd05      	ble.n	8005e08 <__ulp+0x20>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	ec43 2b10 	vmov	d0, r2, r3
 8005e04:	b002      	add	sp, #8
 8005e06:	4770      	bx	lr
 8005e08:	4249      	negs	r1, r1
 8005e0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005e0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	da04      	bge.n	8005e26 <__ulp+0x3e>
 8005e1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005e20:	fa41 f300 	asr.w	r3, r1, r0
 8005e24:	e7ec      	b.n	8005e00 <__ulp+0x18>
 8005e26:	f1a0 0114 	sub.w	r1, r0, #20
 8005e2a:	291e      	cmp	r1, #30
 8005e2c:	bfda      	itte	le
 8005e2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005e32:	fa20 f101 	lsrle.w	r1, r0, r1
 8005e36:	2101      	movgt	r1, #1
 8005e38:	460a      	mov	r2, r1
 8005e3a:	e7e1      	b.n	8005e00 <__ulp+0x18>
 8005e3c:	7ff00000 	.word	0x7ff00000

08005e40 <__b2d>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	6905      	ldr	r5, [r0, #16]
 8005e44:	f100 0714 	add.w	r7, r0, #20
 8005e48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005e4c:	1f2e      	subs	r6, r5, #4
 8005e4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005e52:	4620      	mov	r0, r4
 8005e54:	f7ff fd52 	bl	80058fc <__hi0bits>
 8005e58:	f1c0 0320 	rsb	r3, r0, #32
 8005e5c:	280a      	cmp	r0, #10
 8005e5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005edc <__b2d+0x9c>
 8005e62:	600b      	str	r3, [r1, #0]
 8005e64:	dc14      	bgt.n	8005e90 <__b2d+0x50>
 8005e66:	f1c0 0e0b 	rsb	lr, r0, #11
 8005e6a:	fa24 f10e 	lsr.w	r1, r4, lr
 8005e6e:	42b7      	cmp	r7, r6
 8005e70:	ea41 030c 	orr.w	r3, r1, ip
 8005e74:	bf34      	ite	cc
 8005e76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005e7a:	2100      	movcs	r1, #0
 8005e7c:	3015      	adds	r0, #21
 8005e7e:	fa04 f000 	lsl.w	r0, r4, r0
 8005e82:	fa21 f10e 	lsr.w	r1, r1, lr
 8005e86:	ea40 0201 	orr.w	r2, r0, r1
 8005e8a:	ec43 2b10 	vmov	d0, r2, r3
 8005e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e90:	42b7      	cmp	r7, r6
 8005e92:	bf3a      	itte	cc
 8005e94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005e98:	f1a5 0608 	subcc.w	r6, r5, #8
 8005e9c:	2100      	movcs	r1, #0
 8005e9e:	380b      	subs	r0, #11
 8005ea0:	d017      	beq.n	8005ed2 <__b2d+0x92>
 8005ea2:	f1c0 0c20 	rsb	ip, r0, #32
 8005ea6:	fa04 f500 	lsl.w	r5, r4, r0
 8005eaa:	42be      	cmp	r6, r7
 8005eac:	fa21 f40c 	lsr.w	r4, r1, ip
 8005eb0:	ea45 0504 	orr.w	r5, r5, r4
 8005eb4:	bf8c      	ite	hi
 8005eb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005eba:	2400      	movls	r4, #0
 8005ebc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005ec0:	fa01 f000 	lsl.w	r0, r1, r0
 8005ec4:	fa24 f40c 	lsr.w	r4, r4, ip
 8005ec8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ecc:	ea40 0204 	orr.w	r2, r0, r4
 8005ed0:	e7db      	b.n	8005e8a <__b2d+0x4a>
 8005ed2:	ea44 030c 	orr.w	r3, r4, ip
 8005ed6:	460a      	mov	r2, r1
 8005ed8:	e7d7      	b.n	8005e8a <__b2d+0x4a>
 8005eda:	bf00      	nop
 8005edc:	3ff00000 	.word	0x3ff00000

08005ee0 <__d2b>:
 8005ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	ec57 6b10 	vmov	r6, r7, d0
 8005eec:	4690      	mov	r8, r2
 8005eee:	f7ff fc0f 	bl	8005710 <_Balloc>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	b930      	cbnz	r0, 8005f04 <__d2b+0x24>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <__d2b+0xb0>)
 8005efa:	4826      	ldr	r0, [pc, #152]	; (8005f94 <__d2b+0xb4>)
 8005efc:	f240 310a 	movw	r1, #778	; 0x30a
 8005f00:	f000 fd80 	bl	8006a04 <__assert_func>
 8005f04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f0c:	bb35      	cbnz	r5, 8005f5c <__d2b+0x7c>
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	d028      	beq.n	8005f66 <__d2b+0x86>
 8005f14:	4668      	mov	r0, sp
 8005f16:	9600      	str	r6, [sp, #0]
 8005f18:	f7ff fd10 	bl	800593c <__lo0bits>
 8005f1c:	9900      	ldr	r1, [sp, #0]
 8005f1e:	b300      	cbz	r0, 8005f62 <__d2b+0x82>
 8005f20:	9a01      	ldr	r2, [sp, #4]
 8005f22:	f1c0 0320 	rsb	r3, r0, #32
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	40c2      	lsrs	r2, r0
 8005f2e:	6163      	str	r3, [r4, #20]
 8005f30:	9201      	str	r2, [sp, #4]
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	61a3      	str	r3, [r4, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bf14      	ite	ne
 8005f3a:	2202      	movne	r2, #2
 8005f3c:	2201      	moveq	r2, #1
 8005f3e:	6122      	str	r2, [r4, #16]
 8005f40:	b1d5      	cbz	r5, 8005f78 <__d2b+0x98>
 8005f42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f46:	4405      	add	r5, r0
 8005f48:	f8c9 5000 	str.w	r5, [r9]
 8005f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f50:	f8c8 0000 	str.w	r0, [r8]
 8005f54:	4620      	mov	r0, r4
 8005f56:	b003      	add	sp, #12
 8005f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f60:	e7d5      	b.n	8005f0e <__d2b+0x2e>
 8005f62:	6161      	str	r1, [r4, #20]
 8005f64:	e7e5      	b.n	8005f32 <__d2b+0x52>
 8005f66:	a801      	add	r0, sp, #4
 8005f68:	f7ff fce8 	bl	800593c <__lo0bits>
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	6163      	str	r3, [r4, #20]
 8005f70:	2201      	movs	r2, #1
 8005f72:	6122      	str	r2, [r4, #16]
 8005f74:	3020      	adds	r0, #32
 8005f76:	e7e3      	b.n	8005f40 <__d2b+0x60>
 8005f78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f80:	f8c9 0000 	str.w	r0, [r9]
 8005f84:	6918      	ldr	r0, [r3, #16]
 8005f86:	f7ff fcb9 	bl	80058fc <__hi0bits>
 8005f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f8e:	e7df      	b.n	8005f50 <__d2b+0x70>
 8005f90:	0800720c 	.word	0x0800720c
 8005f94:	08007300 	.word	0x08007300

08005f98 <__ratio>:
 8005f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	468a      	mov	sl, r1
 8005f9e:	4669      	mov	r1, sp
 8005fa0:	4683      	mov	fp, r0
 8005fa2:	f7ff ff4d 	bl	8005e40 <__b2d>
 8005fa6:	a901      	add	r1, sp, #4
 8005fa8:	4650      	mov	r0, sl
 8005faa:	ec59 8b10 	vmov	r8, r9, d0
 8005fae:	ee10 6a10 	vmov	r6, s0
 8005fb2:	f7ff ff45 	bl	8005e40 <__b2d>
 8005fb6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005fba:	f8da 2010 	ldr.w	r2, [sl, #16]
 8005fbe:	eba3 0c02 	sub.w	ip, r3, r2
 8005fc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005fcc:	ec55 4b10 	vmov	r4, r5, d0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	ee10 0a10 	vmov	r0, s0
 8005fd6:	bfce      	itee	gt
 8005fd8:	464a      	movgt	r2, r9
 8005fda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005fde:	462a      	movle	r2, r5
 8005fe0:	464f      	mov	r7, r9
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	bfcc      	ite	gt
 8005fe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005fea:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8005fee:	ec47 6b17 	vmov	d7, r6, r7
 8005ff2:	ec41 0b16 	vmov	d6, r0, r1
 8005ff6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8005ffa:	b003      	add	sp, #12
 8005ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006000 <__copybits>:
 8006000:	3901      	subs	r1, #1
 8006002:	b570      	push	{r4, r5, r6, lr}
 8006004:	1149      	asrs	r1, r1, #5
 8006006:	6914      	ldr	r4, [r2, #16]
 8006008:	3101      	adds	r1, #1
 800600a:	f102 0314 	add.w	r3, r2, #20
 800600e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006012:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006016:	1f05      	subs	r5, r0, #4
 8006018:	42a3      	cmp	r3, r4
 800601a:	d30c      	bcc.n	8006036 <__copybits+0x36>
 800601c:	1aa3      	subs	r3, r4, r2
 800601e:	3b11      	subs	r3, #17
 8006020:	f023 0303 	bic.w	r3, r3, #3
 8006024:	3211      	adds	r2, #17
 8006026:	42a2      	cmp	r2, r4
 8006028:	bf88      	it	hi
 800602a:	2300      	movhi	r3, #0
 800602c:	4418      	add	r0, r3
 800602e:	2300      	movs	r3, #0
 8006030:	4288      	cmp	r0, r1
 8006032:	d305      	bcc.n	8006040 <__copybits+0x40>
 8006034:	bd70      	pop	{r4, r5, r6, pc}
 8006036:	f853 6b04 	ldr.w	r6, [r3], #4
 800603a:	f845 6f04 	str.w	r6, [r5, #4]!
 800603e:	e7eb      	b.n	8006018 <__copybits+0x18>
 8006040:	f840 3b04 	str.w	r3, [r0], #4
 8006044:	e7f4      	b.n	8006030 <__copybits+0x30>

08006046 <__any_on>:
 8006046:	f100 0214 	add.w	r2, r0, #20
 800604a:	6900      	ldr	r0, [r0, #16]
 800604c:	114b      	asrs	r3, r1, #5
 800604e:	4298      	cmp	r0, r3
 8006050:	b510      	push	{r4, lr}
 8006052:	db11      	blt.n	8006078 <__any_on+0x32>
 8006054:	dd0a      	ble.n	800606c <__any_on+0x26>
 8006056:	f011 011f 	ands.w	r1, r1, #31
 800605a:	d007      	beq.n	800606c <__any_on+0x26>
 800605c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006060:	fa24 f001 	lsr.w	r0, r4, r1
 8006064:	fa00 f101 	lsl.w	r1, r0, r1
 8006068:	428c      	cmp	r4, r1
 800606a:	d10b      	bne.n	8006084 <__any_on+0x3e>
 800606c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006070:	4293      	cmp	r3, r2
 8006072:	d803      	bhi.n	800607c <__any_on+0x36>
 8006074:	2000      	movs	r0, #0
 8006076:	bd10      	pop	{r4, pc}
 8006078:	4603      	mov	r3, r0
 800607a:	e7f7      	b.n	800606c <__any_on+0x26>
 800607c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006080:	2900      	cmp	r1, #0
 8006082:	d0f5      	beq.n	8006070 <__any_on+0x2a>
 8006084:	2001      	movs	r0, #1
 8006086:	e7f6      	b.n	8006076 <__any_on+0x30>

08006088 <_calloc_r>:
 8006088:	b513      	push	{r0, r1, r4, lr}
 800608a:	434a      	muls	r2, r1
 800608c:	4611      	mov	r1, r2
 800608e:	9201      	str	r2, [sp, #4]
 8006090:	f000 f85a 	bl	8006148 <_malloc_r>
 8006094:	4604      	mov	r4, r0
 8006096:	b118      	cbz	r0, 80060a0 <_calloc_r+0x18>
 8006098:	9a01      	ldr	r2, [sp, #4]
 800609a:	2100      	movs	r1, #0
 800609c:	f7fc fb84 	bl	80027a8 <memset>
 80060a0:	4620      	mov	r0, r4
 80060a2:	b002      	add	sp, #8
 80060a4:	bd10      	pop	{r4, pc}
	...

080060a8 <_free_r>:
 80060a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060aa:	2900      	cmp	r1, #0
 80060ac:	d048      	beq.n	8006140 <_free_r+0x98>
 80060ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b2:	9001      	str	r0, [sp, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f1a1 0404 	sub.w	r4, r1, #4
 80060ba:	bfb8      	it	lt
 80060bc:	18e4      	addlt	r4, r4, r3
 80060be:	f000 fe33 	bl	8006d28 <__malloc_lock>
 80060c2:	4a20      	ldr	r2, [pc, #128]	; (8006144 <_free_r+0x9c>)
 80060c4:	9801      	ldr	r0, [sp, #4]
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	4615      	mov	r5, r2
 80060ca:	b933      	cbnz	r3, 80060da <_free_r+0x32>
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	6014      	str	r4, [r2, #0]
 80060d0:	b003      	add	sp, #12
 80060d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060d6:	f000 be2d 	b.w	8006d34 <__malloc_unlock>
 80060da:	42a3      	cmp	r3, r4
 80060dc:	d90b      	bls.n	80060f6 <_free_r+0x4e>
 80060de:	6821      	ldr	r1, [r4, #0]
 80060e0:	1862      	adds	r2, r4, r1
 80060e2:	4293      	cmp	r3, r2
 80060e4:	bf04      	itt	eq
 80060e6:	681a      	ldreq	r2, [r3, #0]
 80060e8:	685b      	ldreq	r3, [r3, #4]
 80060ea:	6063      	str	r3, [r4, #4]
 80060ec:	bf04      	itt	eq
 80060ee:	1852      	addeq	r2, r2, r1
 80060f0:	6022      	streq	r2, [r4, #0]
 80060f2:	602c      	str	r4, [r5, #0]
 80060f4:	e7ec      	b.n	80060d0 <_free_r+0x28>
 80060f6:	461a      	mov	r2, r3
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	b10b      	cbz	r3, 8006100 <_free_r+0x58>
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d9fa      	bls.n	80060f6 <_free_r+0x4e>
 8006100:	6811      	ldr	r1, [r2, #0]
 8006102:	1855      	adds	r5, r2, r1
 8006104:	42a5      	cmp	r5, r4
 8006106:	d10b      	bne.n	8006120 <_free_r+0x78>
 8006108:	6824      	ldr	r4, [r4, #0]
 800610a:	4421      	add	r1, r4
 800610c:	1854      	adds	r4, r2, r1
 800610e:	42a3      	cmp	r3, r4
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	d1dd      	bne.n	80060d0 <_free_r+0x28>
 8006114:	681c      	ldr	r4, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	6053      	str	r3, [r2, #4]
 800611a:	4421      	add	r1, r4
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	e7d7      	b.n	80060d0 <_free_r+0x28>
 8006120:	d902      	bls.n	8006128 <_free_r+0x80>
 8006122:	230c      	movs	r3, #12
 8006124:	6003      	str	r3, [r0, #0]
 8006126:	e7d3      	b.n	80060d0 <_free_r+0x28>
 8006128:	6825      	ldr	r5, [r4, #0]
 800612a:	1961      	adds	r1, r4, r5
 800612c:	428b      	cmp	r3, r1
 800612e:	bf04      	itt	eq
 8006130:	6819      	ldreq	r1, [r3, #0]
 8006132:	685b      	ldreq	r3, [r3, #4]
 8006134:	6063      	str	r3, [r4, #4]
 8006136:	bf04      	itt	eq
 8006138:	1949      	addeq	r1, r1, r5
 800613a:	6021      	streq	r1, [r4, #0]
 800613c:	6054      	str	r4, [r2, #4]
 800613e:	e7c7      	b.n	80060d0 <_free_r+0x28>
 8006140:	b003      	add	sp, #12
 8006142:	bd30      	pop	{r4, r5, pc}
 8006144:	20000220 	.word	0x20000220

08006148 <_malloc_r>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	1ccd      	adds	r5, r1, #3
 800614c:	f025 0503 	bic.w	r5, r5, #3
 8006150:	3508      	adds	r5, #8
 8006152:	2d0c      	cmp	r5, #12
 8006154:	bf38      	it	cc
 8006156:	250c      	movcc	r5, #12
 8006158:	2d00      	cmp	r5, #0
 800615a:	4606      	mov	r6, r0
 800615c:	db01      	blt.n	8006162 <_malloc_r+0x1a>
 800615e:	42a9      	cmp	r1, r5
 8006160:	d903      	bls.n	800616a <_malloc_r+0x22>
 8006162:	230c      	movs	r3, #12
 8006164:	6033      	str	r3, [r6, #0]
 8006166:	2000      	movs	r0, #0
 8006168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616a:	f000 fddd 	bl	8006d28 <__malloc_lock>
 800616e:	4921      	ldr	r1, [pc, #132]	; (80061f4 <_malloc_r+0xac>)
 8006170:	680a      	ldr	r2, [r1, #0]
 8006172:	4614      	mov	r4, r2
 8006174:	b99c      	cbnz	r4, 800619e <_malloc_r+0x56>
 8006176:	4f20      	ldr	r7, [pc, #128]	; (80061f8 <_malloc_r+0xb0>)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	b923      	cbnz	r3, 8006186 <_malloc_r+0x3e>
 800617c:	4621      	mov	r1, r4
 800617e:	4630      	mov	r0, r6
 8006180:	f000 fafa 	bl	8006778 <_sbrk_r>
 8006184:	6038      	str	r0, [r7, #0]
 8006186:	4629      	mov	r1, r5
 8006188:	4630      	mov	r0, r6
 800618a:	f000 faf5 	bl	8006778 <_sbrk_r>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	d123      	bne.n	80061da <_malloc_r+0x92>
 8006192:	230c      	movs	r3, #12
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	4630      	mov	r0, r6
 8006198:	f000 fdcc 	bl	8006d34 <__malloc_unlock>
 800619c:	e7e3      	b.n	8006166 <_malloc_r+0x1e>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	1b5b      	subs	r3, r3, r5
 80061a2:	d417      	bmi.n	80061d4 <_malloc_r+0x8c>
 80061a4:	2b0b      	cmp	r3, #11
 80061a6:	d903      	bls.n	80061b0 <_malloc_r+0x68>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	441c      	add	r4, r3
 80061ac:	6025      	str	r5, [r4, #0]
 80061ae:	e004      	b.n	80061ba <_malloc_r+0x72>
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	42a2      	cmp	r2, r4
 80061b4:	bf0c      	ite	eq
 80061b6:	600b      	streq	r3, [r1, #0]
 80061b8:	6053      	strne	r3, [r2, #4]
 80061ba:	4630      	mov	r0, r6
 80061bc:	f000 fdba 	bl	8006d34 <__malloc_unlock>
 80061c0:	f104 000b 	add.w	r0, r4, #11
 80061c4:	1d23      	adds	r3, r4, #4
 80061c6:	f020 0007 	bic.w	r0, r0, #7
 80061ca:	1ac2      	subs	r2, r0, r3
 80061cc:	d0cc      	beq.n	8006168 <_malloc_r+0x20>
 80061ce:	1a1b      	subs	r3, r3, r0
 80061d0:	50a3      	str	r3, [r4, r2]
 80061d2:	e7c9      	b.n	8006168 <_malloc_r+0x20>
 80061d4:	4622      	mov	r2, r4
 80061d6:	6864      	ldr	r4, [r4, #4]
 80061d8:	e7cc      	b.n	8006174 <_malloc_r+0x2c>
 80061da:	1cc4      	adds	r4, r0, #3
 80061dc:	f024 0403 	bic.w	r4, r4, #3
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d0e3      	beq.n	80061ac <_malloc_r+0x64>
 80061e4:	1a21      	subs	r1, r4, r0
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 fac6 	bl	8006778 <_sbrk_r>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d1dd      	bne.n	80061ac <_malloc_r+0x64>
 80061f0:	e7cf      	b.n	8006192 <_malloc_r+0x4a>
 80061f2:	bf00      	nop
 80061f4:	20000220 	.word	0x20000220
 80061f8:	20000224 	.word	0x20000224

080061fc <__ssputs_r>:
 80061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	688e      	ldr	r6, [r1, #8]
 8006202:	429e      	cmp	r6, r3
 8006204:	4682      	mov	sl, r0
 8006206:	460c      	mov	r4, r1
 8006208:	4690      	mov	r8, r2
 800620a:	461f      	mov	r7, r3
 800620c:	d838      	bhi.n	8006280 <__ssputs_r+0x84>
 800620e:	898a      	ldrh	r2, [r1, #12]
 8006210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006214:	d032      	beq.n	800627c <__ssputs_r+0x80>
 8006216:	6825      	ldr	r5, [r4, #0]
 8006218:	6909      	ldr	r1, [r1, #16]
 800621a:	eba5 0901 	sub.w	r9, r5, r1
 800621e:	6965      	ldr	r5, [r4, #20]
 8006220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006228:	3301      	adds	r3, #1
 800622a:	444b      	add	r3, r9
 800622c:	106d      	asrs	r5, r5, #1
 800622e:	429d      	cmp	r5, r3
 8006230:	bf38      	it	cc
 8006232:	461d      	movcc	r5, r3
 8006234:	0553      	lsls	r3, r2, #21
 8006236:	d531      	bpl.n	800629c <__ssputs_r+0xa0>
 8006238:	4629      	mov	r1, r5
 800623a:	f7ff ff85 	bl	8006148 <_malloc_r>
 800623e:	4606      	mov	r6, r0
 8006240:	b950      	cbnz	r0, 8006258 <__ssputs_r+0x5c>
 8006242:	230c      	movs	r3, #12
 8006244:	f8ca 3000 	str.w	r3, [sl]
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	6921      	ldr	r1, [r4, #16]
 800625a:	464a      	mov	r2, r9
 800625c:	f7ff fa4a 	bl	80056f4 <memcpy>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	6126      	str	r6, [r4, #16]
 800626e:	6165      	str	r5, [r4, #20]
 8006270:	444e      	add	r6, r9
 8006272:	eba5 0509 	sub.w	r5, r5, r9
 8006276:	6026      	str	r6, [r4, #0]
 8006278:	60a5      	str	r5, [r4, #8]
 800627a:	463e      	mov	r6, r7
 800627c:	42be      	cmp	r6, r7
 800627e:	d900      	bls.n	8006282 <__ssputs_r+0x86>
 8006280:	463e      	mov	r6, r7
 8006282:	4632      	mov	r2, r6
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	4641      	mov	r1, r8
 8006288:	f000 fd34 	bl	8006cf4 <memmove>
 800628c:	68a3      	ldr	r3, [r4, #8]
 800628e:	6822      	ldr	r2, [r4, #0]
 8006290:	1b9b      	subs	r3, r3, r6
 8006292:	4432      	add	r2, r6
 8006294:	60a3      	str	r3, [r4, #8]
 8006296:	6022      	str	r2, [r4, #0]
 8006298:	2000      	movs	r0, #0
 800629a:	e7db      	b.n	8006254 <__ssputs_r+0x58>
 800629c:	462a      	mov	r2, r5
 800629e:	f000 fd4f 	bl	8006d40 <_realloc_r>
 80062a2:	4606      	mov	r6, r0
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d1e1      	bne.n	800626c <__ssputs_r+0x70>
 80062a8:	6921      	ldr	r1, [r4, #16]
 80062aa:	4650      	mov	r0, sl
 80062ac:	f7ff fefc 	bl	80060a8 <_free_r>
 80062b0:	e7c7      	b.n	8006242 <__ssputs_r+0x46>
	...

080062b4 <_svfiprintf_r>:
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	4698      	mov	r8, r3
 80062ba:	898b      	ldrh	r3, [r1, #12]
 80062bc:	061b      	lsls	r3, r3, #24
 80062be:	b09d      	sub	sp, #116	; 0x74
 80062c0:	4607      	mov	r7, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	4614      	mov	r4, r2
 80062c6:	d50e      	bpl.n	80062e6 <_svfiprintf_r+0x32>
 80062c8:	690b      	ldr	r3, [r1, #16]
 80062ca:	b963      	cbnz	r3, 80062e6 <_svfiprintf_r+0x32>
 80062cc:	2140      	movs	r1, #64	; 0x40
 80062ce:	f7ff ff3b 	bl	8006148 <_malloc_r>
 80062d2:	6028      	str	r0, [r5, #0]
 80062d4:	6128      	str	r0, [r5, #16]
 80062d6:	b920      	cbnz	r0, 80062e2 <_svfiprintf_r+0x2e>
 80062d8:	230c      	movs	r3, #12
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e0d1      	b.n	8006486 <_svfiprintf_r+0x1d2>
 80062e2:	2340      	movs	r3, #64	; 0x40
 80062e4:	616b      	str	r3, [r5, #20]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ea:	2320      	movs	r3, #32
 80062ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80062f4:	2330      	movs	r3, #48	; 0x30
 80062f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064a0 <_svfiprintf_r+0x1ec>
 80062fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062fe:	f04f 0901 	mov.w	r9, #1
 8006302:	4623      	mov	r3, r4
 8006304:	469a      	mov	sl, r3
 8006306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800630a:	b10a      	cbz	r2, 8006310 <_svfiprintf_r+0x5c>
 800630c:	2a25      	cmp	r2, #37	; 0x25
 800630e:	d1f9      	bne.n	8006304 <_svfiprintf_r+0x50>
 8006310:	ebba 0b04 	subs.w	fp, sl, r4
 8006314:	d00b      	beq.n	800632e <_svfiprintf_r+0x7a>
 8006316:	465b      	mov	r3, fp
 8006318:	4622      	mov	r2, r4
 800631a:	4629      	mov	r1, r5
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff ff6d 	bl	80061fc <__ssputs_r>
 8006322:	3001      	adds	r0, #1
 8006324:	f000 80aa 	beq.w	800647c <_svfiprintf_r+0x1c8>
 8006328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800632a:	445a      	add	r2, fp
 800632c:	9209      	str	r2, [sp, #36]	; 0x24
 800632e:	f89a 3000 	ldrb.w	r3, [sl]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80a2 	beq.w	800647c <_svfiprintf_r+0x1c8>
 8006338:	2300      	movs	r3, #0
 800633a:	f04f 32ff 	mov.w	r2, #4294967295
 800633e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006342:	f10a 0a01 	add.w	sl, sl, #1
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	9307      	str	r3, [sp, #28]
 800634a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800634e:	931a      	str	r3, [sp, #104]	; 0x68
 8006350:	4654      	mov	r4, sl
 8006352:	2205      	movs	r2, #5
 8006354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006358:	4851      	ldr	r0, [pc, #324]	; (80064a0 <_svfiprintf_r+0x1ec>)
 800635a:	f7f9 ffc9 	bl	80002f0 <memchr>
 800635e:	9a04      	ldr	r2, [sp, #16]
 8006360:	b9d8      	cbnz	r0, 800639a <_svfiprintf_r+0xe6>
 8006362:	06d0      	lsls	r0, r2, #27
 8006364:	bf44      	itt	mi
 8006366:	2320      	movmi	r3, #32
 8006368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800636c:	0711      	lsls	r1, r2, #28
 800636e:	bf44      	itt	mi
 8006370:	232b      	movmi	r3, #43	; 0x2b
 8006372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006376:	f89a 3000 	ldrb.w	r3, [sl]
 800637a:	2b2a      	cmp	r3, #42	; 0x2a
 800637c:	d015      	beq.n	80063aa <_svfiprintf_r+0xf6>
 800637e:	9a07      	ldr	r2, [sp, #28]
 8006380:	4654      	mov	r4, sl
 8006382:	2000      	movs	r0, #0
 8006384:	f04f 0c0a 	mov.w	ip, #10
 8006388:	4621      	mov	r1, r4
 800638a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800638e:	3b30      	subs	r3, #48	; 0x30
 8006390:	2b09      	cmp	r3, #9
 8006392:	d94e      	bls.n	8006432 <_svfiprintf_r+0x17e>
 8006394:	b1b0      	cbz	r0, 80063c4 <_svfiprintf_r+0x110>
 8006396:	9207      	str	r2, [sp, #28]
 8006398:	e014      	b.n	80063c4 <_svfiprintf_r+0x110>
 800639a:	eba0 0308 	sub.w	r3, r0, r8
 800639e:	fa09 f303 	lsl.w	r3, r9, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	46a2      	mov	sl, r4
 80063a8:	e7d2      	b.n	8006350 <_svfiprintf_r+0x9c>
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	1d19      	adds	r1, r3, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	9103      	str	r1, [sp, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bfbb      	ittet	lt
 80063b6:	425b      	neglt	r3, r3
 80063b8:	f042 0202 	orrlt.w	r2, r2, #2
 80063bc:	9307      	strge	r3, [sp, #28]
 80063be:	9307      	strlt	r3, [sp, #28]
 80063c0:	bfb8      	it	lt
 80063c2:	9204      	strlt	r2, [sp, #16]
 80063c4:	7823      	ldrb	r3, [r4, #0]
 80063c6:	2b2e      	cmp	r3, #46	; 0x2e
 80063c8:	d10c      	bne.n	80063e4 <_svfiprintf_r+0x130>
 80063ca:	7863      	ldrb	r3, [r4, #1]
 80063cc:	2b2a      	cmp	r3, #42	; 0x2a
 80063ce:	d135      	bne.n	800643c <_svfiprintf_r+0x188>
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	9203      	str	r2, [sp, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfb8      	it	lt
 80063dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80063e0:	3402      	adds	r4, #2
 80063e2:	9305      	str	r3, [sp, #20]
 80063e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064b0 <_svfiprintf_r+0x1fc>
 80063e8:	7821      	ldrb	r1, [r4, #0]
 80063ea:	2203      	movs	r2, #3
 80063ec:	4650      	mov	r0, sl
 80063ee:	f7f9 ff7f 	bl	80002f0 <memchr>
 80063f2:	b140      	cbz	r0, 8006406 <_svfiprintf_r+0x152>
 80063f4:	2340      	movs	r3, #64	; 0x40
 80063f6:	eba0 000a 	sub.w	r0, r0, sl
 80063fa:	fa03 f000 	lsl.w	r0, r3, r0
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	4303      	orrs	r3, r0
 8006402:	3401      	adds	r4, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640a:	4826      	ldr	r0, [pc, #152]	; (80064a4 <_svfiprintf_r+0x1f0>)
 800640c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006410:	2206      	movs	r2, #6
 8006412:	f7f9 ff6d 	bl	80002f0 <memchr>
 8006416:	2800      	cmp	r0, #0
 8006418:	d038      	beq.n	800648c <_svfiprintf_r+0x1d8>
 800641a:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <_svfiprintf_r+0x1f4>)
 800641c:	bb1b      	cbnz	r3, 8006466 <_svfiprintf_r+0x1b2>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	3307      	adds	r3, #7
 8006422:	f023 0307 	bic.w	r3, r3, #7
 8006426:	3308      	adds	r3, #8
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	4433      	add	r3, r6
 800642e:	9309      	str	r3, [sp, #36]	; 0x24
 8006430:	e767      	b.n	8006302 <_svfiprintf_r+0x4e>
 8006432:	fb0c 3202 	mla	r2, ip, r2, r3
 8006436:	460c      	mov	r4, r1
 8006438:	2001      	movs	r0, #1
 800643a:	e7a5      	b.n	8006388 <_svfiprintf_r+0xd4>
 800643c:	2300      	movs	r3, #0
 800643e:	3401      	adds	r4, #1
 8006440:	9305      	str	r3, [sp, #20]
 8006442:	4619      	mov	r1, r3
 8006444:	f04f 0c0a 	mov.w	ip, #10
 8006448:	4620      	mov	r0, r4
 800644a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800644e:	3a30      	subs	r2, #48	; 0x30
 8006450:	2a09      	cmp	r2, #9
 8006452:	d903      	bls.n	800645c <_svfiprintf_r+0x1a8>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0c5      	beq.n	80063e4 <_svfiprintf_r+0x130>
 8006458:	9105      	str	r1, [sp, #20]
 800645a:	e7c3      	b.n	80063e4 <_svfiprintf_r+0x130>
 800645c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006460:	4604      	mov	r4, r0
 8006462:	2301      	movs	r3, #1
 8006464:	e7f0      	b.n	8006448 <_svfiprintf_r+0x194>
 8006466:	ab03      	add	r3, sp, #12
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	462a      	mov	r2, r5
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <_svfiprintf_r+0x1f8>)
 800646e:	a904      	add	r1, sp, #16
 8006470:	4638      	mov	r0, r7
 8006472:	f7fc fa31 	bl	80028d8 <_printf_float>
 8006476:	1c42      	adds	r2, r0, #1
 8006478:	4606      	mov	r6, r0
 800647a:	d1d6      	bne.n	800642a <_svfiprintf_r+0x176>
 800647c:	89ab      	ldrh	r3, [r5, #12]
 800647e:	065b      	lsls	r3, r3, #25
 8006480:	f53f af2c 	bmi.w	80062dc <_svfiprintf_r+0x28>
 8006484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006486:	b01d      	add	sp, #116	; 0x74
 8006488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648c:	ab03      	add	r3, sp, #12
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	462a      	mov	r2, r5
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <_svfiprintf_r+0x1f8>)
 8006494:	a904      	add	r1, sp, #16
 8006496:	4638      	mov	r0, r7
 8006498:	f7fc fcaa 	bl	8002df0 <_printf_i>
 800649c:	e7eb      	b.n	8006476 <_svfiprintf_r+0x1c2>
 800649e:	bf00      	nop
 80064a0:	0800745c 	.word	0x0800745c
 80064a4:	08007466 	.word	0x08007466
 80064a8:	080028d9 	.word	0x080028d9
 80064ac:	080061fd 	.word	0x080061fd
 80064b0:	08007462 	.word	0x08007462

080064b4 <__sfputc_r>:
 80064b4:	6893      	ldr	r3, [r2, #8]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	b410      	push	{r4}
 80064bc:	6093      	str	r3, [r2, #8]
 80064be:	da08      	bge.n	80064d2 <__sfputc_r+0x1e>
 80064c0:	6994      	ldr	r4, [r2, #24]
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	db01      	blt.n	80064ca <__sfputc_r+0x16>
 80064c6:	290a      	cmp	r1, #10
 80064c8:	d103      	bne.n	80064d2 <__sfputc_r+0x1e>
 80064ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ce:	f000 b9b9 	b.w	8006844 <__swbuf_r>
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	1c58      	adds	r0, r3, #1
 80064d6:	6010      	str	r0, [r2, #0]
 80064d8:	7019      	strb	r1, [r3, #0]
 80064da:	4608      	mov	r0, r1
 80064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <__sfputs_r>:
 80064e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	4614      	mov	r4, r2
 80064ea:	18d5      	adds	r5, r2, r3
 80064ec:	42ac      	cmp	r4, r5
 80064ee:	d101      	bne.n	80064f4 <__sfputs_r+0x12>
 80064f0:	2000      	movs	r0, #0
 80064f2:	e007      	b.n	8006504 <__sfputs_r+0x22>
 80064f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f8:	463a      	mov	r2, r7
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff ffda 	bl	80064b4 <__sfputc_r>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d1f3      	bne.n	80064ec <__sfputs_r+0xa>
 8006504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006508 <_vfiprintf_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	460d      	mov	r5, r1
 800650e:	b09d      	sub	sp, #116	; 0x74
 8006510:	4614      	mov	r4, r2
 8006512:	4698      	mov	r8, r3
 8006514:	4606      	mov	r6, r0
 8006516:	b118      	cbz	r0, 8006520 <_vfiprintf_r+0x18>
 8006518:	6983      	ldr	r3, [r0, #24]
 800651a:	b90b      	cbnz	r3, 8006520 <_vfiprintf_r+0x18>
 800651c:	f7fe fcbc 	bl	8004e98 <__sinit>
 8006520:	4b89      	ldr	r3, [pc, #548]	; (8006748 <_vfiprintf_r+0x240>)
 8006522:	429d      	cmp	r5, r3
 8006524:	d11b      	bne.n	800655e <_vfiprintf_r+0x56>
 8006526:	6875      	ldr	r5, [r6, #4]
 8006528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800652a:	07d9      	lsls	r1, r3, #31
 800652c:	d405      	bmi.n	800653a <_vfiprintf_r+0x32>
 800652e:	89ab      	ldrh	r3, [r5, #12]
 8006530:	059a      	lsls	r2, r3, #22
 8006532:	d402      	bmi.n	800653a <_vfiprintf_r+0x32>
 8006534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006536:	f7ff f8c0 	bl	80056ba <__retarget_lock_acquire_recursive>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	071b      	lsls	r3, r3, #28
 800653e:	d501      	bpl.n	8006544 <_vfiprintf_r+0x3c>
 8006540:	692b      	ldr	r3, [r5, #16]
 8006542:	b9eb      	cbnz	r3, 8006580 <_vfiprintf_r+0x78>
 8006544:	4629      	mov	r1, r5
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f9ee 	bl	8006928 <__swsetup_r>
 800654c:	b1c0      	cbz	r0, 8006580 <_vfiprintf_r+0x78>
 800654e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006550:	07dc      	lsls	r4, r3, #31
 8006552:	d50e      	bpl.n	8006572 <_vfiprintf_r+0x6a>
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	b01d      	add	sp, #116	; 0x74
 800655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655e:	4b7b      	ldr	r3, [pc, #492]	; (800674c <_vfiprintf_r+0x244>)
 8006560:	429d      	cmp	r5, r3
 8006562:	d101      	bne.n	8006568 <_vfiprintf_r+0x60>
 8006564:	68b5      	ldr	r5, [r6, #8]
 8006566:	e7df      	b.n	8006528 <_vfiprintf_r+0x20>
 8006568:	4b79      	ldr	r3, [pc, #484]	; (8006750 <_vfiprintf_r+0x248>)
 800656a:	429d      	cmp	r5, r3
 800656c:	bf08      	it	eq
 800656e:	68f5      	ldreq	r5, [r6, #12]
 8006570:	e7da      	b.n	8006528 <_vfiprintf_r+0x20>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	0598      	lsls	r0, r3, #22
 8006576:	d4ed      	bmi.n	8006554 <_vfiprintf_r+0x4c>
 8006578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800657a:	f7ff f89f 	bl	80056bc <__retarget_lock_release_recursive>
 800657e:	e7e9      	b.n	8006554 <_vfiprintf_r+0x4c>
 8006580:	2300      	movs	r3, #0
 8006582:	9309      	str	r3, [sp, #36]	; 0x24
 8006584:	2320      	movs	r3, #32
 8006586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800658a:	f8cd 800c 	str.w	r8, [sp, #12]
 800658e:	2330      	movs	r3, #48	; 0x30
 8006590:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006754 <_vfiprintf_r+0x24c>
 8006594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006598:	f04f 0901 	mov.w	r9, #1
 800659c:	4623      	mov	r3, r4
 800659e:	469a      	mov	sl, r3
 80065a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a4:	b10a      	cbz	r2, 80065aa <_vfiprintf_r+0xa2>
 80065a6:	2a25      	cmp	r2, #37	; 0x25
 80065a8:	d1f9      	bne.n	800659e <_vfiprintf_r+0x96>
 80065aa:	ebba 0b04 	subs.w	fp, sl, r4
 80065ae:	d00b      	beq.n	80065c8 <_vfiprintf_r+0xc0>
 80065b0:	465b      	mov	r3, fp
 80065b2:	4622      	mov	r2, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	4630      	mov	r0, r6
 80065b8:	f7ff ff93 	bl	80064e2 <__sfputs_r>
 80065bc:	3001      	adds	r0, #1
 80065be:	f000 80aa 	beq.w	8006716 <_vfiprintf_r+0x20e>
 80065c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c4:	445a      	add	r2, fp
 80065c6:	9209      	str	r2, [sp, #36]	; 0x24
 80065c8:	f89a 3000 	ldrb.w	r3, [sl]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80a2 	beq.w	8006716 <_vfiprintf_r+0x20e>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065dc:	f10a 0a01 	add.w	sl, sl, #1
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	9307      	str	r3, [sp, #28]
 80065e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065e8:	931a      	str	r3, [sp, #104]	; 0x68
 80065ea:	4654      	mov	r4, sl
 80065ec:	2205      	movs	r2, #5
 80065ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f2:	4858      	ldr	r0, [pc, #352]	; (8006754 <_vfiprintf_r+0x24c>)
 80065f4:	f7f9 fe7c 	bl	80002f0 <memchr>
 80065f8:	9a04      	ldr	r2, [sp, #16]
 80065fa:	b9d8      	cbnz	r0, 8006634 <_vfiprintf_r+0x12c>
 80065fc:	06d1      	lsls	r1, r2, #27
 80065fe:	bf44      	itt	mi
 8006600:	2320      	movmi	r3, #32
 8006602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006606:	0713      	lsls	r3, r2, #28
 8006608:	bf44      	itt	mi
 800660a:	232b      	movmi	r3, #43	; 0x2b
 800660c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006610:	f89a 3000 	ldrb.w	r3, [sl]
 8006614:	2b2a      	cmp	r3, #42	; 0x2a
 8006616:	d015      	beq.n	8006644 <_vfiprintf_r+0x13c>
 8006618:	9a07      	ldr	r2, [sp, #28]
 800661a:	4654      	mov	r4, sl
 800661c:	2000      	movs	r0, #0
 800661e:	f04f 0c0a 	mov.w	ip, #10
 8006622:	4621      	mov	r1, r4
 8006624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006628:	3b30      	subs	r3, #48	; 0x30
 800662a:	2b09      	cmp	r3, #9
 800662c:	d94e      	bls.n	80066cc <_vfiprintf_r+0x1c4>
 800662e:	b1b0      	cbz	r0, 800665e <_vfiprintf_r+0x156>
 8006630:	9207      	str	r2, [sp, #28]
 8006632:	e014      	b.n	800665e <_vfiprintf_r+0x156>
 8006634:	eba0 0308 	sub.w	r3, r0, r8
 8006638:	fa09 f303 	lsl.w	r3, r9, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	46a2      	mov	sl, r4
 8006642:	e7d2      	b.n	80065ea <_vfiprintf_r+0xe2>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	1d19      	adds	r1, r3, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	9103      	str	r1, [sp, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	bfbb      	ittet	lt
 8006650:	425b      	neglt	r3, r3
 8006652:	f042 0202 	orrlt.w	r2, r2, #2
 8006656:	9307      	strge	r3, [sp, #28]
 8006658:	9307      	strlt	r3, [sp, #28]
 800665a:	bfb8      	it	lt
 800665c:	9204      	strlt	r2, [sp, #16]
 800665e:	7823      	ldrb	r3, [r4, #0]
 8006660:	2b2e      	cmp	r3, #46	; 0x2e
 8006662:	d10c      	bne.n	800667e <_vfiprintf_r+0x176>
 8006664:	7863      	ldrb	r3, [r4, #1]
 8006666:	2b2a      	cmp	r3, #42	; 0x2a
 8006668:	d135      	bne.n	80066d6 <_vfiprintf_r+0x1ce>
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	9203      	str	r2, [sp, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	bfb8      	it	lt
 8006676:	f04f 33ff 	movlt.w	r3, #4294967295
 800667a:	3402      	adds	r4, #2
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006764 <_vfiprintf_r+0x25c>
 8006682:	7821      	ldrb	r1, [r4, #0]
 8006684:	2203      	movs	r2, #3
 8006686:	4650      	mov	r0, sl
 8006688:	f7f9 fe32 	bl	80002f0 <memchr>
 800668c:	b140      	cbz	r0, 80066a0 <_vfiprintf_r+0x198>
 800668e:	2340      	movs	r3, #64	; 0x40
 8006690:	eba0 000a 	sub.w	r0, r0, sl
 8006694:	fa03 f000 	lsl.w	r0, r3, r0
 8006698:	9b04      	ldr	r3, [sp, #16]
 800669a:	4303      	orrs	r3, r0
 800669c:	3401      	adds	r4, #1
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a4:	482c      	ldr	r0, [pc, #176]	; (8006758 <_vfiprintf_r+0x250>)
 80066a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066aa:	2206      	movs	r2, #6
 80066ac:	f7f9 fe20 	bl	80002f0 <memchr>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d03f      	beq.n	8006734 <_vfiprintf_r+0x22c>
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <_vfiprintf_r+0x254>)
 80066b6:	bb1b      	cbnz	r3, 8006700 <_vfiprintf_r+0x1f8>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	3307      	adds	r3, #7
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	3308      	adds	r3, #8
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	443b      	add	r3, r7
 80066c8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ca:	e767      	b.n	800659c <_vfiprintf_r+0x94>
 80066cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d0:	460c      	mov	r4, r1
 80066d2:	2001      	movs	r0, #1
 80066d4:	e7a5      	b.n	8006622 <_vfiprintf_r+0x11a>
 80066d6:	2300      	movs	r3, #0
 80066d8:	3401      	adds	r4, #1
 80066da:	9305      	str	r3, [sp, #20]
 80066dc:	4619      	mov	r1, r3
 80066de:	f04f 0c0a 	mov.w	ip, #10
 80066e2:	4620      	mov	r0, r4
 80066e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e8:	3a30      	subs	r2, #48	; 0x30
 80066ea:	2a09      	cmp	r2, #9
 80066ec:	d903      	bls.n	80066f6 <_vfiprintf_r+0x1ee>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c5      	beq.n	800667e <_vfiprintf_r+0x176>
 80066f2:	9105      	str	r1, [sp, #20]
 80066f4:	e7c3      	b.n	800667e <_vfiprintf_r+0x176>
 80066f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066fa:	4604      	mov	r4, r0
 80066fc:	2301      	movs	r3, #1
 80066fe:	e7f0      	b.n	80066e2 <_vfiprintf_r+0x1da>
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	462a      	mov	r2, r5
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <_vfiprintf_r+0x258>)
 8006708:	a904      	add	r1, sp, #16
 800670a:	4630      	mov	r0, r6
 800670c:	f7fc f8e4 	bl	80028d8 <_printf_float>
 8006710:	4607      	mov	r7, r0
 8006712:	1c78      	adds	r0, r7, #1
 8006714:	d1d6      	bne.n	80066c4 <_vfiprintf_r+0x1bc>
 8006716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006718:	07d9      	lsls	r1, r3, #31
 800671a:	d405      	bmi.n	8006728 <_vfiprintf_r+0x220>
 800671c:	89ab      	ldrh	r3, [r5, #12]
 800671e:	059a      	lsls	r2, r3, #22
 8006720:	d402      	bmi.n	8006728 <_vfiprintf_r+0x220>
 8006722:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006724:	f7fe ffca 	bl	80056bc <__retarget_lock_release_recursive>
 8006728:	89ab      	ldrh	r3, [r5, #12]
 800672a:	065b      	lsls	r3, r3, #25
 800672c:	f53f af12 	bmi.w	8006554 <_vfiprintf_r+0x4c>
 8006730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006732:	e711      	b.n	8006558 <_vfiprintf_r+0x50>
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <_vfiprintf_r+0x258>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	4630      	mov	r0, r6
 8006740:	f7fc fb56 	bl	8002df0 <_printf_i>
 8006744:	e7e4      	b.n	8006710 <_vfiprintf_r+0x208>
 8006746:	bf00      	nop
 8006748:	08007240 	.word	0x08007240
 800674c:	08007260 	.word	0x08007260
 8006750:	08007220 	.word	0x08007220
 8006754:	0800745c 	.word	0x0800745c
 8006758:	08007466 	.word	0x08007466
 800675c:	080028d9 	.word	0x080028d9
 8006760:	080064e3 	.word	0x080064e3
 8006764:	08007462 	.word	0x08007462

08006768 <nan>:
 8006768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006770 <nan+0x8>
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	00000000 	.word	0x00000000
 8006774:	7ff80000 	.word	0x7ff80000

08006778 <_sbrk_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d06      	ldr	r5, [pc, #24]	; (8006794 <_sbrk_r+0x1c>)
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	f000 fbc2 	bl	8006f0c <_sbrk>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_sbrk_r+0x1a>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_sbrk_r+0x1a>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	200006ec 	.word	0x200006ec

08006798 <__sread>:
 8006798:	b510      	push	{r4, lr}
 800679a:	460c      	mov	r4, r1
 800679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a0:	f000 faf4 	bl	8006d8c <_read_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	bfab      	itete	ge
 80067a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067aa:	89a3      	ldrhlt	r3, [r4, #12]
 80067ac:	181b      	addge	r3, r3, r0
 80067ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067b2:	bfac      	ite	ge
 80067b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067b6:	81a3      	strhlt	r3, [r4, #12]
 80067b8:	bd10      	pop	{r4, pc}

080067ba <__swrite>:
 80067ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067be:	461f      	mov	r7, r3
 80067c0:	898b      	ldrh	r3, [r1, #12]
 80067c2:	05db      	lsls	r3, r3, #23
 80067c4:	4605      	mov	r5, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	4616      	mov	r6, r2
 80067ca:	d505      	bpl.n	80067d8 <__swrite+0x1e>
 80067cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d0:	2302      	movs	r3, #2
 80067d2:	2200      	movs	r2, #0
 80067d4:	f000 fa18 	bl	8006c08 <_lseek_r>
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	4628      	mov	r0, r5
 80067ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ee:	f000 b889 	b.w	8006904 <_write_r>

080067f2 <__sseek>:
 80067f2:	b510      	push	{r4, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fa:	f000 fa05 	bl	8006c08 <_lseek_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	bf15      	itete	ne
 8006804:	6560      	strne	r0, [r4, #84]	; 0x54
 8006806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800680a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800680e:	81a3      	strheq	r3, [r4, #12]
 8006810:	bf18      	it	ne
 8006812:	81a3      	strhne	r3, [r4, #12]
 8006814:	bd10      	pop	{r4, pc}

08006816 <__sclose>:
 8006816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681a:	f000 b911 	b.w	8006a40 <_close_r>

0800681e <strncmp>:
 800681e:	b510      	push	{r4, lr}
 8006820:	b16a      	cbz	r2, 800683e <strncmp+0x20>
 8006822:	3901      	subs	r1, #1
 8006824:	1884      	adds	r4, r0, r2
 8006826:	f810 3b01 	ldrb.w	r3, [r0], #1
 800682a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800682e:	4293      	cmp	r3, r2
 8006830:	d103      	bne.n	800683a <strncmp+0x1c>
 8006832:	42a0      	cmp	r0, r4
 8006834:	d001      	beq.n	800683a <strncmp+0x1c>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f5      	bne.n	8006826 <strncmp+0x8>
 800683a:	1a98      	subs	r0, r3, r2
 800683c:	bd10      	pop	{r4, pc}
 800683e:	4610      	mov	r0, r2
 8006840:	e7fc      	b.n	800683c <strncmp+0x1e>
	...

08006844 <__swbuf_r>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	4614      	mov	r4, r2
 800684a:	4605      	mov	r5, r0
 800684c:	b118      	cbz	r0, 8006856 <__swbuf_r+0x12>
 800684e:	6983      	ldr	r3, [r0, #24]
 8006850:	b90b      	cbnz	r3, 8006856 <__swbuf_r+0x12>
 8006852:	f7fe fb21 	bl	8004e98 <__sinit>
 8006856:	4b21      	ldr	r3, [pc, #132]	; (80068dc <__swbuf_r+0x98>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d12b      	bne.n	80068b4 <__swbuf_r+0x70>
 800685c:	686c      	ldr	r4, [r5, #4]
 800685e:	69a3      	ldr	r3, [r4, #24]
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	071a      	lsls	r2, r3, #28
 8006866:	d52f      	bpl.n	80068c8 <__swbuf_r+0x84>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	b36b      	cbz	r3, 80068c8 <__swbuf_r+0x84>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	1ac0      	subs	r0, r0, r3
 8006872:	6963      	ldr	r3, [r4, #20]
 8006874:	b2f6      	uxtb	r6, r6
 8006876:	4283      	cmp	r3, r0
 8006878:	4637      	mov	r7, r6
 800687a:	dc04      	bgt.n	8006886 <__swbuf_r+0x42>
 800687c:	4621      	mov	r1, r4
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f974 	bl	8006b6c <_fflush_r>
 8006884:	bb30      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 8006886:	68a3      	ldr	r3, [r4, #8]
 8006888:	3b01      	subs	r3, #1
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	6022      	str	r2, [r4, #0]
 8006892:	701e      	strb	r6, [r3, #0]
 8006894:	6963      	ldr	r3, [r4, #20]
 8006896:	3001      	adds	r0, #1
 8006898:	4283      	cmp	r3, r0
 800689a:	d004      	beq.n	80068a6 <__swbuf_r+0x62>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	d506      	bpl.n	80068b0 <__swbuf_r+0x6c>
 80068a2:	2e0a      	cmp	r6, #10
 80068a4:	d104      	bne.n	80068b0 <__swbuf_r+0x6c>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 f95f 	bl	8006b6c <_fflush_r>
 80068ae:	b988      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 80068b0:	4638      	mov	r0, r7
 80068b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <__swbuf_r+0x9c>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <__swbuf_r+0x7a>
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	e7cf      	b.n	800685e <__swbuf_r+0x1a>
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <__swbuf_r+0xa0>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68ec      	ldreq	r4, [r5, #12]
 80068c6:	e7ca      	b.n	800685e <__swbuf_r+0x1a>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f82c 	bl	8006928 <__swsetup_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d0cb      	beq.n	800686c <__swbuf_r+0x28>
 80068d4:	f04f 37ff 	mov.w	r7, #4294967295
 80068d8:	e7ea      	b.n	80068b0 <__swbuf_r+0x6c>
 80068da:	bf00      	nop
 80068dc:	08007240 	.word	0x08007240
 80068e0:	08007260 	.word	0x08007260
 80068e4:	08007220 	.word	0x08007220

080068e8 <__ascii_wctomb>:
 80068e8:	b149      	cbz	r1, 80068fe <__ascii_wctomb+0x16>
 80068ea:	2aff      	cmp	r2, #255	; 0xff
 80068ec:	bf85      	ittet	hi
 80068ee:	238a      	movhi	r3, #138	; 0x8a
 80068f0:	6003      	strhi	r3, [r0, #0]
 80068f2:	700a      	strbls	r2, [r1, #0]
 80068f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80068f8:	bf98      	it	ls
 80068fa:	2001      	movls	r0, #1
 80068fc:	4770      	bx	lr
 80068fe:	4608      	mov	r0, r1
 8006900:	4770      	bx	lr
	...

08006904 <_write_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	; (8006924 <_write_r+0x20>)
 8006908:	4604      	mov	r4, r0
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f000 fb08 	bl	8006f28 <_write>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_write_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_write_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200006ec 	.word	0x200006ec

08006928 <__swsetup_r>:
 8006928:	4b32      	ldr	r3, [pc, #200]	; (80069f4 <__swsetup_r+0xcc>)
 800692a:	b570      	push	{r4, r5, r6, lr}
 800692c:	681d      	ldr	r5, [r3, #0]
 800692e:	4606      	mov	r6, r0
 8006930:	460c      	mov	r4, r1
 8006932:	b125      	cbz	r5, 800693e <__swsetup_r+0x16>
 8006934:	69ab      	ldr	r3, [r5, #24]
 8006936:	b913      	cbnz	r3, 800693e <__swsetup_r+0x16>
 8006938:	4628      	mov	r0, r5
 800693a:	f7fe faad 	bl	8004e98 <__sinit>
 800693e:	4b2e      	ldr	r3, [pc, #184]	; (80069f8 <__swsetup_r+0xd0>)
 8006940:	429c      	cmp	r4, r3
 8006942:	d10f      	bne.n	8006964 <__swsetup_r+0x3c>
 8006944:	686c      	ldr	r4, [r5, #4]
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800694c:	0719      	lsls	r1, r3, #28
 800694e:	d42c      	bmi.n	80069aa <__swsetup_r+0x82>
 8006950:	06dd      	lsls	r5, r3, #27
 8006952:	d411      	bmi.n	8006978 <__swsetup_r+0x50>
 8006954:	2309      	movs	r3, #9
 8006956:	6033      	str	r3, [r6, #0]
 8006958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	e03e      	b.n	80069e2 <__swsetup_r+0xba>
 8006964:	4b25      	ldr	r3, [pc, #148]	; (80069fc <__swsetup_r+0xd4>)
 8006966:	429c      	cmp	r4, r3
 8006968:	d101      	bne.n	800696e <__swsetup_r+0x46>
 800696a:	68ac      	ldr	r4, [r5, #8]
 800696c:	e7eb      	b.n	8006946 <__swsetup_r+0x1e>
 800696e:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <__swsetup_r+0xd8>)
 8006970:	429c      	cmp	r4, r3
 8006972:	bf08      	it	eq
 8006974:	68ec      	ldreq	r4, [r5, #12]
 8006976:	e7e6      	b.n	8006946 <__swsetup_r+0x1e>
 8006978:	0758      	lsls	r0, r3, #29
 800697a:	d512      	bpl.n	80069a2 <__swsetup_r+0x7a>
 800697c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800697e:	b141      	cbz	r1, 8006992 <__swsetup_r+0x6a>
 8006980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006984:	4299      	cmp	r1, r3
 8006986:	d002      	beq.n	800698e <__swsetup_r+0x66>
 8006988:	4630      	mov	r0, r6
 800698a:	f7ff fb8d 	bl	80060a8 <_free_r>
 800698e:	2300      	movs	r3, #0
 8006990:	6363      	str	r3, [r4, #52]	; 0x34
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	2300      	movs	r3, #0
 800699c:	6063      	str	r3, [r4, #4]
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	f043 0308 	orr.w	r3, r3, #8
 80069a8:	81a3      	strh	r3, [r4, #12]
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	b94b      	cbnz	r3, 80069c2 <__swsetup_r+0x9a>
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b8:	d003      	beq.n	80069c2 <__swsetup_r+0x9a>
 80069ba:	4621      	mov	r1, r4
 80069bc:	4630      	mov	r0, r6
 80069be:	f000 f959 	bl	8006c74 <__smakebuf_r>
 80069c2:	89a0      	ldrh	r0, [r4, #12]
 80069c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c8:	f010 0301 	ands.w	r3, r0, #1
 80069cc:	d00a      	beq.n	80069e4 <__swsetup_r+0xbc>
 80069ce:	2300      	movs	r3, #0
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	6963      	ldr	r3, [r4, #20]
 80069d4:	425b      	negs	r3, r3
 80069d6:	61a3      	str	r3, [r4, #24]
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	b943      	cbnz	r3, 80069ee <__swsetup_r+0xc6>
 80069dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069e0:	d1ba      	bne.n	8006958 <__swsetup_r+0x30>
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	0781      	lsls	r1, r0, #30
 80069e6:	bf58      	it	pl
 80069e8:	6963      	ldrpl	r3, [r4, #20]
 80069ea:	60a3      	str	r3, [r4, #8]
 80069ec:	e7f4      	b.n	80069d8 <__swsetup_r+0xb0>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e7f7      	b.n	80069e2 <__swsetup_r+0xba>
 80069f2:	bf00      	nop
 80069f4:	20000020 	.word	0x20000020
 80069f8:	08007240 	.word	0x08007240
 80069fc:	08007260 	.word	0x08007260
 8006a00:	08007220 	.word	0x08007220

08006a04 <__assert_func>:
 8006a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a06:	4614      	mov	r4, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <__assert_func+0x2c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4605      	mov	r5, r0
 8006a10:	68d8      	ldr	r0, [r3, #12]
 8006a12:	b14c      	cbz	r4, 8006a28 <__assert_func+0x24>
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <__assert_func+0x30>)
 8006a16:	9100      	str	r1, [sp, #0]
 8006a18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a1c:	4906      	ldr	r1, [pc, #24]	; (8006a38 <__assert_func+0x34>)
 8006a1e:	462b      	mov	r3, r5
 8006a20:	f000 f8e0 	bl	8006be4 <fiprintf>
 8006a24:	f000 f9c4 	bl	8006db0 <abort>
 8006a28:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <__assert_func+0x38>)
 8006a2a:	461c      	mov	r4, r3
 8006a2c:	e7f3      	b.n	8006a16 <__assert_func+0x12>
 8006a2e:	bf00      	nop
 8006a30:	20000020 	.word	0x20000020
 8006a34:	0800746d 	.word	0x0800746d
 8006a38:	0800747a 	.word	0x0800747a
 8006a3c:	08006fe5 	.word	0x08006fe5

08006a40 <_close_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d06      	ldr	r5, [pc, #24]	; (8006a5c <_close_r+0x1c>)
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	f000 fa26 	bl	8006e9c <_close>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_close_r+0x1a>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_close_r+0x1a>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	200006ec 	.word	0x200006ec

08006a60 <__sflush_r>:
 8006a60:	898a      	ldrh	r2, [r1, #12]
 8006a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	4605      	mov	r5, r0
 8006a68:	0710      	lsls	r0, r2, #28
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	d458      	bmi.n	8006b20 <__sflush_r+0xc0>
 8006a6e:	684b      	ldr	r3, [r1, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	dc05      	bgt.n	8006a80 <__sflush_r+0x20>
 8006a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dc02      	bgt.n	8006a80 <__sflush_r+0x20>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d0f9      	beq.n	8006a7a <__sflush_r+0x1a>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a8c:	682f      	ldr	r7, [r5, #0]
 8006a8e:	602b      	str	r3, [r5, #0]
 8006a90:	d032      	beq.n	8006af8 <__sflush_r+0x98>
 8006a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	075a      	lsls	r2, r3, #29
 8006a98:	d505      	bpl.n	8006aa6 <__sflush_r+0x46>
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	1ac0      	subs	r0, r0, r3
 8006a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa0:	b10b      	cbz	r3, 8006aa6 <__sflush_r+0x46>
 8006aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa4:	1ac0      	subs	r0, r0, r3
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aac:	6a21      	ldr	r1, [r4, #32]
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b0      	blx	r6
 8006ab2:	1c43      	adds	r3, r0, #1
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	d106      	bne.n	8006ac6 <__sflush_r+0x66>
 8006ab8:	6829      	ldr	r1, [r5, #0]
 8006aba:	291d      	cmp	r1, #29
 8006abc:	d82c      	bhi.n	8006b18 <__sflush_r+0xb8>
 8006abe:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <__sflush_r+0x108>)
 8006ac0:	40ca      	lsrs	r2, r1
 8006ac2:	07d6      	lsls	r6, r2, #31
 8006ac4:	d528      	bpl.n	8006b18 <__sflush_r+0xb8>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	6062      	str	r2, [r4, #4]
 8006aca:	04d9      	lsls	r1, r3, #19
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	6022      	str	r2, [r4, #0]
 8006ad0:	d504      	bpl.n	8006adc <__sflush_r+0x7c>
 8006ad2:	1c42      	adds	r2, r0, #1
 8006ad4:	d101      	bne.n	8006ada <__sflush_r+0x7a>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b903      	cbnz	r3, 8006adc <__sflush_r+0x7c>
 8006ada:	6560      	str	r0, [r4, #84]	; 0x54
 8006adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ade:	602f      	str	r7, [r5, #0]
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d0ca      	beq.n	8006a7a <__sflush_r+0x1a>
 8006ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	d002      	beq.n	8006af2 <__sflush_r+0x92>
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7ff fadb 	bl	80060a8 <_free_r>
 8006af2:	2000      	movs	r0, #0
 8006af4:	6360      	str	r0, [r4, #52]	; 0x34
 8006af6:	e7c1      	b.n	8006a7c <__sflush_r+0x1c>
 8006af8:	6a21      	ldr	r1, [r4, #32]
 8006afa:	2301      	movs	r3, #1
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b0      	blx	r6
 8006b00:	1c41      	adds	r1, r0, #1
 8006b02:	d1c7      	bne.n	8006a94 <__sflush_r+0x34>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0c4      	beq.n	8006a94 <__sflush_r+0x34>
 8006b0a:	2b1d      	cmp	r3, #29
 8006b0c:	d001      	beq.n	8006b12 <__sflush_r+0xb2>
 8006b0e:	2b16      	cmp	r3, #22
 8006b10:	d101      	bne.n	8006b16 <__sflush_r+0xb6>
 8006b12:	602f      	str	r7, [r5, #0]
 8006b14:	e7b1      	b.n	8006a7a <__sflush_r+0x1a>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	e7ad      	b.n	8006a7c <__sflush_r+0x1c>
 8006b20:	690f      	ldr	r7, [r1, #16]
 8006b22:	2f00      	cmp	r7, #0
 8006b24:	d0a9      	beq.n	8006a7a <__sflush_r+0x1a>
 8006b26:	0793      	lsls	r3, r2, #30
 8006b28:	680e      	ldr	r6, [r1, #0]
 8006b2a:	bf08      	it	eq
 8006b2c:	694b      	ldreq	r3, [r1, #20]
 8006b2e:	600f      	str	r7, [r1, #0]
 8006b30:	bf18      	it	ne
 8006b32:	2300      	movne	r3, #0
 8006b34:	eba6 0807 	sub.w	r8, r6, r7
 8006b38:	608b      	str	r3, [r1, #8]
 8006b3a:	f1b8 0f00 	cmp.w	r8, #0
 8006b3e:	dd9c      	ble.n	8006a7a <__sflush_r+0x1a>
 8006b40:	6a21      	ldr	r1, [r4, #32]
 8006b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b44:	4643      	mov	r3, r8
 8006b46:	463a      	mov	r2, r7
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b0      	blx	r6
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	dc06      	bgt.n	8006b5e <__sflush_r+0xfe>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b56:	81a3      	strh	r3, [r4, #12]
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e78e      	b.n	8006a7c <__sflush_r+0x1c>
 8006b5e:	4407      	add	r7, r0
 8006b60:	eba8 0800 	sub.w	r8, r8, r0
 8006b64:	e7e9      	b.n	8006b3a <__sflush_r+0xda>
 8006b66:	bf00      	nop
 8006b68:	20400001 	.word	0x20400001

08006b6c <_fflush_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	4605      	mov	r5, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b913      	cbnz	r3, 8006b7c <_fflush_r+0x10>
 8006b76:	2500      	movs	r5, #0
 8006b78:	4628      	mov	r0, r5
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	b118      	cbz	r0, 8006b86 <_fflush_r+0x1a>
 8006b7e:	6983      	ldr	r3, [r0, #24]
 8006b80:	b90b      	cbnz	r3, 8006b86 <_fflush_r+0x1a>
 8006b82:	f7fe f989 	bl	8004e98 <__sinit>
 8006b86:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <_fflush_r+0x6c>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d11b      	bne.n	8006bc4 <_fflush_r+0x58>
 8006b8c:	686c      	ldr	r4, [r5, #4]
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0ef      	beq.n	8006b76 <_fflush_r+0xa>
 8006b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b98:	07d0      	lsls	r0, r2, #31
 8006b9a:	d404      	bmi.n	8006ba6 <_fflush_r+0x3a>
 8006b9c:	0599      	lsls	r1, r3, #22
 8006b9e:	d402      	bmi.n	8006ba6 <_fflush_r+0x3a>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba2:	f7fe fd8a 	bl	80056ba <__retarget_lock_acquire_recursive>
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	4621      	mov	r1, r4
 8006baa:	f7ff ff59 	bl	8006a60 <__sflush_r>
 8006bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb0:	07da      	lsls	r2, r3, #31
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	d4e0      	bmi.n	8006b78 <_fflush_r+0xc>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	059b      	lsls	r3, r3, #22
 8006bba:	d4dd      	bmi.n	8006b78 <_fflush_r+0xc>
 8006bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bbe:	f7fe fd7d 	bl	80056bc <__retarget_lock_release_recursive>
 8006bc2:	e7d9      	b.n	8006b78 <_fflush_r+0xc>
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <_fflush_r+0x70>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d101      	bne.n	8006bce <_fflush_r+0x62>
 8006bca:	68ac      	ldr	r4, [r5, #8]
 8006bcc:	e7df      	b.n	8006b8e <_fflush_r+0x22>
 8006bce:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <_fflush_r+0x74>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	bf08      	it	eq
 8006bd4:	68ec      	ldreq	r4, [r5, #12]
 8006bd6:	e7da      	b.n	8006b8e <_fflush_r+0x22>
 8006bd8:	08007240 	.word	0x08007240
 8006bdc:	08007260 	.word	0x08007260
 8006be0:	08007220 	.word	0x08007220

08006be4 <fiprintf>:
 8006be4:	b40e      	push	{r1, r2, r3}
 8006be6:	b503      	push	{r0, r1, lr}
 8006be8:	4601      	mov	r1, r0
 8006bea:	ab03      	add	r3, sp, #12
 8006bec:	4805      	ldr	r0, [pc, #20]	; (8006c04 <fiprintf+0x20>)
 8006bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf2:	6800      	ldr	r0, [r0, #0]
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	f7ff fc87 	bl	8006508 <_vfiprintf_r>
 8006bfa:	b002      	add	sp, #8
 8006bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c00:	b003      	add	sp, #12
 8006c02:	4770      	bx	lr
 8006c04:	20000020 	.word	0x20000020

08006c08 <_lseek_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d07      	ldr	r5, [pc, #28]	; (8006c28 <_lseek_r+0x20>)
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	4608      	mov	r0, r1
 8006c10:	4611      	mov	r1, r2
 8006c12:	2200      	movs	r2, #0
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 f968 	bl	8006eec <_lseek>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_lseek_r+0x1e>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_lseek_r+0x1e>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	200006ec 	.word	0x200006ec

08006c2c <__swhatbuf_r>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	460e      	mov	r6, r1
 8006c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c34:	2900      	cmp	r1, #0
 8006c36:	b096      	sub	sp, #88	; 0x58
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	da07      	bge.n	8006c4e <__swhatbuf_r+0x22>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	89b3      	ldrh	r3, [r6, #12]
 8006c44:	061a      	lsls	r2, r3, #24
 8006c46:	d410      	bmi.n	8006c6a <__swhatbuf_r+0x3e>
 8006c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c4c:	e00e      	b.n	8006c6c <__swhatbuf_r+0x40>
 8006c4e:	466a      	mov	r2, sp
 8006c50:	f000 f8b6 	bl	8006dc0 <_fstat_r>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	dbf2      	blt.n	8006c3e <__swhatbuf_r+0x12>
 8006c58:	9a01      	ldr	r2, [sp, #4]
 8006c5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c62:	425a      	negs	r2, r3
 8006c64:	415a      	adcs	r2, r3
 8006c66:	602a      	str	r2, [r5, #0]
 8006c68:	e7ee      	b.n	8006c48 <__swhatbuf_r+0x1c>
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	b016      	add	sp, #88	; 0x58
 8006c72:	bd70      	pop	{r4, r5, r6, pc}

08006c74 <__smakebuf_r>:
 8006c74:	898b      	ldrh	r3, [r1, #12]
 8006c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c78:	079d      	lsls	r5, r3, #30
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	d507      	bpl.n	8006c90 <__smakebuf_r+0x1c>
 8006c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	6123      	str	r3, [r4, #16]
 8006c88:	2301      	movs	r3, #1
 8006c8a:	6163      	str	r3, [r4, #20]
 8006c8c:	b002      	add	sp, #8
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	ab01      	add	r3, sp, #4
 8006c92:	466a      	mov	r2, sp
 8006c94:	f7ff ffca 	bl	8006c2c <__swhatbuf_r>
 8006c98:	9900      	ldr	r1, [sp, #0]
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff fa53 	bl	8006148 <_malloc_r>
 8006ca2:	b948      	cbnz	r0, 8006cb8 <__smakebuf_r+0x44>
 8006ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca8:	059a      	lsls	r2, r3, #22
 8006caa:	d4ef      	bmi.n	8006c8c <__smakebuf_r+0x18>
 8006cac:	f023 0303 	bic.w	r3, r3, #3
 8006cb0:	f043 0302 	orr.w	r3, r3, #2
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	e7e3      	b.n	8006c80 <__smakebuf_r+0xc>
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <__smakebuf_r+0x7c>)
 8006cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	6020      	str	r0, [r4, #0]
 8006cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	6163      	str	r3, [r4, #20]
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	6120      	str	r0, [r4, #16]
 8006cce:	b15b      	cbz	r3, 8006ce8 <__smakebuf_r+0x74>
 8006cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f000 f885 	bl	8006de4 <_isatty_r>
 8006cda:	b128      	cbz	r0, 8006ce8 <__smakebuf_r+0x74>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	89a0      	ldrh	r0, [r4, #12]
 8006cea:	4305      	orrs	r5, r0
 8006cec:	81a5      	strh	r5, [r4, #12]
 8006cee:	e7cd      	b.n	8006c8c <__smakebuf_r+0x18>
 8006cf0:	08004e31 	.word	0x08004e31

08006cf4 <memmove>:
 8006cf4:	4288      	cmp	r0, r1
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	eb01 0402 	add.w	r4, r1, r2
 8006cfc:	d902      	bls.n	8006d04 <memmove+0x10>
 8006cfe:	4284      	cmp	r4, r0
 8006d00:	4623      	mov	r3, r4
 8006d02:	d807      	bhi.n	8006d14 <memmove+0x20>
 8006d04:	1e43      	subs	r3, r0, #1
 8006d06:	42a1      	cmp	r1, r4
 8006d08:	d008      	beq.n	8006d1c <memmove+0x28>
 8006d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d12:	e7f8      	b.n	8006d06 <memmove+0x12>
 8006d14:	4402      	add	r2, r0
 8006d16:	4601      	mov	r1, r0
 8006d18:	428a      	cmp	r2, r1
 8006d1a:	d100      	bne.n	8006d1e <memmove+0x2a>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d26:	e7f7      	b.n	8006d18 <memmove+0x24>

08006d28 <__malloc_lock>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__malloc_lock+0x8>)
 8006d2a:	f7fe bcc6 	b.w	80056ba <__retarget_lock_acquire_recursive>
 8006d2e:	bf00      	nop
 8006d30:	200006e4 	.word	0x200006e4

08006d34 <__malloc_unlock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__malloc_unlock+0x8>)
 8006d36:	f7fe bcc1 	b.w	80056bc <__retarget_lock_release_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	200006e4 	.word	0x200006e4

08006d40 <_realloc_r>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	4607      	mov	r7, r0
 8006d44:	4614      	mov	r4, r2
 8006d46:	460e      	mov	r6, r1
 8006d48:	b921      	cbnz	r1, 8006d54 <_realloc_r+0x14>
 8006d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d4e:	4611      	mov	r1, r2
 8006d50:	f7ff b9fa 	b.w	8006148 <_malloc_r>
 8006d54:	b922      	cbnz	r2, 8006d60 <_realloc_r+0x20>
 8006d56:	f7ff f9a7 	bl	80060a8 <_free_r>
 8006d5a:	4625      	mov	r5, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d60:	f000 f850 	bl	8006e04 <_malloc_usable_size_r>
 8006d64:	42a0      	cmp	r0, r4
 8006d66:	d20f      	bcs.n	8006d88 <_realloc_r+0x48>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f7ff f9ec 	bl	8006148 <_malloc_r>
 8006d70:	4605      	mov	r5, r0
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d0f2      	beq.n	8006d5c <_realloc_r+0x1c>
 8006d76:	4631      	mov	r1, r6
 8006d78:	4622      	mov	r2, r4
 8006d7a:	f7fe fcbb 	bl	80056f4 <memcpy>
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff f991 	bl	80060a8 <_free_r>
 8006d86:	e7e9      	b.n	8006d5c <_realloc_r+0x1c>
 8006d88:	4635      	mov	r5, r6
 8006d8a:	e7e7      	b.n	8006d5c <_realloc_r+0x1c>

08006d8c <_read_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d07      	ldr	r5, [pc, #28]	; (8006dac <_read_r+0x20>)
 8006d90:	4604      	mov	r4, r0
 8006d92:	4608      	mov	r0, r1
 8006d94:	4611      	mov	r1, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f000 f8ae 	bl	8006efc <_read>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_read_r+0x1e>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_read_r+0x1e>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	200006ec 	.word	0x200006ec

08006db0 <abort>:
 8006db0:	b508      	push	{r3, lr}
 8006db2:	2006      	movs	r0, #6
 8006db4:	f000 f856 	bl	8006e64 <raise>
 8006db8:	2001      	movs	r0, #1
 8006dba:	f000 f8bd 	bl	8006f38 <_exit>
	...

08006dc0 <_fstat_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	; (8006de0 <_fstat_r+0x20>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	602b      	str	r3, [r5, #0]
 8006dce:	f000 f86d 	bl	8006eac <_fstat>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	d102      	bne.n	8006ddc <_fstat_r+0x1c>
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	b103      	cbz	r3, 8006ddc <_fstat_r+0x1c>
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	bd38      	pop	{r3, r4, r5, pc}
 8006dde:	bf00      	nop
 8006de0:	200006ec 	.word	0x200006ec

08006de4 <_isatty_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_isatty_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f000 f86c 	bl	8006ecc <_isatty>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_isatty_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_isatty_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	200006ec 	.word	0x200006ec

08006e04 <_malloc_usable_size_r>:
 8006e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e08:	1f18      	subs	r0, r3, #4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bfbc      	itt	lt
 8006e0e:	580b      	ldrlt	r3, [r1, r0]
 8006e10:	18c0      	addlt	r0, r0, r3
 8006e12:	4770      	bx	lr

08006e14 <_raise_r>:
 8006e14:	291f      	cmp	r1, #31
 8006e16:	b538      	push	{r3, r4, r5, lr}
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	d904      	bls.n	8006e28 <_raise_r+0x14>
 8006e1e:	2316      	movs	r3, #22
 8006e20:	6003      	str	r3, [r0, #0]
 8006e22:	f04f 30ff 	mov.w	r0, #4294967295
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e2a:	b112      	cbz	r2, 8006e32 <_raise_r+0x1e>
 8006e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e30:	b94b      	cbnz	r3, 8006e46 <_raise_r+0x32>
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 f830 	bl	8006e98 <_getpid_r>
 8006e38:	462a      	mov	r2, r5
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e42:	f000 b817 	b.w	8006e74 <_kill_r>
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d00a      	beq.n	8006e60 <_raise_r+0x4c>
 8006e4a:	1c59      	adds	r1, r3, #1
 8006e4c:	d103      	bne.n	8006e56 <_raise_r+0x42>
 8006e4e:	2316      	movs	r3, #22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	2001      	movs	r0, #1
 8006e54:	e7e7      	b.n	8006e26 <_raise_r+0x12>
 8006e56:	2400      	movs	r4, #0
 8006e58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	4798      	blx	r3
 8006e60:	2000      	movs	r0, #0
 8006e62:	e7e0      	b.n	8006e26 <_raise_r+0x12>

08006e64 <raise>:
 8006e64:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <raise+0xc>)
 8006e66:	4601      	mov	r1, r0
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	f7ff bfd3 	b.w	8006e14 <_raise_r>
 8006e6e:	bf00      	nop
 8006e70:	20000020 	.word	0x20000020

08006e74 <_kill_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d07      	ldr	r5, [pc, #28]	; (8006e94 <_kill_r+0x20>)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	4611      	mov	r1, r2
 8006e80:	602b      	str	r3, [r5, #0]
 8006e82:	f000 f82b 	bl	8006edc <_kill>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	d102      	bne.n	8006e90 <_kill_r+0x1c>
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	b103      	cbz	r3, 8006e90 <_kill_r+0x1c>
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	bd38      	pop	{r3, r4, r5, pc}
 8006e92:	bf00      	nop
 8006e94:	200006ec 	.word	0x200006ec

08006e98 <_getpid_r>:
 8006e98:	f000 b810 	b.w	8006ebc <_getpid>

08006e9c <_close>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <_close+0xc>)
 8006e9e:	2258      	movs	r2, #88	; 0x58
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	4770      	bx	lr
 8006ea8:	200006ec 	.word	0x200006ec

08006eac <_fstat>:
 8006eac:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <_fstat+0xc>)
 8006eae:	2258      	movs	r2, #88	; 0x58
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb6:	4770      	bx	lr
 8006eb8:	200006ec 	.word	0x200006ec

08006ebc <_getpid>:
 8006ebc:	4b02      	ldr	r3, [pc, #8]	; (8006ec8 <_getpid+0xc>)
 8006ebe:	2258      	movs	r2, #88	; 0x58
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	4770      	bx	lr
 8006ec8:	200006ec 	.word	0x200006ec

08006ecc <_isatty>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <_isatty+0xc>)
 8006ece:	2258      	movs	r2, #88	; 0x58
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	200006ec 	.word	0x200006ec

08006edc <_kill>:
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <_kill+0xc>)
 8006ede:	2258      	movs	r2, #88	; 0x58
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee6:	4770      	bx	lr
 8006ee8:	200006ec 	.word	0x200006ec

08006eec <_lseek>:
 8006eec:	4b02      	ldr	r3, [pc, #8]	; (8006ef8 <_lseek+0xc>)
 8006eee:	2258      	movs	r2, #88	; 0x58
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	4770      	bx	lr
 8006ef8:	200006ec 	.word	0x200006ec

08006efc <_read>:
 8006efc:	4b02      	ldr	r3, [pc, #8]	; (8006f08 <_read+0xc>)
 8006efe:	2258      	movs	r2, #88	; 0x58
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	4770      	bx	lr
 8006f08:	200006ec 	.word	0x200006ec

08006f0c <_sbrk>:
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <_sbrk+0x14>)
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	4602      	mov	r2, r0
 8006f12:	b909      	cbnz	r1, 8006f18 <_sbrk+0xc>
 8006f14:	4903      	ldr	r1, [pc, #12]	; (8006f24 <_sbrk+0x18>)
 8006f16:	6019      	str	r1, [r3, #0]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	4402      	add	r2, r0
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	4770      	bx	lr
 8006f20:	20000228 	.word	0x20000228
 8006f24:	200006f0 	.word	0x200006f0

08006f28 <_write>:
 8006f28:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <_write+0xc>)
 8006f2a:	2258      	movs	r2, #88	; 0x58
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f32:	4770      	bx	lr
 8006f34:	200006ec 	.word	0x200006ec

08006f38 <_exit>:
 8006f38:	e7fe      	b.n	8006f38 <_exit>
	...

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
